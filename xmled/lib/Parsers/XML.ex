# Generated from .\lib\Parsers\XML.ex.exs, do not edit.
# Generated at 2021-02-12 11:59:42Z.

defmodule XMLed.Parsers.XML do
  import NimbleParsec

  def parse_from_file(path) do
    case File.read(path) do
      {:ok, content} -> parse_from_string(content)
      {:error, posix} -> {:error, posix}
    end
  end

  def parse_from_string(input) do
    case parse(input) do
      {:ok, doc, _, _, _, _} -> {:ok, doc}
      v -> v
    end
  end

  def check_tags(_rest, user_acc, context, _line, _offset) do
    name = Keyword.get(user_acc, :name)
    {:name, etag_name} = Keyword.get(user_acc, :etag_name)

    if name == etag_name do
      {Keyword.drop(user_acc, [:etag_name]), context}
    else
      {:error, "starting #{name} and ending #{etag_name} tag names do not match"}
    end
  end

  def prepare_entity(_rest, [name: name], context, _line, _offset) do
    {[entity_ref: name], context}
  end

  # Based off https://cs.lmu.edu/~ray/notes/xmlgrammar/

  @spec parse(binary, keyword) ::
          {:ok, [term], rest, context, line, byte_offset}
          | {:error, reason, rest, context, line, byte_offset}
        when line: {pos_integer, byte_offset},
             byte_offset: pos_integer,
             rest: binary,
             reason: String.t(),
             context: map()
  defp parse(binary, opts \\ []) when is_binary(binary) do
    context = Map.new(Keyword.get(opts, :context, []))
    byte_offset = Keyword.get(opts, :byte_offset, 0)

    line =
      case(Keyword.get(opts, :line, 1)) do
        {_, _} = line ->
          line

        line ->
          {line, byte_offset}
      end

    case(parse__0(binary, [], [], context, line, byte_offset)) do
      {:ok, acc, rest, context, line, offset} ->
        {:ok, :lists.reverse(acc), rest, context, line, offset}

      {:error, _, _, _, _, _} = error ->
        error
    end
  end

  defp parse__0(rest, acc, stack, context, line, offset) do
    parse__1(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1(rest, acc, stack, context, line, offset) do
    parse__2(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__2(rest, acc, stack, context, line, offset) do
    parse__3(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__3(<<"<?xml", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__4(rest, [] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp parse__3(rest, _acc, _stack, context, line, offset) do
    {:error, "expected XMLDecl while processing prolog inside document", rest, context, line,
     offset}
  end

  defp parse__4(rest, acc, stack, context, line, offset) do
    parse__5(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__5(rest, acc, stack, context, line, offset) do
    parse__6(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__6(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__7(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__6(rest, _acc, _stack, context, line, offset) do
    {:error,
     "expected S while processing VersionInfo inside XMLDecl inside prolog inside document", rest,
     context, line, offset}
  end

  defp parse__7(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__9(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__7(rest, acc, stack, context, line, offset) do
    parse__8(rest, acc, stack, context, line, offset)
  end

  defp parse__9(rest, acc, stack, context, line, offset) do
    parse__7(rest, acc, stack, context, line, offset)
  end

  defp parse__8(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__10(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__10(<<"version", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__11(rest, [] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp parse__10(rest, _acc, _stack, context, line, offset) do
    {:error, "expected VersionInfo while processing XMLDecl inside prolog inside document", rest,
     context, line, offset}
  end

  defp parse__11(rest, acc, stack, context, line, offset) do
    parse__12(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__12(rest, acc, stack, context, line, offset) do
    parse__16(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__14(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__15(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__14(rest, [], stack, context, line, offset)
  end

  defp parse__16(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__17(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__16(rest, acc, stack, context, line, offset) do
    parse__15(rest, acc, stack, context, line, offset)
  end

  defp parse__17(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__19(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__17(rest, acc, stack, context, line, offset) do
    parse__18(rest, acc, stack, context, line, offset)
  end

  defp parse__19(rest, acc, stack, context, line, offset) do
    parse__17(rest, acc, stack, context, line, offset)
  end

  defp parse__18(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__13(<<"=", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__20(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__13(rest, _acc, _stack, context, line, offset) do
    {:error,
     "expected Eq while processing VersionInfo inside XMLDecl inside prolog inside document",
     rest, context, line, offset}
  end

  defp parse__20(rest, acc, stack, context, line, offset) do
    parse__24(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__22(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__21(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__23(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__22(rest, [], stack, context, line, offset)
  end

  defp parse__24(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__25(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__24(rest, acc, stack, context, line, offset) do
    parse__23(rest, acc, stack, context, line, offset)
  end

  defp parse__25(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__27(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__25(rest, acc, stack, context, line, offset) do
    parse__26(rest, acc, stack, context, line, offset)
  end

  defp parse__27(rest, acc, stack, context, line, offset) do
    parse__25(rest, acc, stack, context, line, offset)
  end

  defp parse__26(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__21(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__21(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__28(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__28(rest, acc, stack, context, line, offset) do
    parse__35(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__30(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__31(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__30(rest, _acc, _stack, context, line, offset) do
    {:error, "expected VersionInfo while processing XMLDecl inside prolog inside document", rest,
     context, line, offset}
  end

  defp parse__31(<<"1.0", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__32(rest, ["1.0"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__31(<<"1.1", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__32(rest, ["1.1"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__31(rest, _acc, _stack, context, line, offset) do
    {:error,
     "expected VersionNum while processing VersionInfo inside XMLDecl inside prolog inside document",
     rest, context, line, offset}
  end

  defp parse__32(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__33(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__32(rest, _acc, _stack, context, line, offset) do
    {:error, "expected VersionInfo while processing XMLDecl inside prolog inside document", rest,
     context, line, offset}
  end

  defp parse__33(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__34(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__30(rest, [], stack, context, line, offset)
  end

  defp parse__35(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__36(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__35(rest, acc, stack, context, line, offset) do
    parse__34(rest, acc, stack, context, line, offset)
  end

  defp parse__36(<<"1.0", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__37(rest, ["1.0"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__36(<<"1.1", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__37(rest, ["1.1"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__36(rest, acc, stack, context, line, offset) do
    parse__34(rest, acc, stack, context, line, offset)
  end

  defp parse__37(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__38(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__37(rest, acc, stack, context, line, offset) do
    parse__34(rest, acc, stack, context, line, offset)
  end

  defp parse__38(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__29(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__39(
      rest,
      [
        version:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__39(rest, acc, stack, context, line, offset) do
    parse__43(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__41(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__40(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__42(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__41(rest, [], stack, context, line, offset)
  end

  defp parse__43(rest, acc, stack, context, line, offset) do
    parse__44(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__44(rest, acc, stack, context, line, offset) do
    parse__45(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__45(rest, acc, stack, context, line, offset) do
    parse__46(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__46(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__47(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__46(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__47(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__49(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__47(rest, acc, stack, context, line, offset) do
    parse__48(rest, acc, stack, context, line, offset)
  end

  defp parse__49(rest, acc, stack, context, line, offset) do
    parse__47(rest, acc, stack, context, line, offset)
  end

  defp parse__48(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__50(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__50(<<"encoding", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__51(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__50(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__51(rest, acc, stack, context, line, offset) do
    parse__52(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__52(rest, acc, stack, context, line, offset) do
    parse__56(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__54(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__53(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__55(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__54(rest, [], stack, context, line, offset)
  end

  defp parse__56(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__57(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__56(rest, acc, stack, context, line, offset) do
    parse__55(rest, acc, stack, context, line, offset)
  end

  defp parse__57(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__59(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__57(rest, acc, stack, context, line, offset) do
    parse__58(rest, acc, stack, context, line, offset)
  end

  defp parse__59(rest, acc, stack, context, line, offset) do
    parse__57(rest, acc, stack, context, line, offset)
  end

  defp parse__58(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__53(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__53(<<"=", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__60(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__53(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__60(rest, acc, stack, context, line, offset) do
    parse__64(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__62(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__61(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__63(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__62(rest, [], stack, context, line, offset)
  end

  defp parse__64(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__65(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__64(rest, acc, stack, context, line, offset) do
    parse__63(rest, acc, stack, context, line, offset)
  end

  defp parse__65(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__67(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__65(rest, acc, stack, context, line, offset) do
    parse__66(rest, acc, stack, context, line, offset)
  end

  defp parse__67(rest, acc, stack, context, line, offset) do
    parse__65(rest, acc, stack, context, line, offset)
  end

  defp parse__66(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__61(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__61(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__68(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__68(rest, acc, stack, context, line, offset) do
    parse__77(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__70(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__71(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__70(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__71(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 65 and x0 <= 90) or (x0 >= 97 and x0 <= 122) do
    parse__72(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__71(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__72(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 65 and x0 <= 90) or (x0 >= 97 and x0 <= 122) or (x0 >= 48 and x0 <= 57) or
              x0 === 46 or x0 === 95 or x0 === 45 do
    parse__74(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__72(rest, acc, stack, context, line, offset) do
    parse__73(rest, acc, stack, context, line, offset)
  end

  defp parse__74(rest, acc, stack, context, line, offset) do
    parse__72(rest, acc, stack, context, line, offset)
  end

  defp parse__73(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__75(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__73(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__42(rest, acc, stack, context, line, offset)
  end

  defp parse__75(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__69(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__76(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__70(rest, [], stack, context, line, offset)
  end

  defp parse__77(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__78(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__77(rest, acc, stack, context, line, offset) do
    parse__76(rest, acc, stack, context, line, offset)
  end

  defp parse__78(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 65 and x0 <= 90) or (x0 >= 97 and x0 <= 122) do
    parse__79(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__78(rest, acc, stack, context, line, offset) do
    parse__76(rest, acc, stack, context, line, offset)
  end

  defp parse__79(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 65 and x0 <= 90) or (x0 >= 97 and x0 <= 122) or (x0 >= 48 and x0 <= 57) or
              x0 === 46 or x0 === 95 or x0 === 45 do
    parse__81(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__79(rest, acc, stack, context, line, offset) do
    parse__80(rest, acc, stack, context, line, offset)
  end

  defp parse__81(rest, acc, stack, context, line, offset) do
    parse__79(rest, acc, stack, context, line, offset)
  end

  defp parse__80(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__82(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__80(rest, acc, stack, context, line, offset) do
    parse__76(rest, acc, stack, context, line, offset)
  end

  defp parse__82(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__69(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__69(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__83(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__83(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__84(
      rest,
      [
        encoding:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__84(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__40(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__40(rest, acc, stack, context, line, offset) do
    parse__88(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__86(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__85(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__87(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__86(rest, [], stack, context, line, offset)
  end

  defp parse__88(rest, acc, stack, context, line, offset) do
    parse__89(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__89(rest, acc, stack, context, line, offset) do
    parse__90(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__90(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__91(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__90(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__91(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__93(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__91(rest, acc, stack, context, line, offset) do
    parse__92(rest, acc, stack, context, line, offset)
  end

  defp parse__93(rest, acc, stack, context, line, offset) do
    parse__91(rest, acc, stack, context, line, offset)
  end

  defp parse__92(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__94(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__94(<<"standalone", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__95(rest, [] ++ acc, stack, context, comb__line, comb__offset + 10)
  end

  defp parse__94(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__95(rest, acc, stack, context, line, offset) do
    parse__96(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__96(rest, acc, stack, context, line, offset) do
    parse__100(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__98(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__97(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__99(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__98(rest, [], stack, context, line, offset)
  end

  defp parse__100(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__101(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__100(rest, acc, stack, context, line, offset) do
    parse__99(rest, acc, stack, context, line, offset)
  end

  defp parse__101(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__103(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__101(rest, acc, stack, context, line, offset) do
    parse__102(rest, acc, stack, context, line, offset)
  end

  defp parse__103(rest, acc, stack, context, line, offset) do
    parse__101(rest, acc, stack, context, line, offset)
  end

  defp parse__102(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__97(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__97(<<"=", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__104(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__97(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__104(rest, acc, stack, context, line, offset) do
    parse__108(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__106(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__105(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__107(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__106(rest, [], stack, context, line, offset)
  end

  defp parse__108(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__109(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__108(rest, acc, stack, context, line, offset) do
    parse__107(rest, acc, stack, context, line, offset)
  end

  defp parse__109(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__111(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__109(rest, acc, stack, context, line, offset) do
    parse__110(rest, acc, stack, context, line, offset)
  end

  defp parse__111(rest, acc, stack, context, line, offset) do
    parse__109(rest, acc, stack, context, line, offset)
  end

  defp parse__110(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__105(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__105(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__112(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__112(rest, acc, stack, context, line, offset) do
    parse__119(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__114(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__115(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__114(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__115(<<"yes", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__116(rest, ["yes"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__115(<<"no", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__116(rest, ["no"] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__115(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__116(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__117(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__116(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__87(rest, acc, stack, context, line, offset)
  end

  defp parse__117(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__113(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__118(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__114(rest, [], stack, context, line, offset)
  end

  defp parse__119(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__120(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__119(rest, acc, stack, context, line, offset) do
    parse__118(rest, acc, stack, context, line, offset)
  end

  defp parse__120(<<"yes", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__121(rest, ["yes"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__120(<<"no", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__121(rest, ["no"] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__120(rest, acc, stack, context, line, offset) do
    parse__118(rest, acc, stack, context, line, offset)
  end

  defp parse__121(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__122(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__121(rest, acc, stack, context, line, offset) do
    parse__118(rest, acc, stack, context, line, offset)
  end

  defp parse__122(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__113(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__113(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__123(
      rest,
      [
        standalone:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__123(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__85(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__85(rest, acc, stack, context, line, offset) do
    parse__127(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__125(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__124(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__126(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__125(rest, [], stack, context, line, offset)
  end

  defp parse__127(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__128(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__127(rest, acc, stack, context, line, offset) do
    parse__126(rest, acc, stack, context, line, offset)
  end

  defp parse__128(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__130(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__128(rest, acc, stack, context, line, offset) do
    parse__129(rest, acc, stack, context, line, offset)
  end

  defp parse__130(rest, acc, stack, context, line, offset) do
    parse__128(rest, acc, stack, context, line, offset)
  end

  defp parse__129(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__124(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__124(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__131(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__124(rest, _acc, _stack, context, line, offset) do
    {:error, "expected XMLDecl while processing prolog inside document", rest, context, line,
     offset}
  end

  defp parse__131(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__132(rest, [xml_decl: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__132(rest, acc, stack, context, line, offset) do
    parse__134(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__134(rest, acc, stack, context, line, offset) do
    parse__173(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__136(rest, acc, stack, context, line, offset) do
    parse__137(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__137(rest, acc, stack, context, line, offset) do
    parse__138(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__138(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__139(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__138(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__133(rest, acc, stack, context, line, offset)
  end

  defp parse__139(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__141(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__139(rest, acc, stack, context, line, offset) do
    parse__140(rest, acc, stack, context, line, offset)
  end

  defp parse__141(rest, acc, stack, context, line, offset) do
    parse__139(rest, acc, stack, context, line, offset)
  end

  defp parse__140(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__142(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__142(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__143(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__143(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__135(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__144(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__136(rest, [], stack, context, line, offset)
  end

  defp parse__145(rest, acc, stack, context, line, offset) do
    parse__146(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__146(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__147(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__146(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__147(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__147(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__147(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__147(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__147(rest, acc, stack, context, line, offset) do
    parse__148(rest, acc, stack, context, line, offset)
  end

  defp parse__148(rest, acc, stack, context, line, offset) do
    parse__149(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__149(rest, acc, stack, context, line, offset) do
    parse__150(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__150(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__151(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__150(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__151(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__153(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__151(rest, acc, stack, context, line, offset) do
    parse__152(rest, acc, stack, context, line, offset)
  end

  defp parse__153(rest, acc, stack, context, line, offset) do
    parse__151(rest, acc, stack, context, line, offset)
  end

  defp parse__152(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__154(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__154(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__155(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__155(rest, acc, stack, context, line, offset) do
    parse__159(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__157(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__156(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__158(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__157(rest, [], stack, context, line, offset)
  end

  defp parse__159(rest, acc, stack, context, line, offset) do
    parse__160(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__160(rest, acc, stack, context, line, offset) do
    parse__161(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__161(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__162(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__161(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__158(rest, acc, stack, context, line, offset)
  end

  defp parse__162(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__164(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__162(rest, acc, stack, context, line, offset) do
    parse__163(rest, acc, stack, context, line, offset)
  end

  defp parse__164(rest, acc, stack, context, line, offset) do
    parse__162(rest, acc, stack, context, line, offset)
  end

  defp parse__163(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__165(rest, acc, stack, context, line, offset)
  end

  defp parse__163(rest, acc, stack, context, line, offset) do
    parse__166(rest, acc, stack, context, line, offset)
  end

  defp parse__166(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__167(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__166(rest, acc, stack, context, line, offset) do
    parse__165(rest, acc, stack, context, line, offset)
  end

  defp parse__167(rest, acc, stack, context, line, offset) do
    parse__163(rest, acc, stack, context, line, offset)
  end

  defp parse__165(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__168(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__168(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__169(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__169(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__156(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__156(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__170(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__156(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__144(rest, acc, stack, context, line, offset)
  end

  defp parse__170(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__171(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__171(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__135(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__172(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__145(rest, [], stack, context, line, offset)
  end

  defp parse__173(rest, acc, stack, context, line, offset) do
    parse__174(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__174(rest, acc, stack, context, line, offset) do
    parse__175(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__175(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__176(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp parse__175(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__172(rest, acc, stack, context, line, offset)
  end

  defp parse__176(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__177(rest, acc, stack, context, line, offset)
  end

  defp parse__176(rest, acc, stack, context, line, offset) do
    parse__178(rest, acc, stack, context, line, offset)
  end

  defp parse__178(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__179(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__178(rest, acc, stack, context, line, offset) do
    parse__177(rest, acc, stack, context, line, offset)
  end

  defp parse__179(rest, acc, stack, context, line, offset) do
    parse__176(rest, acc, stack, context, line, offset)
  end

  defp parse__177(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__180(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__177(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__172(rest, acc, stack, context, line, offset)
  end

  defp parse__180(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__181(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__181(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__182(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__182(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__135(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__133(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__183(rest, acc, stack, context, line, offset)
  end

  defp parse__135(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__134(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__183(rest, acc, stack, context, line, offset) do
    parse__187(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__185(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__184(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__186(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__185(rest, [], stack, context, line, offset)
  end

  defp parse__187(rest, acc, stack, context, line, offset) do
    parse__188(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__188(<<"<!DOCTYPE", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__189(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp parse__188(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__186(rest, acc, stack, context, line, offset)
  end

  defp parse__189(rest, acc, stack, context, line, offset) do
    parse__190(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__190(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__191(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__190(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__186(rest, acc, stack, context, line, offset)
  end

  defp parse__191(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__193(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__191(rest, acc, stack, context, line, offset) do
    parse__192(rest, acc, stack, context, line, offset)
  end

  defp parse__193(rest, acc, stack, context, line, offset) do
    parse__191(rest, acc, stack, context, line, offset)
  end

  defp parse__192(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__194(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__194(rest, acc, stack, context, line, offset) do
    parse__195(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__195(rest, acc, stack, context, line, offset) do
    parse__196(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__196(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__197(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__196(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__186(rest, acc, stack, context, line, offset)
  end

  defp parse__197(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__199(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__197(rest, acc, stack, context, line, offset) do
    parse__198(rest, acc, stack, context, line, offset)
  end

  defp parse__199(rest, acc, stack, context, line, offset) do
    parse__197(rest, acc, stack, context, line, offset)
  end

  defp parse__198(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__200(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__200(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__201(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__201(rest, acc, stack, context, line, offset) do
    parse__205(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__203(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__202(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__204(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__203(rest, [], stack, context, line, offset)
  end

  defp parse__205(rest, acc, stack, context, line, offset) do
    parse__206(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__206(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__207(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__206(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__207(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__209(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__207(rest, acc, stack, context, line, offset) do
    parse__208(rest, acc, stack, context, line, offset)
  end

  defp parse__209(rest, acc, stack, context, line, offset) do
    parse__207(rest, acc, stack, context, line, offset)
  end

  defp parse__208(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__210(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__210(rest, acc, stack, context, line, offset) do
    parse__255(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__212(rest, acc, stack, context, line, offset) do
    parse__213(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__213(<<"PUBLIC", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__214(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__213(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__214(rest, acc, stack, context, line, offset) do
    parse__215(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__215(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__216(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__215(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__216(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__218(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__216(rest, acc, stack, context, line, offset) do
    parse__217(rest, acc, stack, context, line, offset)
  end

  defp parse__218(rest, acc, stack, context, line, offset) do
    parse__216(rest, acc, stack, context, line, offset)
  end

  defp parse__217(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__219(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__219(rest, acc, stack, context, line, offset) do
    parse__220(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__220(rest, acc, stack, context, line, offset) do
    parse__228(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__222(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__223(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__222(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__223(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__225(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__223(rest, acc, stack, context, line, offset) do
    parse__224(rest, acc, stack, context, line, offset)
  end

  defp parse__225(rest, acc, stack, context, line, offset) do
    parse__223(rest, acc, stack, context, line, offset)
  end

  defp parse__224(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__226(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__224(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__226(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__221(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__227(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__222(rest, [], stack, context, line, offset)
  end

  defp parse__228(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__229(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__228(rest, acc, stack, context, line, offset) do
    parse__227(rest, acc, stack, context, line, offset)
  end

  defp parse__229(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__231(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__229(rest, acc, stack, context, line, offset) do
    parse__230(rest, acc, stack, context, line, offset)
  end

  defp parse__231(rest, acc, stack, context, line, offset) do
    parse__229(rest, acc, stack, context, line, offset)
  end

  defp parse__230(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__232(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__230(rest, acc, stack, context, line, offset) do
    parse__227(rest, acc, stack, context, line, offset)
  end

  defp parse__232(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__221(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__221(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__233(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__233(rest, acc, stack, context, line, offset) do
    parse__234(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__234(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__235(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__234(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__235(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__237(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__235(rest, acc, stack, context, line, offset) do
    parse__236(rest, acc, stack, context, line, offset)
  end

  defp parse__237(rest, acc, stack, context, line, offset) do
    parse__235(rest, acc, stack, context, line, offset)
  end

  defp parse__236(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__238(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__238(rest, acc, stack, context, line, offset) do
    parse__239(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__239(rest, acc, stack, context, line, offset) do
    parse__247(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__241(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__242(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__241(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__242(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__244(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__242(rest, acc, stack, context, line, offset) do
    parse__243(rest, acc, stack, context, line, offset)
  end

  defp parse__244(rest, acc, stack, context, line, offset) do
    parse__242(rest, acc, stack, context, line, offset)
  end

  defp parse__243(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__245(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__243(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__204(rest, acc, stack, context, line, offset)
  end

  defp parse__245(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__240(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__246(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__241(rest, [], stack, context, line, offset)
  end

  defp parse__247(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__248(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__247(rest, acc, stack, context, line, offset) do
    parse__246(rest, acc, stack, context, line, offset)
  end

  defp parse__248(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__250(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__248(rest, acc, stack, context, line, offset) do
    parse__249(rest, acc, stack, context, line, offset)
  end

  defp parse__250(rest, acc, stack, context, line, offset) do
    parse__248(rest, acc, stack, context, line, offset)
  end

  defp parse__249(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__251(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__249(rest, acc, stack, context, line, offset) do
    parse__246(rest, acc, stack, context, line, offset)
  end

  defp parse__251(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__240(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__240(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__252(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__252(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__253(rest, [public: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__253(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__211(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__254(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__212(rest, [], stack, context, line, offset)
  end

  defp parse__255(rest, acc, stack, context, line, offset) do
    parse__256(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__256(<<"SYSTEM", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__257(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__256(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__254(rest, acc, stack, context, line, offset)
  end

  defp parse__257(rest, acc, stack, context, line, offset) do
    parse__258(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__258(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__259(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__258(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__254(rest, acc, stack, context, line, offset)
  end

  defp parse__259(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__261(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__259(rest, acc, stack, context, line, offset) do
    parse__260(rest, acc, stack, context, line, offset)
  end

  defp parse__261(rest, acc, stack, context, line, offset) do
    parse__259(rest, acc, stack, context, line, offset)
  end

  defp parse__260(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__262(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__262(rest, acc, stack, context, line, offset) do
    parse__263(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__263(rest, acc, stack, context, line, offset) do
    parse__271(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__265(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__266(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__265(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__254(rest, acc, stack, context, line, offset)
  end

  defp parse__266(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__268(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__266(rest, acc, stack, context, line, offset) do
    parse__267(rest, acc, stack, context, line, offset)
  end

  defp parse__268(rest, acc, stack, context, line, offset) do
    parse__266(rest, acc, stack, context, line, offset)
  end

  defp parse__267(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__269(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__267(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__254(rest, acc, stack, context, line, offset)
  end

  defp parse__269(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__264(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__270(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__265(rest, [], stack, context, line, offset)
  end

  defp parse__271(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__272(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__271(rest, acc, stack, context, line, offset) do
    parse__270(rest, acc, stack, context, line, offset)
  end

  defp parse__272(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__274(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__272(rest, acc, stack, context, line, offset) do
    parse__273(rest, acc, stack, context, line, offset)
  end

  defp parse__274(rest, acc, stack, context, line, offset) do
    parse__272(rest, acc, stack, context, line, offset)
  end

  defp parse__273(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__275(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__273(rest, acc, stack, context, line, offset) do
    parse__270(rest, acc, stack, context, line, offset)
  end

  defp parse__275(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__264(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__264(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__276(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__276(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__277(rest, [system: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__277(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__211(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__211(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__202(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__202(rest, acc, stack, context, line, offset) do
    parse__278(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__278(rest, acc, stack, context, line, offset) do
    parse__282(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__280(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__279(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__281(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__280(rest, [], stack, context, line, offset)
  end

  defp parse__282(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__283(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__282(rest, acc, stack, context, line, offset) do
    parse__281(rest, acc, stack, context, line, offset)
  end

  defp parse__283(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__285(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__283(rest, acc, stack, context, line, offset) do
    parse__284(rest, acc, stack, context, line, offset)
  end

  defp parse__285(rest, acc, stack, context, line, offset) do
    parse__283(rest, acc, stack, context, line, offset)
  end

  defp parse__284(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__279(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__279(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__286(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__286(rest, acc, stack, context, line, offset) do
    parse__290(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__288(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__287(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__289(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__288(rest, [], stack, context, line, offset)
  end

  defp parse__290(<<"[", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__291(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__290(rest, acc, stack, context, line, offset) do
    parse__289(rest, acc, stack, context, line, offset)
  end

  defp parse__291(rest, acc, stack, context, line, offset) do
    parse__293(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__293(rest, acc, stack, context, line, offset) do
    parse__354(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__295(rest, acc, stack, context, line, offset) do
    parse__304(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__297(rest, acc, stack, context, line, offset) do
    parse__298(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__298(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__299(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__298(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    parse__292(rest, acc, stack, context, line, offset)
  end

  defp parse__299(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__301(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__299(rest, acc, stack, context, line, offset) do
    parse__300(rest, acc, stack, context, line, offset)
  end

  defp parse__301(rest, acc, stack, context, line, offset) do
    parse__299(rest, acc, stack, context, line, offset)
  end

  defp parse__300(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__302(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__302(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__296(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__303(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__297(rest, [], stack, context, line, offset)
  end

  defp parse__304(rest, acc, stack, context, line, offset) do
    parse__305(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__305(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__306(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__305(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__303(rest, acc, stack, context, line, offset)
  end

  defp parse__306(rest, acc, stack, context, line, offset) do
    parse__307(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__307(rest, acc, stack, context, line, offset) do
    parse__308(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__308(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__309(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__308(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__303(rest, acc, stack, context, line, offset)
  end

  defp parse__309(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__311(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__309(rest, acc, stack, context, line, offset) do
    parse__310(rest, acc, stack, context, line, offset)
  end

  defp parse__311(rest, acc, stack, context, line, offset) do
    parse__309(rest, acc, stack, context, line, offset)
  end

  defp parse__310(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__312(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__312(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__313(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__313(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__314(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__313(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__303(rest, acc, stack, context, line, offset)
  end

  defp parse__314(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__315(rest, [PEReference: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__315(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__296(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__296(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__294(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__316(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__295(rest, [], stack, context, line, offset)
  end

  defp parse__317(rest, acc, stack, context, line, offset) do
    parse__318(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__318(rest, acc, stack, context, line, offset) do
    parse__350(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__320(rest, acc, stack, context, line, offset) do
    parse__321(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__321(<<"<![", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__322(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__321(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__316(rest, acc, stack, context, line, offset)
  end

  defp parse__322(rest, acc, stack, context, line, offset) do
    parse__323(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__323(rest, acc, stack, context, line, offset) do
    parse__327(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__325(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__324(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__326(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__325(rest, [], stack, context, line, offset)
  end

  defp parse__327(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__328(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__327(rest, acc, stack, context, line, offset) do
    parse__326(rest, acc, stack, context, line, offset)
  end

  defp parse__328(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__330(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__328(rest, acc, stack, context, line, offset) do
    parse__329(rest, acc, stack, context, line, offset)
  end

  defp parse__330(rest, acc, stack, context, line, offset) do
    parse__328(rest, acc, stack, context, line, offset)
  end

  defp parse__329(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__324(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__324(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__331(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__331(<<"IGNORE", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__332(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__331(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__316(rest, acc, stack, context, line, offset)
  end

  defp parse__332(rest, acc, stack, context, line, offset) do
    parse__333(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__333(rest, acc, stack, context, line, offset) do
    parse__337(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__335(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__334(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__336(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__335(rest, [], stack, context, line, offset)
  end

  defp parse__337(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__338(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__337(rest, acc, stack, context, line, offset) do
    parse__336(rest, acc, stack, context, line, offset)
  end

  defp parse__338(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__340(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__338(rest, acc, stack, context, line, offset) do
    parse__339(rest, acc, stack, context, line, offset)
  end

  defp parse__340(rest, acc, stack, context, line, offset) do
    parse__338(rest, acc, stack, context, line, offset)
  end

  defp parse__339(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__334(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__334(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__341(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__341(<<"[", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__342(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__341(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__316(rest, acc, stack, context, line, offset)
  end

  defp parse__342(rest, acc, stack, context, line, offset) do
    parse__344(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__344(rest, acc, stack, context, line, offset) do
    case(x_ignoreSectContents__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        parse__345(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        parse__343(rest, acc, stack, context, line, offset)
    end
  end

  defp parse__343(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__346(rest, acc, stack, context, line, offset)
  end

  defp parse__345(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__344(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__346(<<"]]>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__347(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__346(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__316(rest, acc, stack, context, line, offset)
  end

  defp parse__347(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__348(rest, [ignoreSect: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__348(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__319(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__349(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__320(rest, [], stack, context, line, offset)
  end

  defp parse__350(rest, acc, stack, context, line, offset) do
    case(x_includeSect__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        parse__351(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        parse__349(rest, acc, stack, context, line, offset)
    end
  end

  defp parse__351(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__319(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__319(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__352(
      rest,
      [conditionalSect: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__352(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__294(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__353(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__317(rest, [], stack, context, line, offset)
  end

  defp parse__354(rest, acc, stack, context, line, offset) do
    parse__1338(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__356(rest, acc, stack, context, line, offset) do
    parse__357(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__357(rest, acc, stack, context, line, offset) do
    parse__358(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__358(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__359(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp parse__358(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__353(rest, acc, stack, context, line, offset)
  end

  defp parse__359(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__360(rest, acc, stack, context, line, offset)
  end

  defp parse__359(rest, acc, stack, context, line, offset) do
    parse__361(rest, acc, stack, context, line, offset)
  end

  defp parse__361(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__362(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__361(rest, acc, stack, context, line, offset) do
    parse__360(rest, acc, stack, context, line, offset)
  end

  defp parse__362(rest, acc, stack, context, line, offset) do
    parse__359(rest, acc, stack, context, line, offset)
  end

  defp parse__360(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__363(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__360(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__353(rest, acc, stack, context, line, offset)
  end

  defp parse__363(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__364(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__364(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__365(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__365(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__366(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__356(rest, [], stack, context, line, offset)
  end

  defp parse__367(rest, acc, stack, context, line, offset) do
    parse__368(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__368(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__369(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__368(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__369(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__369(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__369(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__369(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__369(rest, acc, stack, context, line, offset) do
    parse__370(rest, acc, stack, context, line, offset)
  end

  defp parse__370(rest, acc, stack, context, line, offset) do
    parse__371(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__371(rest, acc, stack, context, line, offset) do
    parse__372(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__372(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__373(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__372(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__373(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__375(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__373(rest, acc, stack, context, line, offset) do
    parse__374(rest, acc, stack, context, line, offset)
  end

  defp parse__375(rest, acc, stack, context, line, offset) do
    parse__373(rest, acc, stack, context, line, offset)
  end

  defp parse__374(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__376(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__376(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__377(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__377(rest, acc, stack, context, line, offset) do
    parse__381(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__379(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__378(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__380(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__379(rest, [], stack, context, line, offset)
  end

  defp parse__381(rest, acc, stack, context, line, offset) do
    parse__382(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__382(rest, acc, stack, context, line, offset) do
    parse__383(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__383(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__384(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__383(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__380(rest, acc, stack, context, line, offset)
  end

  defp parse__384(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__386(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__384(rest, acc, stack, context, line, offset) do
    parse__385(rest, acc, stack, context, line, offset)
  end

  defp parse__386(rest, acc, stack, context, line, offset) do
    parse__384(rest, acc, stack, context, line, offset)
  end

  defp parse__385(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__387(rest, acc, stack, context, line, offset)
  end

  defp parse__385(rest, acc, stack, context, line, offset) do
    parse__388(rest, acc, stack, context, line, offset)
  end

  defp parse__388(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__389(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__388(rest, acc, stack, context, line, offset) do
    parse__387(rest, acc, stack, context, line, offset)
  end

  defp parse__389(rest, acc, stack, context, line, offset) do
    parse__385(rest, acc, stack, context, line, offset)
  end

  defp parse__387(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__390(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__390(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__391(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__391(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__378(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__378(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__392(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__378(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__366(rest, acc, stack, context, line, offset)
  end

  defp parse__392(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__393(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__393(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__394(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__367(rest, [], stack, context, line, offset)
  end

  defp parse__395(rest, acc, stack, context, line, offset) do
    parse__396(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__396(<<"<!NOTATION", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__397(rest, [] ++ acc, stack, context, comb__line, comb__offset + 10)
  end

  defp parse__396(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__397(rest, acc, stack, context, line, offset) do
    parse__398(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__398(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__399(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__398(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__399(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__401(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__399(rest, acc, stack, context, line, offset) do
    parse__400(rest, acc, stack, context, line, offset)
  end

  defp parse__401(rest, acc, stack, context, line, offset) do
    parse__399(rest, acc, stack, context, line, offset)
  end

  defp parse__400(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__402(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__402(rest, acc, stack, context, line, offset) do
    parse__403(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__403(rest, acc, stack, context, line, offset) do
    parse__404(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__404(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__405(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__404(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__405(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__407(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__405(rest, acc, stack, context, line, offset) do
    parse__406(rest, acc, stack, context, line, offset)
  end

  defp parse__407(rest, acc, stack, context, line, offset) do
    parse__405(rest, acc, stack, context, line, offset)
  end

  defp parse__406(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__408(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__408(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__409(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__409(rest, acc, stack, context, line, offset) do
    parse__410(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__410(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__411(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__410(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__411(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__413(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__411(rest, acc, stack, context, line, offset) do
    parse__412(rest, acc, stack, context, line, offset)
  end

  defp parse__413(rest, acc, stack, context, line, offset) do
    parse__411(rest, acc, stack, context, line, offset)
  end

  defp parse__412(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__414(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__414(rest, acc, stack, context, line, offset) do
    parse__440(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__416(rest, acc, stack, context, line, offset) do
    parse__417(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__417(<<"PUBLIC", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__418(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__417(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__418(rest, acc, stack, context, line, offset) do
    parse__419(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__419(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__420(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__419(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__420(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__422(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__420(rest, acc, stack, context, line, offset) do
    parse__421(rest, acc, stack, context, line, offset)
  end

  defp parse__422(rest, acc, stack, context, line, offset) do
    parse__420(rest, acc, stack, context, line, offset)
  end

  defp parse__421(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__423(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__423(rest, acc, stack, context, line, offset) do
    parse__424(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__424(rest, acc, stack, context, line, offset) do
    parse__432(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__426(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__427(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__426(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__427(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__429(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__427(rest, acc, stack, context, line, offset) do
    parse__428(rest, acc, stack, context, line, offset)
  end

  defp parse__429(rest, acc, stack, context, line, offset) do
    parse__427(rest, acc, stack, context, line, offset)
  end

  defp parse__428(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__430(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__428(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__430(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__425(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__431(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__426(rest, [], stack, context, line, offset)
  end

  defp parse__432(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__433(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__432(rest, acc, stack, context, line, offset) do
    parse__431(rest, acc, stack, context, line, offset)
  end

  defp parse__433(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__435(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__433(rest, acc, stack, context, line, offset) do
    parse__434(rest, acc, stack, context, line, offset)
  end

  defp parse__435(rest, acc, stack, context, line, offset) do
    parse__433(rest, acc, stack, context, line, offset)
  end

  defp parse__434(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__436(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__434(rest, acc, stack, context, line, offset) do
    parse__431(rest, acc, stack, context, line, offset)
  end

  defp parse__436(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__425(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__425(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__437(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__437(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__438(rest, [PublicID: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__438(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__415(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__439(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__416(rest, [], stack, context, line, offset)
  end

  defp parse__440(rest, acc, stack, context, line, offset) do
    parse__485(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__442(rest, acc, stack, context, line, offset) do
    parse__443(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__443(<<"PUBLIC", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__444(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__443(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__444(rest, acc, stack, context, line, offset) do
    parse__445(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__445(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__446(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__445(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__446(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__448(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__446(rest, acc, stack, context, line, offset) do
    parse__447(rest, acc, stack, context, line, offset)
  end

  defp parse__448(rest, acc, stack, context, line, offset) do
    parse__446(rest, acc, stack, context, line, offset)
  end

  defp parse__447(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__449(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__449(rest, acc, stack, context, line, offset) do
    parse__450(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__450(rest, acc, stack, context, line, offset) do
    parse__458(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__452(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__453(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__452(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__453(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__455(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__453(rest, acc, stack, context, line, offset) do
    parse__454(rest, acc, stack, context, line, offset)
  end

  defp parse__455(rest, acc, stack, context, line, offset) do
    parse__453(rest, acc, stack, context, line, offset)
  end

  defp parse__454(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__456(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__454(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__456(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__451(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__457(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__452(rest, [], stack, context, line, offset)
  end

  defp parse__458(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__459(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__458(rest, acc, stack, context, line, offset) do
    parse__457(rest, acc, stack, context, line, offset)
  end

  defp parse__459(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__461(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__459(rest, acc, stack, context, line, offset) do
    parse__460(rest, acc, stack, context, line, offset)
  end

  defp parse__461(rest, acc, stack, context, line, offset) do
    parse__459(rest, acc, stack, context, line, offset)
  end

  defp parse__460(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__462(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__460(rest, acc, stack, context, line, offset) do
    parse__457(rest, acc, stack, context, line, offset)
  end

  defp parse__462(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__451(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__451(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__463(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__463(rest, acc, stack, context, line, offset) do
    parse__464(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__464(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__465(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__464(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__465(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__467(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__465(rest, acc, stack, context, line, offset) do
    parse__466(rest, acc, stack, context, line, offset)
  end

  defp parse__467(rest, acc, stack, context, line, offset) do
    parse__465(rest, acc, stack, context, line, offset)
  end

  defp parse__466(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__468(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__468(rest, acc, stack, context, line, offset) do
    parse__469(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__469(rest, acc, stack, context, line, offset) do
    parse__477(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__471(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__472(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__471(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__472(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__474(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__472(rest, acc, stack, context, line, offset) do
    parse__473(rest, acc, stack, context, line, offset)
  end

  defp parse__474(rest, acc, stack, context, line, offset) do
    parse__472(rest, acc, stack, context, line, offset)
  end

  defp parse__473(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__475(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__473(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__439(rest, acc, stack, context, line, offset)
  end

  defp parse__475(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__470(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__476(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__471(rest, [], stack, context, line, offset)
  end

  defp parse__477(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__478(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__477(rest, acc, stack, context, line, offset) do
    parse__476(rest, acc, stack, context, line, offset)
  end

  defp parse__478(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__480(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__478(rest, acc, stack, context, line, offset) do
    parse__479(rest, acc, stack, context, line, offset)
  end

  defp parse__480(rest, acc, stack, context, line, offset) do
    parse__478(rest, acc, stack, context, line, offset)
  end

  defp parse__479(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__481(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__479(rest, acc, stack, context, line, offset) do
    parse__476(rest, acc, stack, context, line, offset)
  end

  defp parse__481(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__470(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__470(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__482(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__482(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__483(rest, [public: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__483(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__441(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__484(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__442(rest, [], stack, context, line, offset)
  end

  defp parse__485(rest, acc, stack, context, line, offset) do
    parse__486(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__486(<<"SYSTEM", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__487(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__486(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__484(rest, acc, stack, context, line, offset)
  end

  defp parse__487(rest, acc, stack, context, line, offset) do
    parse__488(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__488(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__489(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__488(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__484(rest, acc, stack, context, line, offset)
  end

  defp parse__489(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__491(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__489(rest, acc, stack, context, line, offset) do
    parse__490(rest, acc, stack, context, line, offset)
  end

  defp parse__491(rest, acc, stack, context, line, offset) do
    parse__489(rest, acc, stack, context, line, offset)
  end

  defp parse__490(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__492(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__492(rest, acc, stack, context, line, offset) do
    parse__493(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__493(rest, acc, stack, context, line, offset) do
    parse__501(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__495(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__496(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__495(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__484(rest, acc, stack, context, line, offset)
  end

  defp parse__496(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__498(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__496(rest, acc, stack, context, line, offset) do
    parse__497(rest, acc, stack, context, line, offset)
  end

  defp parse__498(rest, acc, stack, context, line, offset) do
    parse__496(rest, acc, stack, context, line, offset)
  end

  defp parse__497(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__499(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__497(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__484(rest, acc, stack, context, line, offset)
  end

  defp parse__499(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__494(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__500(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__495(rest, [], stack, context, line, offset)
  end

  defp parse__501(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__502(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__501(rest, acc, stack, context, line, offset) do
    parse__500(rest, acc, stack, context, line, offset)
  end

  defp parse__502(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__504(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__502(rest, acc, stack, context, line, offset) do
    parse__503(rest, acc, stack, context, line, offset)
  end

  defp parse__504(rest, acc, stack, context, line, offset) do
    parse__502(rest, acc, stack, context, line, offset)
  end

  defp parse__503(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__505(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__503(rest, acc, stack, context, line, offset) do
    parse__500(rest, acc, stack, context, line, offset)
  end

  defp parse__505(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__494(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__494(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__506(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__506(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__507(rest, [system: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__507(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__441(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__441(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__415(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__415(rest, acc, stack, context, line, offset) do
    parse__508(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__508(rest, acc, stack, context, line, offset) do
    parse__512(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__510(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__509(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__511(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__510(rest, [], stack, context, line, offset)
  end

  defp parse__512(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__513(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__512(rest, acc, stack, context, line, offset) do
    parse__511(rest, acc, stack, context, line, offset)
  end

  defp parse__513(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__515(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__513(rest, acc, stack, context, line, offset) do
    parse__514(rest, acc, stack, context, line, offset)
  end

  defp parse__515(rest, acc, stack, context, line, offset) do
    parse__513(rest, acc, stack, context, line, offset)
  end

  defp parse__514(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__509(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__509(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__516(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__516(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__517(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__516(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__394(rest, acc, stack, context, line, offset)
  end

  defp parse__517(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__518(
      rest,
      [notation_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__518(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__519(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__395(rest, [], stack, context, line, offset)
  end

  defp parse__520(rest, acc, stack, context, line, offset) do
    parse__755(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__522(rest, acc, stack, context, line, offset) do
    parse__523(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__523(<<"<!ENTITY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__524(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__523(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__524(rest, acc, stack, context, line, offset) do
    parse__525(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__525(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__526(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__525(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__526(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__528(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__526(rest, acc, stack, context, line, offset) do
    parse__527(rest, acc, stack, context, line, offset)
  end

  defp parse__528(rest, acc, stack, context, line, offset) do
    parse__526(rest, acc, stack, context, line, offset)
  end

  defp parse__527(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__529(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__529(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__530(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__529(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__530(rest, acc, stack, context, line, offset) do
    parse__531(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__531(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__532(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__531(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__532(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__534(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__532(rest, acc, stack, context, line, offset) do
    parse__533(rest, acc, stack, context, line, offset)
  end

  defp parse__534(rest, acc, stack, context, line, offset) do
    parse__532(rest, acc, stack, context, line, offset)
  end

  defp parse__533(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__535(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__535(rest, acc, stack, context, line, offset) do
    parse__536(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__536(rest, acc, stack, context, line, offset) do
    parse__537(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__537(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__538(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__537(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__538(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__540(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__538(rest, acc, stack, context, line, offset) do
    parse__539(rest, acc, stack, context, line, offset)
  end

  defp parse__540(rest, acc, stack, context, line, offset) do
    parse__538(rest, acc, stack, context, line, offset)
  end

  defp parse__539(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__541(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__541(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__542(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__542(rest, acc, stack, context, line, offset) do
    parse__543(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__543(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__544(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__543(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__544(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__546(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__544(rest, acc, stack, context, line, offset) do
    parse__545(rest, acc, stack, context, line, offset)
  end

  defp parse__546(rest, acc, stack, context, line, offset) do
    parse__544(rest, acc, stack, context, line, offset)
  end

  defp parse__545(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__547(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__547(rest, acc, stack, context, line, offset) do
    parse__548(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__548(rest, acc, stack, context, line, offset) do
    parse__619(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__550(rest, acc, stack, context, line, offset) do
    parse__595(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__552(rest, acc, stack, context, line, offset) do
    parse__553(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__553(<<"PUBLIC", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__554(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__553(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__554(rest, acc, stack, context, line, offset) do
    parse__555(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__555(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__556(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__555(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__556(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__558(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__556(rest, acc, stack, context, line, offset) do
    parse__557(rest, acc, stack, context, line, offset)
  end

  defp parse__558(rest, acc, stack, context, line, offset) do
    parse__556(rest, acc, stack, context, line, offset)
  end

  defp parse__557(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__559(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__559(rest, acc, stack, context, line, offset) do
    parse__560(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__560(rest, acc, stack, context, line, offset) do
    parse__568(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__562(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__563(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__562(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__563(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__565(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__563(rest, acc, stack, context, line, offset) do
    parse__564(rest, acc, stack, context, line, offset)
  end

  defp parse__565(rest, acc, stack, context, line, offset) do
    parse__563(rest, acc, stack, context, line, offset)
  end

  defp parse__564(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__566(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__564(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__566(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__561(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__567(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__562(rest, [], stack, context, line, offset)
  end

  defp parse__568(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__569(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__568(rest, acc, stack, context, line, offset) do
    parse__567(rest, acc, stack, context, line, offset)
  end

  defp parse__569(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__571(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__569(rest, acc, stack, context, line, offset) do
    parse__570(rest, acc, stack, context, line, offset)
  end

  defp parse__571(rest, acc, stack, context, line, offset) do
    parse__569(rest, acc, stack, context, line, offset)
  end

  defp parse__570(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__572(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__570(rest, acc, stack, context, line, offset) do
    parse__567(rest, acc, stack, context, line, offset)
  end

  defp parse__572(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__561(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__561(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__573(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__573(rest, acc, stack, context, line, offset) do
    parse__574(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__574(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__575(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__574(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__575(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__577(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__575(rest, acc, stack, context, line, offset) do
    parse__576(rest, acc, stack, context, line, offset)
  end

  defp parse__577(rest, acc, stack, context, line, offset) do
    parse__575(rest, acc, stack, context, line, offset)
  end

  defp parse__576(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__578(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__578(rest, acc, stack, context, line, offset) do
    parse__579(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__579(rest, acc, stack, context, line, offset) do
    parse__587(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__581(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__582(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__581(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__582(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__584(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__582(rest, acc, stack, context, line, offset) do
    parse__583(rest, acc, stack, context, line, offset)
  end

  defp parse__584(rest, acc, stack, context, line, offset) do
    parse__582(rest, acc, stack, context, line, offset)
  end

  defp parse__583(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__585(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__583(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__585(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__580(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__586(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__581(rest, [], stack, context, line, offset)
  end

  defp parse__587(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__588(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__587(rest, acc, stack, context, line, offset) do
    parse__586(rest, acc, stack, context, line, offset)
  end

  defp parse__588(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__590(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__588(rest, acc, stack, context, line, offset) do
    parse__589(rest, acc, stack, context, line, offset)
  end

  defp parse__590(rest, acc, stack, context, line, offset) do
    parse__588(rest, acc, stack, context, line, offset)
  end

  defp parse__589(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__591(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__589(rest, acc, stack, context, line, offset) do
    parse__586(rest, acc, stack, context, line, offset)
  end

  defp parse__591(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__580(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__580(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__592(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__592(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__593(rest, [public: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__593(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__551(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__594(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__552(rest, [], stack, context, line, offset)
  end

  defp parse__595(rest, acc, stack, context, line, offset) do
    parse__596(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__596(<<"SYSTEM", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__597(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__596(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__594(rest, acc, stack, context, line, offset)
  end

  defp parse__597(rest, acc, stack, context, line, offset) do
    parse__598(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__598(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__599(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__598(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__594(rest, acc, stack, context, line, offset)
  end

  defp parse__599(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__601(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__599(rest, acc, stack, context, line, offset) do
    parse__600(rest, acc, stack, context, line, offset)
  end

  defp parse__601(rest, acc, stack, context, line, offset) do
    parse__599(rest, acc, stack, context, line, offset)
  end

  defp parse__600(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__602(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__602(rest, acc, stack, context, line, offset) do
    parse__603(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__603(rest, acc, stack, context, line, offset) do
    parse__611(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__605(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__606(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__605(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__594(rest, acc, stack, context, line, offset)
  end

  defp parse__606(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__608(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__606(rest, acc, stack, context, line, offset) do
    parse__607(rest, acc, stack, context, line, offset)
  end

  defp parse__608(rest, acc, stack, context, line, offset) do
    parse__606(rest, acc, stack, context, line, offset)
  end

  defp parse__607(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__609(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__607(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__594(rest, acc, stack, context, line, offset)
  end

  defp parse__609(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__604(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__610(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__605(rest, [], stack, context, line, offset)
  end

  defp parse__611(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__612(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__611(rest, acc, stack, context, line, offset) do
    parse__610(rest, acc, stack, context, line, offset)
  end

  defp parse__612(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__614(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__612(rest, acc, stack, context, line, offset) do
    parse__613(rest, acc, stack, context, line, offset)
  end

  defp parse__614(rest, acc, stack, context, line, offset) do
    parse__612(rest, acc, stack, context, line, offset)
  end

  defp parse__613(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__615(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__613(rest, acc, stack, context, line, offset) do
    parse__610(rest, acc, stack, context, line, offset)
  end

  defp parse__615(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__604(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__604(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__616(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__616(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__617(rest, [system: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__617(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__551(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__551(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__549(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__618(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__550(rest, [], stack, context, line, offset)
  end

  defp parse__619(rest, acc, stack, context, line, offset) do
    parse__620(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__620(rest, acc, stack, context, line, offset) do
    parse__621(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__621(rest, acc, stack, context, line, offset) do
    parse__682(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__623(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__624(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__623(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__618(rest, acc, stack, context, line, offset)
  end

  defp parse__624(rest, acc, stack, context, line, offset) do
    parse__626(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__626(rest, acc, stack, context, line, offset) do
    parse__677(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__628(rest, acc, stack, context, line, offset) do
    parse__651(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__630(rest, acc, stack, context, line, offset) do
    parse__631(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__631(rest, acc, stack, context, line, offset) do
    parse__640(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__633(rest, acc, stack, context, line, offset) do
    parse__634(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__634(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__635(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__634(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__625(rest, acc, stack, context, line, offset)
  end

  defp parse__635(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__637(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__635(rest, acc, stack, context, line, offset) do
    parse__636(rest, acc, stack, context, line, offset)
  end

  defp parse__637(rest, acc, stack, context, line, offset) do
    parse__635(rest, acc, stack, context, line, offset)
  end

  defp parse__636(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__638(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__638(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__632(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__639(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__633(rest, [], stack, context, line, offset)
  end

  defp parse__640(rest, acc, stack, context, line, offset) do
    parse__641(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__641(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__642(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__641(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__639(rest, acc, stack, context, line, offset)
  end

  defp parse__642(rest, acc, stack, context, line, offset) do
    parse__643(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__643(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__644(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__643(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__639(rest, acc, stack, context, line, offset)
  end

  defp parse__644(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__646(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__644(rest, acc, stack, context, line, offset) do
    parse__645(rest, acc, stack, context, line, offset)
  end

  defp parse__646(rest, acc, stack, context, line, offset) do
    parse__644(rest, acc, stack, context, line, offset)
  end

  defp parse__645(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__647(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__647(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__648(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__648(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__632(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__632(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__649(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__649(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__629(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__650(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__630(rest, [], stack, context, line, offset)
  end

  defp parse__651(rest, acc, stack, context, line, offset) do
    parse__652(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__652(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__653(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__652(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__650(rest, acc, stack, context, line, offset)
  end

  defp parse__653(rest, acc, stack, context, line, offset) do
    parse__654(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__654(rest, acc, stack, context, line, offset) do
    parse__655(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__655(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__656(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__655(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__650(rest, acc, stack, context, line, offset)
  end

  defp parse__656(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__658(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__656(rest, acc, stack, context, line, offset) do
    parse__657(rest, acc, stack, context, line, offset)
  end

  defp parse__658(rest, acc, stack, context, line, offset) do
    parse__656(rest, acc, stack, context, line, offset)
  end

  defp parse__657(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__659(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__659(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__660(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__660(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__661(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__660(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__650(rest, acc, stack, context, line, offset)
  end

  defp parse__661(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__662(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__662(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__629(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__629(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__627(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__663(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__628(rest, [], stack, context, line, offset)
  end

  defp parse__664(rest, acc, stack, context, line, offset) do
    parse__665(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__665(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__666(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__665(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__663(rest, acc, stack, context, line, offset)
  end

  defp parse__666(rest, acc, stack, context, line, offset) do
    parse__667(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__667(rest, acc, stack, context, line, offset) do
    parse__668(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__668(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__669(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__668(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__663(rest, acc, stack, context, line, offset)
  end

  defp parse__669(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__671(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__669(rest, acc, stack, context, line, offset) do
    parse__670(rest, acc, stack, context, line, offset)
  end

  defp parse__671(rest, acc, stack, context, line, offset) do
    parse__669(rest, acc, stack, context, line, offset)
  end

  defp parse__670(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__672(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__672(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__673(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__673(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__674(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__673(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__663(rest, acc, stack, context, line, offset)
  end

  defp parse__674(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__675(rest, [PEReference: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__675(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__627(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__676(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__664(rest, [], stack, context, line, offset)
  end

  defp parse__677(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 37 and x0 !== 38 and x0 !== 39 do
    parse__678(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__677(rest, acc, stack, context, line, offset) do
    parse__676(rest, acc, stack, context, line, offset)
  end

  defp parse__678(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__627(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__625(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__679(rest, acc, stack, context, line, offset)
  end

  defp parse__627(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__626(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__679(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__680(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__679(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__618(rest, acc, stack, context, line, offset)
  end

  defp parse__680(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__622(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__681(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__623(rest, [], stack, context, line, offset)
  end

  defp parse__682(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__683(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__682(rest, acc, stack, context, line, offset) do
    parse__681(rest, acc, stack, context, line, offset)
  end

  defp parse__683(rest, acc, stack, context, line, offset) do
    parse__685(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__685(rest, acc, stack, context, line, offset) do
    parse__736(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__687(rest, acc, stack, context, line, offset) do
    parse__710(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__689(rest, acc, stack, context, line, offset) do
    parse__690(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__690(rest, acc, stack, context, line, offset) do
    parse__699(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__692(rest, acc, stack, context, line, offset) do
    parse__693(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__693(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__694(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__693(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__684(rest, acc, stack, context, line, offset)
  end

  defp parse__694(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__696(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__694(rest, acc, stack, context, line, offset) do
    parse__695(rest, acc, stack, context, line, offset)
  end

  defp parse__696(rest, acc, stack, context, line, offset) do
    parse__694(rest, acc, stack, context, line, offset)
  end

  defp parse__695(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__697(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__697(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__691(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__698(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__692(rest, [], stack, context, line, offset)
  end

  defp parse__699(rest, acc, stack, context, line, offset) do
    parse__700(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__700(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__701(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__700(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__698(rest, acc, stack, context, line, offset)
  end

  defp parse__701(rest, acc, stack, context, line, offset) do
    parse__702(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__702(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__703(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__702(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__698(rest, acc, stack, context, line, offset)
  end

  defp parse__703(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__705(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__703(rest, acc, stack, context, line, offset) do
    parse__704(rest, acc, stack, context, line, offset)
  end

  defp parse__705(rest, acc, stack, context, line, offset) do
    parse__703(rest, acc, stack, context, line, offset)
  end

  defp parse__704(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__706(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__706(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__707(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__707(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__691(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__691(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__708(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__708(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__688(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__709(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__689(rest, [], stack, context, line, offset)
  end

  defp parse__710(rest, acc, stack, context, line, offset) do
    parse__711(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__711(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__712(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__711(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__709(rest, acc, stack, context, line, offset)
  end

  defp parse__712(rest, acc, stack, context, line, offset) do
    parse__713(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__713(rest, acc, stack, context, line, offset) do
    parse__714(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__714(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__715(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__714(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__709(rest, acc, stack, context, line, offset)
  end

  defp parse__715(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__717(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__715(rest, acc, stack, context, line, offset) do
    parse__716(rest, acc, stack, context, line, offset)
  end

  defp parse__717(rest, acc, stack, context, line, offset) do
    parse__715(rest, acc, stack, context, line, offset)
  end

  defp parse__716(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__718(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__718(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__719(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__719(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__720(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__719(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__709(rest, acc, stack, context, line, offset)
  end

  defp parse__720(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__721(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__721(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__688(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__688(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__686(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__722(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__687(rest, [], stack, context, line, offset)
  end

  defp parse__723(rest, acc, stack, context, line, offset) do
    parse__724(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__724(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__725(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__724(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__722(rest, acc, stack, context, line, offset)
  end

  defp parse__725(rest, acc, stack, context, line, offset) do
    parse__726(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__726(rest, acc, stack, context, line, offset) do
    parse__727(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__727(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__728(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__727(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__722(rest, acc, stack, context, line, offset)
  end

  defp parse__728(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__730(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__728(rest, acc, stack, context, line, offset) do
    parse__729(rest, acc, stack, context, line, offset)
  end

  defp parse__730(rest, acc, stack, context, line, offset) do
    parse__728(rest, acc, stack, context, line, offset)
  end

  defp parse__729(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__731(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__731(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__732(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__732(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__733(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__732(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__722(rest, acc, stack, context, line, offset)
  end

  defp parse__733(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__734(rest, [PEReference: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__734(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__686(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__735(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__723(rest, [], stack, context, line, offset)
  end

  defp parse__736(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 37 and x0 !== 38 and x0 !== 34 do
    parse__737(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__736(rest, acc, stack, context, line, offset) do
    parse__735(rest, acc, stack, context, line, offset)
  end

  defp parse__737(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__686(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__684(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__738(rest, acc, stack, context, line, offset)
  end

  defp parse__686(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__685(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__738(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__739(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__738(rest, acc, stack, context, line, offset) do
    parse__681(rest, acc, stack, context, line, offset)
  end

  defp parse__739(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__622(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__622(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__740(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__740(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__741(
      rest,
      [
        entity_value:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__741(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__549(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__549(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__742(rest, [PEDef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__742(rest, acc, stack, context, line, offset) do
    parse__743(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__743(rest, acc, stack, context, line, offset) do
    parse__747(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__745(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__744(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__746(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__745(rest, [], stack, context, line, offset)
  end

  defp parse__747(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__748(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__747(rest, acc, stack, context, line, offset) do
    parse__746(rest, acc, stack, context, line, offset)
  end

  defp parse__748(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__750(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__748(rest, acc, stack, context, line, offset) do
    parse__749(rest, acc, stack, context, line, offset)
  end

  defp parse__750(rest, acc, stack, context, line, offset) do
    parse__748(rest, acc, stack, context, line, offset)
  end

  defp parse__749(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__744(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__744(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__751(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__751(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__752(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__751(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__519(rest, acc, stack, context, line, offset)
  end

  defp parse__752(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__753(
      rest,
      [parameter_entity_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__753(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__521(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__754(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__522(rest, [], stack, context, line, offset)
  end

  defp parse__755(rest, acc, stack, context, line, offset) do
    parse__756(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__756(<<"<!ENTITY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__757(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__756(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__757(rest, acc, stack, context, line, offset) do
    parse__758(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__758(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__759(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__758(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__759(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__761(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__759(rest, acc, stack, context, line, offset) do
    parse__760(rest, acc, stack, context, line, offset)
  end

  defp parse__761(rest, acc, stack, context, line, offset) do
    parse__759(rest, acc, stack, context, line, offset)
  end

  defp parse__760(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__762(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__762(rest, acc, stack, context, line, offset) do
    parse__763(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__763(rest, acc, stack, context, line, offset) do
    parse__764(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__764(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__765(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__764(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__765(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__767(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__765(rest, acc, stack, context, line, offset) do
    parse__766(rest, acc, stack, context, line, offset)
  end

  defp parse__767(rest, acc, stack, context, line, offset) do
    parse__765(rest, acc, stack, context, line, offset)
  end

  defp parse__766(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__768(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__768(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__769(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__769(rest, acc, stack, context, line, offset) do
    parse__770(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__770(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__771(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__770(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__771(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__773(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__771(rest, acc, stack, context, line, offset) do
    parse__772(rest, acc, stack, context, line, offset)
  end

  defp parse__773(rest, acc, stack, context, line, offset) do
    parse__771(rest, acc, stack, context, line, offset)
  end

  defp parse__772(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__774(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__774(rest, acc, stack, context, line, offset) do
    parse__869(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__776(rest, acc, stack, context, line, offset) do
    parse__821(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__778(rest, acc, stack, context, line, offset) do
    parse__779(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__779(<<"PUBLIC", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__780(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__779(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__780(rest, acc, stack, context, line, offset) do
    parse__781(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__781(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__782(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__781(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__782(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__784(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__782(rest, acc, stack, context, line, offset) do
    parse__783(rest, acc, stack, context, line, offset)
  end

  defp parse__784(rest, acc, stack, context, line, offset) do
    parse__782(rest, acc, stack, context, line, offset)
  end

  defp parse__783(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__785(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__785(rest, acc, stack, context, line, offset) do
    parse__786(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__786(rest, acc, stack, context, line, offset) do
    parse__794(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__788(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__789(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__788(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__789(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__791(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__789(rest, acc, stack, context, line, offset) do
    parse__790(rest, acc, stack, context, line, offset)
  end

  defp parse__791(rest, acc, stack, context, line, offset) do
    parse__789(rest, acc, stack, context, line, offset)
  end

  defp parse__790(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__792(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__790(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__792(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__787(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__793(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__788(rest, [], stack, context, line, offset)
  end

  defp parse__794(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__795(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__794(rest, acc, stack, context, line, offset) do
    parse__793(rest, acc, stack, context, line, offset)
  end

  defp parse__795(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    parse__797(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__795(rest, acc, stack, context, line, offset) do
    parse__796(rest, acc, stack, context, line, offset)
  end

  defp parse__797(rest, acc, stack, context, line, offset) do
    parse__795(rest, acc, stack, context, line, offset)
  end

  defp parse__796(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__798(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__796(rest, acc, stack, context, line, offset) do
    parse__793(rest, acc, stack, context, line, offset)
  end

  defp parse__798(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__787(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__787(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__799(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__799(rest, acc, stack, context, line, offset) do
    parse__800(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__800(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__801(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__800(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__801(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__803(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__801(rest, acc, stack, context, line, offset) do
    parse__802(rest, acc, stack, context, line, offset)
  end

  defp parse__803(rest, acc, stack, context, line, offset) do
    parse__801(rest, acc, stack, context, line, offset)
  end

  defp parse__802(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__804(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__804(rest, acc, stack, context, line, offset) do
    parse__805(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__805(rest, acc, stack, context, line, offset) do
    parse__813(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__807(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__808(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__807(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__808(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__810(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__808(rest, acc, stack, context, line, offset) do
    parse__809(rest, acc, stack, context, line, offset)
  end

  defp parse__810(rest, acc, stack, context, line, offset) do
    parse__808(rest, acc, stack, context, line, offset)
  end

  defp parse__809(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__811(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__809(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__811(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__806(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__812(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__807(rest, [], stack, context, line, offset)
  end

  defp parse__813(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__814(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__813(rest, acc, stack, context, line, offset) do
    parse__812(rest, acc, stack, context, line, offset)
  end

  defp parse__814(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__816(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__814(rest, acc, stack, context, line, offset) do
    parse__815(rest, acc, stack, context, line, offset)
  end

  defp parse__816(rest, acc, stack, context, line, offset) do
    parse__814(rest, acc, stack, context, line, offset)
  end

  defp parse__815(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__817(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__815(rest, acc, stack, context, line, offset) do
    parse__812(rest, acc, stack, context, line, offset)
  end

  defp parse__817(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__806(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__806(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__818(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__818(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__819(rest, [public: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__819(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__777(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__820(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__778(rest, [], stack, context, line, offset)
  end

  defp parse__821(rest, acc, stack, context, line, offset) do
    parse__822(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__822(<<"SYSTEM", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__823(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__822(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__820(rest, acc, stack, context, line, offset)
  end

  defp parse__823(rest, acc, stack, context, line, offset) do
    parse__824(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__824(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__825(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__824(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__820(rest, acc, stack, context, line, offset)
  end

  defp parse__825(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__827(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__825(rest, acc, stack, context, line, offset) do
    parse__826(rest, acc, stack, context, line, offset)
  end

  defp parse__827(rest, acc, stack, context, line, offset) do
    parse__825(rest, acc, stack, context, line, offset)
  end

  defp parse__826(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__828(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__828(rest, acc, stack, context, line, offset) do
    parse__829(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__829(rest, acc, stack, context, line, offset) do
    parse__837(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__831(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__832(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__831(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__820(rest, acc, stack, context, line, offset)
  end

  defp parse__832(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 39 do
    parse__834(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__832(rest, acc, stack, context, line, offset) do
    parse__833(rest, acc, stack, context, line, offset)
  end

  defp parse__834(rest, acc, stack, context, line, offset) do
    parse__832(rest, acc, stack, context, line, offset)
  end

  defp parse__833(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__835(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__833(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__820(rest, acc, stack, context, line, offset)
  end

  defp parse__835(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__830(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__836(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__831(rest, [], stack, context, line, offset)
  end

  defp parse__837(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__838(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__837(rest, acc, stack, context, line, offset) do
    parse__836(rest, acc, stack, context, line, offset)
  end

  defp parse__838(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 34 do
    parse__840(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__838(rest, acc, stack, context, line, offset) do
    parse__839(rest, acc, stack, context, line, offset)
  end

  defp parse__840(rest, acc, stack, context, line, offset) do
    parse__838(rest, acc, stack, context, line, offset)
  end

  defp parse__839(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__841(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__839(rest, acc, stack, context, line, offset) do
    parse__836(rest, acc, stack, context, line, offset)
  end

  defp parse__841(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__830(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__830(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__842(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__842(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__843(rest, [system: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__843(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__777(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__777(rest, acc, stack, context, line, offset) do
    parse__847(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__845(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__844(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__846(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__845(rest, [], stack, context, line, offset)
  end

  defp parse__847(rest, acc, stack, context, line, offset) do
    parse__848(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__848(rest, acc, stack, context, line, offset) do
    parse__849(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__849(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__850(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__849(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__846(rest, acc, stack, context, line, offset)
  end

  defp parse__850(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__852(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__850(rest, acc, stack, context, line, offset) do
    parse__851(rest, acc, stack, context, line, offset)
  end

  defp parse__852(rest, acc, stack, context, line, offset) do
    parse__850(rest, acc, stack, context, line, offset)
  end

  defp parse__851(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__853(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__853(<<"NDATA", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__854(rest, [] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp parse__853(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__846(rest, acc, stack, context, line, offset)
  end

  defp parse__854(rest, acc, stack, context, line, offset) do
    parse__855(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__855(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__856(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__855(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__846(rest, acc, stack, context, line, offset)
  end

  defp parse__856(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__858(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__856(rest, acc, stack, context, line, offset) do
    parse__857(rest, acc, stack, context, line, offset)
  end

  defp parse__858(rest, acc, stack, context, line, offset) do
    parse__856(rest, acc, stack, context, line, offset)
  end

  defp parse__857(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__859(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__859(rest, acc, stack, context, line, offset) do
    parse__860(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__860(rest, acc, stack, context, line, offset) do
    parse__861(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__861(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__862(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__861(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__846(rest, acc, stack, context, line, offset)
  end

  defp parse__862(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__864(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__862(rest, acc, stack, context, line, offset) do
    parse__863(rest, acc, stack, context, line, offset)
  end

  defp parse__864(rest, acc, stack, context, line, offset) do
    parse__862(rest, acc, stack, context, line, offset)
  end

  defp parse__863(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__865(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__865(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__866(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__866(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__867(rest, [NDataDecl: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__867(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__844(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__844(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__775(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__868(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__776(rest, [], stack, context, line, offset)
  end

  defp parse__869(rest, acc, stack, context, line, offset) do
    parse__870(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__870(rest, acc, stack, context, line, offset) do
    parse__871(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__871(rest, acc, stack, context, line, offset) do
    parse__932(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__873(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__874(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__873(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__868(rest, acc, stack, context, line, offset)
  end

  defp parse__874(rest, acc, stack, context, line, offset) do
    parse__876(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__876(rest, acc, stack, context, line, offset) do
    parse__927(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__878(rest, acc, stack, context, line, offset) do
    parse__901(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__880(rest, acc, stack, context, line, offset) do
    parse__881(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__881(rest, acc, stack, context, line, offset) do
    parse__890(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__883(rest, acc, stack, context, line, offset) do
    parse__884(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__884(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__885(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__884(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__875(rest, acc, stack, context, line, offset)
  end

  defp parse__885(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__887(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__885(rest, acc, stack, context, line, offset) do
    parse__886(rest, acc, stack, context, line, offset)
  end

  defp parse__887(rest, acc, stack, context, line, offset) do
    parse__885(rest, acc, stack, context, line, offset)
  end

  defp parse__886(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__888(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__888(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__882(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__889(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__883(rest, [], stack, context, line, offset)
  end

  defp parse__890(rest, acc, stack, context, line, offset) do
    parse__891(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__891(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__892(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__891(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__889(rest, acc, stack, context, line, offset)
  end

  defp parse__892(rest, acc, stack, context, line, offset) do
    parse__893(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__893(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__894(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__893(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__889(rest, acc, stack, context, line, offset)
  end

  defp parse__894(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__896(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__894(rest, acc, stack, context, line, offset) do
    parse__895(rest, acc, stack, context, line, offset)
  end

  defp parse__896(rest, acc, stack, context, line, offset) do
    parse__894(rest, acc, stack, context, line, offset)
  end

  defp parse__895(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__897(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__897(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__898(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__898(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__882(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__882(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__899(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__899(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__879(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__900(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__880(rest, [], stack, context, line, offset)
  end

  defp parse__901(rest, acc, stack, context, line, offset) do
    parse__902(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__902(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__903(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__902(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__900(rest, acc, stack, context, line, offset)
  end

  defp parse__903(rest, acc, stack, context, line, offset) do
    parse__904(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__904(rest, acc, stack, context, line, offset) do
    parse__905(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__905(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__906(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__905(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__900(rest, acc, stack, context, line, offset)
  end

  defp parse__906(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__908(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__906(rest, acc, stack, context, line, offset) do
    parse__907(rest, acc, stack, context, line, offset)
  end

  defp parse__908(rest, acc, stack, context, line, offset) do
    parse__906(rest, acc, stack, context, line, offset)
  end

  defp parse__907(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__909(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__909(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__910(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__910(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__911(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__910(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__900(rest, acc, stack, context, line, offset)
  end

  defp parse__911(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__912(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__912(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__879(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__879(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__877(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__913(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__878(rest, [], stack, context, line, offset)
  end

  defp parse__914(rest, acc, stack, context, line, offset) do
    parse__915(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__915(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__916(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__915(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__913(rest, acc, stack, context, line, offset)
  end

  defp parse__916(rest, acc, stack, context, line, offset) do
    parse__917(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__917(rest, acc, stack, context, line, offset) do
    parse__918(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__918(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__919(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__918(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__913(rest, acc, stack, context, line, offset)
  end

  defp parse__919(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__921(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__919(rest, acc, stack, context, line, offset) do
    parse__920(rest, acc, stack, context, line, offset)
  end

  defp parse__921(rest, acc, stack, context, line, offset) do
    parse__919(rest, acc, stack, context, line, offset)
  end

  defp parse__920(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__922(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__922(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__923(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__923(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__924(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__923(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__913(rest, acc, stack, context, line, offset)
  end

  defp parse__924(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__925(rest, [PEReference: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__925(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__877(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__926(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__914(rest, [], stack, context, line, offset)
  end

  defp parse__927(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 37 and x0 !== 38 and x0 !== 39 do
    parse__928(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__927(rest, acc, stack, context, line, offset) do
    parse__926(rest, acc, stack, context, line, offset)
  end

  defp parse__928(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__877(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__875(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__929(rest, acc, stack, context, line, offset)
  end

  defp parse__877(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__876(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__929(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__930(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__929(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__868(rest, acc, stack, context, line, offset)
  end

  defp parse__930(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__872(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__931(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__873(rest, [], stack, context, line, offset)
  end

  defp parse__932(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__933(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__932(rest, acc, stack, context, line, offset) do
    parse__931(rest, acc, stack, context, line, offset)
  end

  defp parse__933(rest, acc, stack, context, line, offset) do
    parse__935(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__935(rest, acc, stack, context, line, offset) do
    parse__986(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__937(rest, acc, stack, context, line, offset) do
    parse__960(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__939(rest, acc, stack, context, line, offset) do
    parse__940(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__940(rest, acc, stack, context, line, offset) do
    parse__949(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__942(rest, acc, stack, context, line, offset) do
    parse__943(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__943(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__944(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__943(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__934(rest, acc, stack, context, line, offset)
  end

  defp parse__944(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__946(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__944(rest, acc, stack, context, line, offset) do
    parse__945(rest, acc, stack, context, line, offset)
  end

  defp parse__946(rest, acc, stack, context, line, offset) do
    parse__944(rest, acc, stack, context, line, offset)
  end

  defp parse__945(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__947(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__947(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__941(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__948(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__942(rest, [], stack, context, line, offset)
  end

  defp parse__949(rest, acc, stack, context, line, offset) do
    parse__950(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__950(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__951(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__950(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__948(rest, acc, stack, context, line, offset)
  end

  defp parse__951(rest, acc, stack, context, line, offset) do
    parse__952(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__952(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__953(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__952(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__948(rest, acc, stack, context, line, offset)
  end

  defp parse__953(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__955(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__953(rest, acc, stack, context, line, offset) do
    parse__954(rest, acc, stack, context, line, offset)
  end

  defp parse__955(rest, acc, stack, context, line, offset) do
    parse__953(rest, acc, stack, context, line, offset)
  end

  defp parse__954(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__956(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__956(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__957(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__957(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__941(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__941(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__958(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__958(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__938(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__959(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__939(rest, [], stack, context, line, offset)
  end

  defp parse__960(rest, acc, stack, context, line, offset) do
    parse__961(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__961(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__962(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__961(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__959(rest, acc, stack, context, line, offset)
  end

  defp parse__962(rest, acc, stack, context, line, offset) do
    parse__963(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__963(rest, acc, stack, context, line, offset) do
    parse__964(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__964(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__965(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__964(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__959(rest, acc, stack, context, line, offset)
  end

  defp parse__965(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__967(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__965(rest, acc, stack, context, line, offset) do
    parse__966(rest, acc, stack, context, line, offset)
  end

  defp parse__967(rest, acc, stack, context, line, offset) do
    parse__965(rest, acc, stack, context, line, offset)
  end

  defp parse__966(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__968(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__968(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__969(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__969(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__970(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__969(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__959(rest, acc, stack, context, line, offset)
  end

  defp parse__970(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__971(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__971(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__938(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__938(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__936(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__972(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__937(rest, [], stack, context, line, offset)
  end

  defp parse__973(rest, acc, stack, context, line, offset) do
    parse__974(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__974(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__975(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__974(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__972(rest, acc, stack, context, line, offset)
  end

  defp parse__975(rest, acc, stack, context, line, offset) do
    parse__976(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__976(rest, acc, stack, context, line, offset) do
    parse__977(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__977(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__978(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__977(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__972(rest, acc, stack, context, line, offset)
  end

  defp parse__978(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__980(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__978(rest, acc, stack, context, line, offset) do
    parse__979(rest, acc, stack, context, line, offset)
  end

  defp parse__980(rest, acc, stack, context, line, offset) do
    parse__978(rest, acc, stack, context, line, offset)
  end

  defp parse__979(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__981(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__981(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__982(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__982(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__983(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__982(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__972(rest, acc, stack, context, line, offset)
  end

  defp parse__983(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__984(rest, [PEReference: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__984(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__936(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__985(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__973(rest, [], stack, context, line, offset)
  end

  defp parse__986(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 37 and x0 !== 38 and x0 !== 34 do
    parse__987(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__986(rest, acc, stack, context, line, offset) do
    parse__985(rest, acc, stack, context, line, offset)
  end

  defp parse__987(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__936(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__934(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__988(rest, acc, stack, context, line, offset)
  end

  defp parse__936(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__935(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__988(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__989(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__988(rest, acc, stack, context, line, offset) do
    parse__931(rest, acc, stack, context, line, offset)
  end

  defp parse__989(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__872(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__872(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__990(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__990(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__991(
      rest,
      [
        entity_value:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__991(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__775(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__775(rest, acc, stack, context, line, offset) do
    parse__992(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__992(rest, acc, stack, context, line, offset) do
    parse__996(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__994(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__993(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__995(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__994(rest, [], stack, context, line, offset)
  end

  defp parse__996(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__997(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__996(rest, acc, stack, context, line, offset) do
    parse__995(rest, acc, stack, context, line, offset)
  end

  defp parse__997(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__999(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__997(rest, acc, stack, context, line, offset) do
    parse__998(rest, acc, stack, context, line, offset)
  end

  defp parse__999(rest, acc, stack, context, line, offset) do
    parse__997(rest, acc, stack, context, line, offset)
  end

  defp parse__998(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__993(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__993(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1000(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1000(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1001(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1000(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__754(rest, acc, stack, context, line, offset)
  end

  defp parse__1001(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1002(
      rest,
      [entity_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1002(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__521(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__521(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1003(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__520(rest, [], stack, context, line, offset)
  end

  defp parse__1004(rest, acc, stack, context, line, offset) do
    parse__1005(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1005(<<"<!ATTLIST", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1006(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp parse__1005(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1003(rest, acc, stack, context, line, offset)
  end

  defp parse__1006(rest, acc, stack, context, line, offset) do
    parse__1007(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1007(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1008(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1007(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1003(rest, acc, stack, context, line, offset)
  end

  defp parse__1008(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1010(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1008(rest, acc, stack, context, line, offset) do
    parse__1009(rest, acc, stack, context, line, offset)
  end

  defp parse__1010(rest, acc, stack, context, line, offset) do
    parse__1008(rest, acc, stack, context, line, offset)
  end

  defp parse__1009(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1011(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1011(rest, acc, stack, context, line, offset) do
    parse__1012(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1012(rest, acc, stack, context, line, offset) do
    parse__1013(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1013(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1014(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1013(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1003(rest, acc, stack, context, line, offset)
  end

  defp parse__1014(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1016(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1014(rest, acc, stack, context, line, offset) do
    parse__1015(rest, acc, stack, context, line, offset)
  end

  defp parse__1016(rest, acc, stack, context, line, offset) do
    parse__1014(rest, acc, stack, context, line, offset)
  end

  defp parse__1015(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1017(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1017(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1018(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1018(rest, acc, stack, context, line, offset) do
    parse__1020(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1020(rest, acc, stack, context, line, offset) do
    parse__1021(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1021(rest, acc, stack, context, line, offset) do
    parse__1022(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1022(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1023(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1022(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1023(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1025(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1023(rest, acc, stack, context, line, offset) do
    parse__1024(rest, acc, stack, context, line, offset)
  end

  defp parse__1025(rest, acc, stack, context, line, offset) do
    parse__1023(rest, acc, stack, context, line, offset)
  end

  defp parse__1024(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1026(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1026(rest, acc, stack, context, line, offset) do
    parse__1027(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1027(rest, acc, stack, context, line, offset) do
    parse__1028(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1028(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1029(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1028(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1029(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1031(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1029(rest, acc, stack, context, line, offset) do
    parse__1030(rest, acc, stack, context, line, offset)
  end

  defp parse__1031(rest, acc, stack, context, line, offset) do
    parse__1029(rest, acc, stack, context, line, offset)
  end

  defp parse__1030(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1032(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1032(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1033(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1033(rest, acc, stack, context, line, offset) do
    parse__1034(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1034(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1035(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1034(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1035(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1037(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1035(rest, acc, stack, context, line, offset) do
    parse__1036(rest, acc, stack, context, line, offset)
  end

  defp parse__1037(rest, acc, stack, context, line, offset) do
    parse__1035(rest, acc, stack, context, line, offset)
  end

  defp parse__1036(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1038(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1038(rest, acc, stack, context, line, offset) do
    parse__1039(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1039(rest, acc, stack, context, line, offset) do
    parse__1170(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1041(rest, acc, stack, context, line, offset) do
    parse__1103(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1043(rest, acc, stack, context, line, offset) do
    parse__1044(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1044(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1045(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1044(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1045(rest, acc, stack, context, line, offset) do
    parse__1046(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1046(rest, acc, stack, context, line, offset) do
    parse__1050(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1048(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1047(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1049(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1048(rest, [], stack, context, line, offset)
  end

  defp parse__1050(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1051(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1050(rest, acc, stack, context, line, offset) do
    parse__1049(rest, acc, stack, context, line, offset)
  end

  defp parse__1051(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1053(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1051(rest, acc, stack, context, line, offset) do
    parse__1052(rest, acc, stack, context, line, offset)
  end

  defp parse__1053(rest, acc, stack, context, line, offset) do
    parse__1051(rest, acc, stack, context, line, offset)
  end

  defp parse__1052(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1047(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1047(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1054(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1054(rest, acc, stack, context, line, offset) do
    parse__1055(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1055(rest, acc, stack, context, line, offset) do
    parse__1056(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1056(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1057(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1056(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1057(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1059(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1057(rest, acc, stack, context, line, offset) do
    parse__1058(rest, acc, stack, context, line, offset)
  end

  defp parse__1059(rest, acc, stack, context, line, offset) do
    parse__1057(rest, acc, stack, context, line, offset)
  end

  defp parse__1058(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1060(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1060(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1061(
      rest,
      [
        nmtoken:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1061(rest, acc, stack, context, line, offset) do
    parse__1063(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1063(rest, acc, stack, context, line, offset) do
    parse__1064(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1064(rest, acc, stack, context, line, offset) do
    parse__1068(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1066(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1065(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1067(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1066(rest, [], stack, context, line, offset)
  end

  defp parse__1068(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1069(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1068(rest, acc, stack, context, line, offset) do
    parse__1067(rest, acc, stack, context, line, offset)
  end

  defp parse__1069(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1071(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1069(rest, acc, stack, context, line, offset) do
    parse__1070(rest, acc, stack, context, line, offset)
  end

  defp parse__1071(rest, acc, stack, context, line, offset) do
    parse__1069(rest, acc, stack, context, line, offset)
  end

  defp parse__1070(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1065(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1065(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1072(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1072(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1073(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1072(rest, acc, stack, context, line, offset) do
    parse__1062(rest, acc, stack, context, line, offset)
  end

  defp parse__1073(rest, acc, stack, context, line, offset) do
    parse__1074(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1074(rest, acc, stack, context, line, offset) do
    parse__1078(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1076(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1075(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1077(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1076(rest, [], stack, context, line, offset)
  end

  defp parse__1078(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1079(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1078(rest, acc, stack, context, line, offset) do
    parse__1077(rest, acc, stack, context, line, offset)
  end

  defp parse__1079(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1081(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1079(rest, acc, stack, context, line, offset) do
    parse__1080(rest, acc, stack, context, line, offset)
  end

  defp parse__1081(rest, acc, stack, context, line, offset) do
    parse__1079(rest, acc, stack, context, line, offset)
  end

  defp parse__1080(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1075(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1075(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1082(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1082(rest, acc, stack, context, line, offset) do
    parse__1083(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1083(rest, acc, stack, context, line, offset) do
    parse__1084(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1084(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1085(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1084(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1062(rest, acc, stack, context, line, offset)
  end

  defp parse__1085(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1087(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1085(rest, acc, stack, context, line, offset) do
    parse__1086(rest, acc, stack, context, line, offset)
  end

  defp parse__1087(rest, acc, stack, context, line, offset) do
    parse__1085(rest, acc, stack, context, line, offset)
  end

  defp parse__1086(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1088(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1088(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1089(
      rest,
      [
        nmtoken:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1062(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1090(rest, acc, stack, context, line, offset)
  end

  defp parse__1089(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1063(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1090(rest, acc, stack, context, line, offset) do
    parse__1091(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1091(rest, acc, stack, context, line, offset) do
    parse__1095(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1093(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1094(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1093(rest, [], stack, context, line, offset)
  end

  defp parse__1095(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1096(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1095(rest, acc, stack, context, line, offset) do
    parse__1094(rest, acc, stack, context, line, offset)
  end

  defp parse__1096(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1098(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1096(rest, acc, stack, context, line, offset) do
    parse__1097(rest, acc, stack, context, line, offset)
  end

  defp parse__1098(rest, acc, stack, context, line, offset) do
    parse__1096(rest, acc, stack, context, line, offset)
  end

  defp parse__1097(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1092(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1099(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1099(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1100(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1099(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1100(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1101(
      rest,
      [enumeration: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1101(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1042(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1102(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1043(rest, [], stack, context, line, offset)
  end

  defp parse__1103(rest, acc, stack, context, line, offset) do
    parse__1104(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1104(<<"NOTATION", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1105(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__1104(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1102(rest, acc, stack, context, line, offset)
  end

  defp parse__1105(rest, acc, stack, context, line, offset) do
    parse__1106(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1106(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1107(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1106(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1102(rest, acc, stack, context, line, offset)
  end

  defp parse__1107(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1109(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1107(rest, acc, stack, context, line, offset) do
    parse__1108(rest, acc, stack, context, line, offset)
  end

  defp parse__1109(rest, acc, stack, context, line, offset) do
    parse__1107(rest, acc, stack, context, line, offset)
  end

  defp parse__1108(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1110(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1110(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1111(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1110(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1102(rest, acc, stack, context, line, offset)
  end

  defp parse__1111(rest, acc, stack, context, line, offset) do
    parse__1112(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1112(rest, acc, stack, context, line, offset) do
    parse__1116(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1114(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1113(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1115(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1114(rest, [], stack, context, line, offset)
  end

  defp parse__1116(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1117(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1116(rest, acc, stack, context, line, offset) do
    parse__1115(rest, acc, stack, context, line, offset)
  end

  defp parse__1117(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1119(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1117(rest, acc, stack, context, line, offset) do
    parse__1118(rest, acc, stack, context, line, offset)
  end

  defp parse__1119(rest, acc, stack, context, line, offset) do
    parse__1117(rest, acc, stack, context, line, offset)
  end

  defp parse__1118(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1113(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1113(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1120(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1120(rest, acc, stack, context, line, offset) do
    parse__1121(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1121(rest, acc, stack, context, line, offset) do
    parse__1122(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1122(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1123(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1122(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1102(rest, acc, stack, context, line, offset)
  end

  defp parse__1123(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1125(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1123(rest, acc, stack, context, line, offset) do
    parse__1124(rest, acc, stack, context, line, offset)
  end

  defp parse__1125(rest, acc, stack, context, line, offset) do
    parse__1123(rest, acc, stack, context, line, offset)
  end

  defp parse__1124(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1126(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1126(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1127(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1127(rest, acc, stack, context, line, offset) do
    parse__1129(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1129(rest, acc, stack, context, line, offset) do
    parse__1130(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1130(rest, acc, stack, context, line, offset) do
    parse__1134(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1132(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1131(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1133(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1132(rest, [], stack, context, line, offset)
  end

  defp parse__1134(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1135(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1134(rest, acc, stack, context, line, offset) do
    parse__1133(rest, acc, stack, context, line, offset)
  end

  defp parse__1135(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1137(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1135(rest, acc, stack, context, line, offset) do
    parse__1136(rest, acc, stack, context, line, offset)
  end

  defp parse__1137(rest, acc, stack, context, line, offset) do
    parse__1135(rest, acc, stack, context, line, offset)
  end

  defp parse__1136(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1131(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1131(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1138(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1131(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1128(rest, acc, stack, context, line, offset)
  end

  defp parse__1138(rest, acc, stack, context, line, offset) do
    parse__1142(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1140(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1139(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1141(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1140(rest, [], stack, context, line, offset)
  end

  defp parse__1142(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1143(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1142(rest, acc, stack, context, line, offset) do
    parse__1141(rest, acc, stack, context, line, offset)
  end

  defp parse__1143(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1145(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1143(rest, acc, stack, context, line, offset) do
    parse__1144(rest, acc, stack, context, line, offset)
  end

  defp parse__1145(rest, acc, stack, context, line, offset) do
    parse__1143(rest, acc, stack, context, line, offset)
  end

  defp parse__1144(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1139(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1139(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1146(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1146(rest, acc, stack, context, line, offset) do
    parse__1147(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1147(rest, acc, stack, context, line, offset) do
    parse__1148(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1148(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1149(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1148(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1128(rest, acc, stack, context, line, offset)
  end

  defp parse__1149(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1151(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1149(rest, acc, stack, context, line, offset) do
    parse__1150(rest, acc, stack, context, line, offset)
  end

  defp parse__1151(rest, acc, stack, context, line, offset) do
    parse__1149(rest, acc, stack, context, line, offset)
  end

  defp parse__1150(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1152(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1152(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1153(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1128(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1154(rest, acc, stack, context, line, offset)
  end

  defp parse__1153(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1129(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1154(rest, acc, stack, context, line, offset) do
    parse__1155(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1155(rest, acc, stack, context, line, offset) do
    parse__1159(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1157(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1156(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1158(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1157(rest, [], stack, context, line, offset)
  end

  defp parse__1159(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1160(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1159(rest, acc, stack, context, line, offset) do
    parse__1158(rest, acc, stack, context, line, offset)
  end

  defp parse__1160(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1162(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1160(rest, acc, stack, context, line, offset) do
    parse__1161(rest, acc, stack, context, line, offset)
  end

  defp parse__1162(rest, acc, stack, context, line, offset) do
    parse__1160(rest, acc, stack, context, line, offset)
  end

  defp parse__1161(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1156(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1156(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1163(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1163(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1164(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1163(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1102(rest, acc, stack, context, line, offset)
  end

  defp parse__1164(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1165(rest, [notation: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1165(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1042(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1042(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1040(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1166(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1041(rest, [], stack, context, line, offset)
  end

  defp parse__1167(<<"ID", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:ID] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1167(<<"IDREF", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:IDREF] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp parse__1167(<<"IDREFS", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:IDREFS] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__1167(<<"ENTITY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:ENTITY] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__1167(<<"ENTITIES", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:ENTITIES] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__1167(<<"NMTOKEN", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:NMTOKEN] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp parse__1167(<<"NMTOKENS", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1168(rest, [:NMTOKENS] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__1167(rest, acc, stack, context, line, offset) do
    parse__1166(rest, acc, stack, context, line, offset)
  end

  defp parse__1168(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1040(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1169(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1167(rest, [], stack, context, line, offset)
  end

  defp parse__1170(<<"CDATA", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1171(rest, [:string] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp parse__1170(rest, acc, stack, context, line, offset) do
    parse__1169(rest, acc, stack, context, line, offset)
  end

  defp parse__1171(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1040(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1040(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1172(
      rest,
      [
        type:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1172(rest, acc, stack, context, line, offset) do
    parse__1173(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1173(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1174(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1173(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1174(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1176(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1174(rest, acc, stack, context, line, offset) do
    parse__1175(rest, acc, stack, context, line, offset)
  end

  defp parse__1176(rest, acc, stack, context, line, offset) do
    parse__1174(rest, acc, stack, context, line, offset)
  end

  defp parse__1175(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1177(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1177(rest, acc, stack, context, line, offset) do
    parse__1178(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1178(rest, acc, stack, context, line, offset) do
    parse__1321(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1180(rest, acc, stack, context, line, offset) do
    parse__1181(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1181(rest, acc, stack, context, line, offset) do
    parse__1185(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1183(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1182(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1184(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1183(rest, [], stack, context, line, offset)
  end

  defp parse__1185(<<"#FIXED", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1186(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp parse__1185(rest, acc, stack, context, line, offset) do
    parse__1184(rest, acc, stack, context, line, offset)
  end

  defp parse__1186(rest, acc, stack, context, line, offset) do
    parse__1187(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1187(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1188(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1187(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1184(rest, acc, stack, context, line, offset)
  end

  defp parse__1188(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1190(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1188(rest, acc, stack, context, line, offset) do
    parse__1189(rest, acc, stack, context, line, offset)
  end

  defp parse__1190(rest, acc, stack, context, line, offset) do
    parse__1188(rest, acc, stack, context, line, offset)
  end

  defp parse__1189(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1191(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1191(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1182(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1182(rest, acc, stack, context, line, offset) do
    parse__1192(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1192(rest, acc, stack, context, line, offset) do
    parse__1255(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1194(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1195(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1194(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1195(rest, acc, stack, context, line, offset) do
    parse__1196(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1196(rest, acc, stack, context, line, offset) do
    parse__1197(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1197(rest, acc, stack, context, line, offset) do
    parse__1201(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1199(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1198(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1200(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1199(rest, [], stack, context, line, offset)
  end

  defp parse__1201(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 39 do
    parse__1203(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1201(rest, acc, stack, context, line, offset) do
    parse__1202(rest, acc, stack, context, line, offset)
  end

  defp parse__1203(rest, acc, stack, context, line, offset) do
    parse__1201(rest, acc, stack, context, line, offset)
  end

  defp parse__1202(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1198(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1198(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1204(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1204(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1205(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1205(rest, acc, stack, context, line, offset) do
    parse__1207(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1207(rest, acc, stack, context, line, offset) do
    parse__1230(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1209(rest, acc, stack, context, line, offset) do
    parse__1210(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1210(rest, acc, stack, context, line, offset) do
    parse__1219(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1212(rest, acc, stack, context, line, offset) do
    parse__1213(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1213(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__1214(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1213(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__1206(rest, acc, stack, context, line, offset)
  end

  defp parse__1214(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__1216(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1214(rest, acc, stack, context, line, offset) do
    parse__1215(rest, acc, stack, context, line, offset)
  end

  defp parse__1216(rest, acc, stack, context, line, offset) do
    parse__1214(rest, acc, stack, context, line, offset)
  end

  defp parse__1215(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1217(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1217(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1211(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1218(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1212(rest, [], stack, context, line, offset)
  end

  defp parse__1219(rest, acc, stack, context, line, offset) do
    parse__1220(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1220(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1221(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1220(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1218(rest, acc, stack, context, line, offset)
  end

  defp parse__1221(rest, acc, stack, context, line, offset) do
    parse__1222(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1222(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__1223(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1222(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1218(rest, acc, stack, context, line, offset)
  end

  defp parse__1223(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__1225(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1223(rest, acc, stack, context, line, offset) do
    parse__1224(rest, acc, stack, context, line, offset)
  end

  defp parse__1225(rest, acc, stack, context, line, offset) do
    parse__1223(rest, acc, stack, context, line, offset)
  end

  defp parse__1224(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1226(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1226(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1227(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1227(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1211(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1211(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1228(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1228(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1208(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1229(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1209(rest, [], stack, context, line, offset)
  end

  defp parse__1230(rest, acc, stack, context, line, offset) do
    parse__1231(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1231(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1232(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1231(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1229(rest, acc, stack, context, line, offset)
  end

  defp parse__1232(rest, acc, stack, context, line, offset) do
    parse__1233(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1233(rest, acc, stack, context, line, offset) do
    parse__1234(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1234(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1235(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1234(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1229(rest, acc, stack, context, line, offset)
  end

  defp parse__1235(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1237(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1235(rest, acc, stack, context, line, offset) do
    parse__1236(rest, acc, stack, context, line, offset)
  end

  defp parse__1237(rest, acc, stack, context, line, offset) do
    parse__1235(rest, acc, stack, context, line, offset)
  end

  defp parse__1236(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1238(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1238(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1239(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1239(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1240(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1239(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1229(rest, acc, stack, context, line, offset)
  end

  defp parse__1240(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__1241(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__1241(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1208(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1208(rest, acc, stack, context, line, offset) do
    parse__1242(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1242(rest, acc, stack, context, line, offset) do
    parse__1243(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1243(rest, acc, stack, context, line, offset) do
    parse__1247(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1245(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1244(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1246(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1245(rest, [], stack, context, line, offset)
  end

  defp parse__1247(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    parse__1249(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1247(rest, acc, stack, context, line, offset) do
    parse__1248(rest, acc, stack, context, line, offset)
  end

  defp parse__1249(rest, acc, stack, context, line, offset) do
    parse__1247(rest, acc, stack, context, line, offset)
  end

  defp parse__1248(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1244(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1244(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1250(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1250(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1251(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1206(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1252(rest, acc, stack, context, line, offset)
  end

  defp parse__1251(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1207(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1252(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1253(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1252(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    parse__1019(rest, acc, stack, context, line, offset)
  end

  defp parse__1253(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1193(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1254(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1194(rest, [], stack, context, line, offset)
  end

  defp parse__1255(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1256(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1255(rest, acc, stack, context, line, offset) do
    parse__1254(rest, acc, stack, context, line, offset)
  end

  defp parse__1256(rest, acc, stack, context, line, offset) do
    parse__1257(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1257(rest, acc, stack, context, line, offset) do
    parse__1258(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1258(rest, acc, stack, context, line, offset) do
    parse__1262(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1260(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1259(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1261(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1260(rest, [], stack, context, line, offset)
  end

  defp parse__1262(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    parse__1264(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1262(rest, acc, stack, context, line, offset) do
    parse__1263(rest, acc, stack, context, line, offset)
  end

  defp parse__1264(rest, acc, stack, context, line, offset) do
    parse__1262(rest, acc, stack, context, line, offset)
  end

  defp parse__1263(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1259(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1259(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1265(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1265(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1266(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1266(rest, acc, stack, context, line, offset) do
    parse__1268(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1268(rest, acc, stack, context, line, offset) do
    parse__1291(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1270(rest, acc, stack, context, line, offset) do
    parse__1271(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1271(rest, acc, stack, context, line, offset) do
    parse__1280(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1273(rest, acc, stack, context, line, offset) do
    parse__1274(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1274(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__1275(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1274(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    parse__1267(rest, acc, stack, context, line, offset)
  end

  defp parse__1275(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    parse__1277(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1275(rest, acc, stack, context, line, offset) do
    parse__1276(rest, acc, stack, context, line, offset)
  end

  defp parse__1277(rest, acc, stack, context, line, offset) do
    parse__1275(rest, acc, stack, context, line, offset)
  end

  defp parse__1276(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1278(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1278(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1272(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1279(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1273(rest, [], stack, context, line, offset)
  end

  defp parse__1280(rest, acc, stack, context, line, offset) do
    parse__1281(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1281(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1282(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1281(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1279(rest, acc, stack, context, line, offset)
  end

  defp parse__1282(rest, acc, stack, context, line, offset) do
    parse__1283(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1283(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__1284(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1283(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1279(rest, acc, stack, context, line, offset)
  end

  defp parse__1284(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    parse__1286(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1284(rest, acc, stack, context, line, offset) do
    parse__1285(rest, acc, stack, context, line, offset)
  end

  defp parse__1286(rest, acc, stack, context, line, offset) do
    parse__1284(rest, acc, stack, context, line, offset)
  end

  defp parse__1285(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1287(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1287(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1288(rest, [CR_integer: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1288(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1272(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1272(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1289(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1289(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1269(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1290(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1270(rest, [], stack, context, line, offset)
  end

  defp parse__1291(rest, acc, stack, context, line, offset) do
    parse__1292(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1292(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1293(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1292(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1290(rest, acc, stack, context, line, offset)
  end

  defp parse__1293(rest, acc, stack, context, line, offset) do
    parse__1294(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1294(rest, acc, stack, context, line, offset) do
    parse__1295(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1295(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1296(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1295(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1290(rest, acc, stack, context, line, offset)
  end

  defp parse__1296(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1298(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1296(rest, acc, stack, context, line, offset) do
    parse__1297(rest, acc, stack, context, line, offset)
  end

  defp parse__1298(rest, acc, stack, context, line, offset) do
    parse__1296(rest, acc, stack, context, line, offset)
  end

  defp parse__1297(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1299(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1299(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1300(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1300(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1301(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1300(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1290(rest, acc, stack, context, line, offset)
  end

  defp parse__1301(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        parse__1302(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp parse__1302(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1269(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1269(rest, acc, stack, context, line, offset) do
    parse__1303(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1303(rest, acc, stack, context, line, offset) do
    parse__1304(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1304(rest, acc, stack, context, line, offset) do
    parse__1308(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1306(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1305(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1307(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1306(rest, [], stack, context, line, offset)
  end

  defp parse__1308(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    parse__1310(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1308(rest, acc, stack, context, line, offset) do
    parse__1309(rest, acc, stack, context, line, offset)
  end

  defp parse__1310(rest, acc, stack, context, line, offset) do
    parse__1308(rest, acc, stack, context, line, offset)
  end

  defp parse__1309(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1305(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1305(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1311(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1311(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1312(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1267(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1313(rest, acc, stack, context, line, offset)
  end

  defp parse__1312(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1268(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1313(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1314(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1313(rest, acc, stack, context, line, offset) do
    parse__1254(rest, acc, stack, context, line, offset)
  end

  defp parse__1314(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1193(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1193(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1315(rest, [value: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1315(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1316(rest, [fixed: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1316(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1179(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1317(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1180(rest, [], stack, context, line, offset)
  end

  defp parse__1318(<<"#IMPLIED", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1319(rest, [:implied] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp parse__1318(rest, acc, stack, context, line, offset) do
    parse__1317(rest, acc, stack, context, line, offset)
  end

  defp parse__1319(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1179(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1320(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1318(rest, [], stack, context, line, offset)
  end

  defp parse__1321(<<"#REQUIRED", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1322(rest, [:required] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp parse__1321(rest, acc, stack, context, line, offset) do
    parse__1320(rest, acc, stack, context, line, offset)
  end

  defp parse__1322(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1179(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1179(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1323(
      rest,
      [
        default:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1323(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1324(
      rest,
      [attribute_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1019(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1325(rest, acc, stack, context, line, offset)
  end

  defp parse__1324(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1020(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1325(rest, acc, stack, context, line, offset) do
    parse__1326(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1326(rest, acc, stack, context, line, offset) do
    parse__1330(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1328(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1327(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1329(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1328(rest, [], stack, context, line, offset)
  end

  defp parse__1330(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1331(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1330(rest, acc, stack, context, line, offset) do
    parse__1329(rest, acc, stack, context, line, offset)
  end

  defp parse__1331(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1333(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1331(rest, acc, stack, context, line, offset) do
    parse__1332(rest, acc, stack, context, line, offset)
  end

  defp parse__1333(rest, acc, stack, context, line, offset) do
    parse__1331(rest, acc, stack, context, line, offset)
  end

  defp parse__1332(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1327(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1327(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1334(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1334(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1335(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1334(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1003(rest, acc, stack, context, line, offset)
  end

  defp parse__1335(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1336(
      rest,
      [attributes_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1336(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1337(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1004(rest, [], stack, context, line, offset)
  end

  defp parse__1338(rest, acc, stack, context, line, offset) do
    parse__1339(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1339(<<"<!ELEMENT", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1340(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp parse__1339(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1337(rest, acc, stack, context, line, offset)
  end

  defp parse__1340(rest, acc, stack, context, line, offset) do
    parse__1341(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1341(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1342(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1341(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1337(rest, acc, stack, context, line, offset)
  end

  defp parse__1342(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1344(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1342(rest, acc, stack, context, line, offset) do
    parse__1343(rest, acc, stack, context, line, offset)
  end

  defp parse__1344(rest, acc, stack, context, line, offset) do
    parse__1342(rest, acc, stack, context, line, offset)
  end

  defp parse__1343(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1345(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1345(rest, acc, stack, context, line, offset) do
    parse__1346(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1346(rest, acc, stack, context, line, offset) do
    parse__1347(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1347(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1348(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1347(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1337(rest, acc, stack, context, line, offset)
  end

  defp parse__1348(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1350(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1348(rest, acc, stack, context, line, offset) do
    parse__1349(rest, acc, stack, context, line, offset)
  end

  defp parse__1350(rest, acc, stack, context, line, offset) do
    parse__1348(rest, acc, stack, context, line, offset)
  end

  defp parse__1349(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1351(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1351(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1352(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1352(rest, acc, stack, context, line, offset) do
    parse__1353(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1353(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1354(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1353(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1337(rest, acc, stack, context, line, offset)
  end

  defp parse__1354(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1356(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1354(rest, acc, stack, context, line, offset) do
    parse__1355(rest, acc, stack, context, line, offset)
  end

  defp parse__1356(rest, acc, stack, context, line, offset) do
    parse__1354(rest, acc, stack, context, line, offset)
  end

  defp parse__1355(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1357(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1357(rest, acc, stack, context, line, offset) do
    parse__1358(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1358(rest, acc, stack, context, line, offset) do
    parse__1455(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1360(rest, acc, stack, context, line, offset) do
    parse__1361(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1361(rest, acc, stack, context, line, offset) do
    parse__1366(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1363(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        parse__1364(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        [_, _, _, _, _, _, acc | stack] = stack
        parse__1337(rest, acc, stack, context, line, offset)
    end
  end

  defp parse__1364(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1362(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1365(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1363(rest, [], stack, context, line, offset)
  end

  defp parse__1366(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        parse__1367(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        parse__1365(rest, acc, stack, context, line, offset)
    end
  end

  defp parse__1367(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1362(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1362(rest, acc, stack, context, line, offset) do
    parse__1371(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1369(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1368(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1370(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1369(rest, [], stack, context, line, offset)
  end

  defp parse__1371(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1372(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1371(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1372(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1371(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1372(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1371(rest, acc, stack, context, line, offset) do
    parse__1370(rest, acc, stack, context, line, offset)
  end

  defp parse__1372(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1368(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1368(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1373(rest, [children: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1373(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1359(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1374(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1360(rest, [], stack, context, line, offset)
  end

  defp parse__1375(rest, acc, stack, context, line, offset) do
    parse__1376(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1376(rest, acc, stack, context, line, offset) do
    parse__1401(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1378(rest, acc, stack, context, line, offset) do
    parse__1379(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1379(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1380(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1379(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__1374(rest, acc, stack, context, line, offset)
  end

  defp parse__1380(rest, acc, stack, context, line, offset) do
    parse__1384(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1382(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1381(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1383(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1382(rest, [], stack, context, line, offset)
  end

  defp parse__1384(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1385(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1384(rest, acc, stack, context, line, offset) do
    parse__1383(rest, acc, stack, context, line, offset)
  end

  defp parse__1385(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1387(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1385(rest, acc, stack, context, line, offset) do
    parse__1386(rest, acc, stack, context, line, offset)
  end

  defp parse__1387(rest, acc, stack, context, line, offset) do
    parse__1385(rest, acc, stack, context, line, offset)
  end

  defp parse__1386(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1381(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1381(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1388(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1388(<<"#PCDATA", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1389(rest, [:PCDATA] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp parse__1388(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1374(rest, acc, stack, context, line, offset)
  end

  defp parse__1389(rest, acc, stack, context, line, offset) do
    parse__1390(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1390(rest, acc, stack, context, line, offset) do
    parse__1394(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1392(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1391(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1393(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1392(rest, [], stack, context, line, offset)
  end

  defp parse__1394(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1395(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1394(rest, acc, stack, context, line, offset) do
    parse__1393(rest, acc, stack, context, line, offset)
  end

  defp parse__1395(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1397(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1395(rest, acc, stack, context, line, offset) do
    parse__1396(rest, acc, stack, context, line, offset)
  end

  defp parse__1397(rest, acc, stack, context, line, offset) do
    parse__1395(rest, acc, stack, context, line, offset)
  end

  defp parse__1396(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1391(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1391(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1398(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1391(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__1374(rest, acc, stack, context, line, offset)
  end

  defp parse__1398(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1399(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1399(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1377(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1400(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1378(rest, [], stack, context, line, offset)
  end

  defp parse__1401(rest, acc, stack, context, line, offset) do
    parse__1402(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1402(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1403(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1402(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1400(rest, acc, stack, context, line, offset)
  end

  defp parse__1403(rest, acc, stack, context, line, offset) do
    parse__1407(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1405(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1404(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1406(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1405(rest, [], stack, context, line, offset)
  end

  defp parse__1407(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1408(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1407(rest, acc, stack, context, line, offset) do
    parse__1406(rest, acc, stack, context, line, offset)
  end

  defp parse__1408(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1410(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1408(rest, acc, stack, context, line, offset) do
    parse__1409(rest, acc, stack, context, line, offset)
  end

  defp parse__1410(rest, acc, stack, context, line, offset) do
    parse__1408(rest, acc, stack, context, line, offset)
  end

  defp parse__1409(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1404(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1404(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1411(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1411(<<"#PCDATA", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1412(rest, [:PCDATA] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp parse__1411(rest, acc, stack, context, line, offset) do
    parse__1400(rest, acc, stack, context, line, offset)
  end

  defp parse__1412(rest, acc, stack, context, line, offset) do
    parse__1414(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1414(rest, acc, stack, context, line, offset) do
    parse__1415(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1415(rest, acc, stack, context, line, offset) do
    parse__1419(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1417(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1416(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1418(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1417(rest, [], stack, context, line, offset)
  end

  defp parse__1419(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1420(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1419(rest, acc, stack, context, line, offset) do
    parse__1418(rest, acc, stack, context, line, offset)
  end

  defp parse__1420(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1422(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1420(rest, acc, stack, context, line, offset) do
    parse__1421(rest, acc, stack, context, line, offset)
  end

  defp parse__1422(rest, acc, stack, context, line, offset) do
    parse__1420(rest, acc, stack, context, line, offset)
  end

  defp parse__1421(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1416(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1416(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1423(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1416(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1413(rest, acc, stack, context, line, offset)
  end

  defp parse__1423(rest, acc, stack, context, line, offset) do
    parse__1427(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1425(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1424(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1426(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1425(rest, [], stack, context, line, offset)
  end

  defp parse__1427(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1428(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1427(rest, acc, stack, context, line, offset) do
    parse__1426(rest, acc, stack, context, line, offset)
  end

  defp parse__1428(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1430(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1428(rest, acc, stack, context, line, offset) do
    parse__1429(rest, acc, stack, context, line, offset)
  end

  defp parse__1430(rest, acc, stack, context, line, offset) do
    parse__1428(rest, acc, stack, context, line, offset)
  end

  defp parse__1429(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1424(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1424(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1431(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1431(rest, acc, stack, context, line, offset) do
    parse__1432(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1432(rest, acc, stack, context, line, offset) do
    parse__1433(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1433(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1434(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1433(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1413(rest, acc, stack, context, line, offset)
  end

  defp parse__1434(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1436(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1434(rest, acc, stack, context, line, offset) do
    parse__1435(rest, acc, stack, context, line, offset)
  end

  defp parse__1436(rest, acc, stack, context, line, offset) do
    parse__1434(rest, acc, stack, context, line, offset)
  end

  defp parse__1435(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1437(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1437(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1438(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1413(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1439(rest, acc, stack, context, line, offset)
  end

  defp parse__1438(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1414(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1439(rest, acc, stack, context, line, offset) do
    parse__1440(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1440(rest, acc, stack, context, line, offset) do
    parse__1444(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1442(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1441(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1443(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1442(rest, [], stack, context, line, offset)
  end

  defp parse__1444(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1445(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1444(rest, acc, stack, context, line, offset) do
    parse__1443(rest, acc, stack, context, line, offset)
  end

  defp parse__1445(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1447(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1445(rest, acc, stack, context, line, offset) do
    parse__1446(rest, acc, stack, context, line, offset)
  end

  defp parse__1447(rest, acc, stack, context, line, offset) do
    parse__1445(rest, acc, stack, context, line, offset)
  end

  defp parse__1446(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1441(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1441(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1448(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1448(<<")*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1449(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1448(rest, acc, stack, context, line, offset) do
    parse__1400(rest, acc, stack, context, line, offset)
  end

  defp parse__1449(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1377(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1377(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1450(rest, [mixed: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1450(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1359(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1451(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1375(rest, [], stack, context, line, offset)
  end

  defp parse__1452(<<"ANY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1453(rest, ["ANY"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__1452(rest, acc, stack, context, line, offset) do
    parse__1451(rest, acc, stack, context, line, offset)
  end

  defp parse__1453(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1359(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1454(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1452(rest, [], stack, context, line, offset)
  end

  defp parse__1455(<<"EMPTY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1456(rest, ["EMPTY"] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp parse__1455(rest, acc, stack, context, line, offset) do
    parse__1454(rest, acc, stack, context, line, offset)
  end

  defp parse__1456(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1359(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1359(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1457(
      rest,
      [contentspec: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1457(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1458(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1457(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1337(rest, acc, stack, context, line, offset)
  end

  defp parse__1458(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1459(
      rest,
      [element_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1459(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__355(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__294(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__292(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1460(rest, acc, stack, context, line, offset)
  end

  defp parse__294(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__293(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1460(rest, acc, stack, context, line, offset) do
    parse__1461(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1461(<<"]", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1462(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__1461(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__289(rest, acc, stack, context, line, offset)
  end

  defp parse__1462(rest, acc, stack, context, line, offset) do
    parse__1466(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1464(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1463(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1465(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1464(rest, [], stack, context, line, offset)
  end

  defp parse__1466(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1467(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1466(rest, acc, stack, context, line, offset) do
    parse__1465(rest, acc, stack, context, line, offset)
  end

  defp parse__1467(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1469(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1467(rest, acc, stack, context, line, offset) do
    parse__1468(rest, acc, stack, context, line, offset)
  end

  defp parse__1469(rest, acc, stack, context, line, offset) do
    parse__1467(rest, acc, stack, context, line, offset)
  end

  defp parse__1468(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1463(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1463(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1470(rest, [] ++ acc, stack, context, line, offset)
  end

  defp parse__1470(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__287(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__287(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1471(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp parse__287(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__186(rest, acc, stack, context, line, offset)
  end

  defp parse__1471(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1472(
      rest,
      [doctype_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1472(rest, acc, stack, context, line, offset) do
    parse__1474(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1474(rest, acc, stack, context, line, offset) do
    parse__1513(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1476(rest, acc, stack, context, line, offset) do
    parse__1477(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1477(rest, acc, stack, context, line, offset) do
    parse__1478(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1478(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1479(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1478(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__1473(rest, acc, stack, context, line, offset)
  end

  defp parse__1479(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1481(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1479(rest, acc, stack, context, line, offset) do
    parse__1480(rest, acc, stack, context, line, offset)
  end

  defp parse__1481(rest, acc, stack, context, line, offset) do
    parse__1479(rest, acc, stack, context, line, offset)
  end

  defp parse__1480(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1482(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1482(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1483(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1483(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1475(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1484(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1476(rest, [], stack, context, line, offset)
  end

  defp parse__1485(rest, acc, stack, context, line, offset) do
    parse__1486(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1486(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1487(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1486(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1487(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1487(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1487(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1487(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1487(rest, acc, stack, context, line, offset) do
    parse__1488(rest, acc, stack, context, line, offset)
  end

  defp parse__1488(rest, acc, stack, context, line, offset) do
    parse__1489(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1489(rest, acc, stack, context, line, offset) do
    parse__1490(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1490(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1491(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1490(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1491(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1493(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1491(rest, acc, stack, context, line, offset) do
    parse__1492(rest, acc, stack, context, line, offset)
  end

  defp parse__1493(rest, acc, stack, context, line, offset) do
    parse__1491(rest, acc, stack, context, line, offset)
  end

  defp parse__1492(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1494(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1494(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1495(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1495(rest, acc, stack, context, line, offset) do
    parse__1499(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1497(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1496(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1498(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1497(rest, [], stack, context, line, offset)
  end

  defp parse__1499(rest, acc, stack, context, line, offset) do
    parse__1500(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1500(rest, acc, stack, context, line, offset) do
    parse__1501(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1501(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1502(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1501(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1498(rest, acc, stack, context, line, offset)
  end

  defp parse__1502(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1504(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1502(rest, acc, stack, context, line, offset) do
    parse__1503(rest, acc, stack, context, line, offset)
  end

  defp parse__1504(rest, acc, stack, context, line, offset) do
    parse__1502(rest, acc, stack, context, line, offset)
  end

  defp parse__1503(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__1505(rest, acc, stack, context, line, offset)
  end

  defp parse__1503(rest, acc, stack, context, line, offset) do
    parse__1506(rest, acc, stack, context, line, offset)
  end

  defp parse__1506(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__1507(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1506(rest, acc, stack, context, line, offset) do
    parse__1505(rest, acc, stack, context, line, offset)
  end

  defp parse__1507(rest, acc, stack, context, line, offset) do
    parse__1503(rest, acc, stack, context, line, offset)
  end

  defp parse__1505(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1508(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1508(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1509(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1509(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1496(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1496(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1510(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1496(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1484(rest, acc, stack, context, line, offset)
  end

  defp parse__1510(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1511(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1511(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1475(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1512(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1485(rest, [], stack, context, line, offset)
  end

  defp parse__1513(rest, acc, stack, context, line, offset) do
    parse__1514(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1514(rest, acc, stack, context, line, offset) do
    parse__1515(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1515(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1516(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp parse__1515(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1512(rest, acc, stack, context, line, offset)
  end

  defp parse__1516(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__1517(rest, acc, stack, context, line, offset)
  end

  defp parse__1516(rest, acc, stack, context, line, offset) do
    parse__1518(rest, acc, stack, context, line, offset)
  end

  defp parse__1518(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__1519(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1518(rest, acc, stack, context, line, offset) do
    parse__1517(rest, acc, stack, context, line, offset)
  end

  defp parse__1519(rest, acc, stack, context, line, offset) do
    parse__1516(rest, acc, stack, context, line, offset)
  end

  defp parse__1517(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1520(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__1517(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1512(rest, acc, stack, context, line, offset)
  end

  defp parse__1520(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1521(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1521(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1522(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1522(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1475(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1473(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1523(rest, acc, stack, context, line, offset)
  end

  defp parse__1475(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1474(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1523(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__184(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__184(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1524(rest, [prolog: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1524(rest, acc, stack, context, line, offset) do
    case(x_element__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        parse__1525(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        error
    end
  end

  defp parse__1525(rest, acc, stack, context, line, offset) do
    parse__1527(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp parse__1527(rest, acc, stack, context, line, offset) do
    parse__1566(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1529(rest, acc, stack, context, line, offset) do
    parse__1530(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1530(rest, acc, stack, context, line, offset) do
    parse__1531(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1531(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1532(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1531(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    parse__1526(rest, acc, stack, context, line, offset)
  end

  defp parse__1532(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1534(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1532(rest, acc, stack, context, line, offset) do
    parse__1533(rest, acc, stack, context, line, offset)
  end

  defp parse__1534(rest, acc, stack, context, line, offset) do
    parse__1532(rest, acc, stack, context, line, offset)
  end

  defp parse__1533(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1535(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1535(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1536(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1536(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1528(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1537(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1529(rest, [], stack, context, line, offset)
  end

  defp parse__1538(rest, acc, stack, context, line, offset) do
    parse__1539(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1539(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1540(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1539(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1540(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1540(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1540(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1540(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1540(rest, acc, stack, context, line, offset) do
    parse__1541(rest, acc, stack, context, line, offset)
  end

  defp parse__1541(rest, acc, stack, context, line, offset) do
    parse__1542(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1542(rest, acc, stack, context, line, offset) do
    parse__1543(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1543(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    parse__1544(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1543(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1544(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    parse__1546(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1544(rest, acc, stack, context, line, offset) do
    parse__1545(rest, acc, stack, context, line, offset)
  end

  defp parse__1546(rest, acc, stack, context, line, offset) do
    parse__1544(rest, acc, stack, context, line, offset)
  end

  defp parse__1545(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1547(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1547(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1548(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1548(rest, acc, stack, context, line, offset) do
    parse__1552(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp parse__1550(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1549(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1551(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1550(rest, [], stack, context, line, offset)
  end

  defp parse__1552(rest, acc, stack, context, line, offset) do
    parse__1553(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1553(rest, acc, stack, context, line, offset) do
    parse__1554(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1554(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1555(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1554(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1551(rest, acc, stack, context, line, offset)
  end

  defp parse__1555(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    parse__1557(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1555(rest, acc, stack, context, line, offset) do
    parse__1556(rest, acc, stack, context, line, offset)
  end

  defp parse__1557(rest, acc, stack, context, line, offset) do
    parse__1555(rest, acc, stack, context, line, offset)
  end

  defp parse__1556(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__1558(rest, acc, stack, context, line, offset)
  end

  defp parse__1556(rest, acc, stack, context, line, offset) do
    parse__1559(rest, acc, stack, context, line, offset)
  end

  defp parse__1559(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__1560(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1559(rest, acc, stack, context, line, offset) do
    parse__1558(rest, acc, stack, context, line, offset)
  end

  defp parse__1560(rest, acc, stack, context, line, offset) do
    parse__1556(rest, acc, stack, context, line, offset)
  end

  defp parse__1558(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1561(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1561(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1562(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1562(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1549(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1549(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1563(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp parse__1549(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    parse__1537(rest, acc, stack, context, line, offset)
  end

  defp parse__1563(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1564(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1564(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1528(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1565(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    parse__1538(rest, [], stack, context, line, offset)
  end

  defp parse__1566(rest, acc, stack, context, line, offset) do
    parse__1567(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1567(rest, acc, stack, context, line, offset) do
    parse__1568(rest, [], [acc | stack], context, line, offset)
  end

  defp parse__1568(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1569(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp parse__1568(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1565(rest, acc, stack, context, line, offset)
  end

  defp parse__1569(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    parse__1570(rest, acc, stack, context, line, offset)
  end

  defp parse__1569(rest, acc, stack, context, line, offset) do
    parse__1571(rest, acc, stack, context, line, offset)
  end

  defp parse__1571(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    parse__1572(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp parse__1571(rest, acc, stack, context, line, offset) do
    parse__1570(rest, acc, stack, context, line, offset)
  end

  defp parse__1572(rest, acc, stack, context, line, offset) do
    parse__1569(rest, acc, stack, context, line, offset)
  end

  defp parse__1570(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    parse__1573(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp parse__1570(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    parse__1565(rest, acc, stack, context, line, offset)
  end

  defp parse__1573(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1574(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1574(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    parse__1575(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp parse__1575(rest, acc, [_, previous_acc | stack], context, line, offset) do
    parse__1528(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp parse__1526(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    parse__1576(rest, acc, stack, context, line, offset)
  end

  defp parse__1528(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    parse__1527(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp parse__1576(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    parse__1577(rest, [document: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp parse__1577(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end

  defp x_ignoreSectContents__0(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__1(rest, [], [acc | stack], context, line, offset)
  end

  defp x_ignoreSectContents__1(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__2(rest, [], [acc | stack], context, line, offset)
  end

  defp x_ignoreSectContents__2(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__4(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__4(<<"<![", _::binary>> = rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__3(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__4(<<"]]>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__3(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__4(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__5(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__5(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_ignoreSectContents__6(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_ignoreSectContents__5(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__3(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__3(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_ignoreSectContents__7(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__6(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_ignoreSectContents__4(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_ignoreSectContents__7(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_ignoreSectContents__8(
      rest,
      [Ignore: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__8(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__10(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__10(
         <<"<![", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_ignoreSectContents__11(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_ignoreSectContents__10(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__9(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__11(rest, acc, stack, context, line, offset) do
    case(x_ignoreSectContents__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_ignoreSectContents__12(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_ignoreSectContents__9(rest, acc, stack, context, line, offset)
    end
  end

  defp x_ignoreSectContents__12(
         <<"]]>", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_ignoreSectContents__13(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_ignoreSectContents__12(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__9(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__13(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__14(rest, [], [acc | stack], context, line, offset)
  end

  defp x_ignoreSectContents__14(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__16(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__16(<<"<![", _::binary>> = rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__15(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__16(<<"]]>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__15(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__16(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__17(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__17(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_ignoreSectContents__18(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_ignoreSectContents__17(rest, acc, stack, context, line, offset) do
    x_ignoreSectContents__15(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__15(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_ignoreSectContents__19(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__18(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_ignoreSectContents__16(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_ignoreSectContents__19(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_ignoreSectContents__20(
      rest,
      [Ignore: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__9(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_ignoreSectContents__21(rest, acc, stack, context, line, offset)
  end

  defp x_ignoreSectContents__20(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_ignoreSectContents__10(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_ignoreSectContents__21(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_ignoreSectContents__22(
      rest,
      [ignoreSectContents: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_ignoreSectContents__22(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end

  defp x_includeSect__0(rest, acc, stack, context, line, offset) do
    x_includeSect__1(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1(<<"<![", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__2(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__1(rest, _acc, _stack, context, line, offset) do
    {:error, "expected includeSect", rest, context, line, offset}
  end

  defp x_includeSect__2(rest, acc, stack, context, line, offset) do
    x_includeSect__3(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__3(rest, acc, stack, context, line, offset) do
    x_includeSect__7(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__5(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__6(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__5(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__7(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__8(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__7(rest, acc, stack, context, line, offset) do
    x_includeSect__6(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__8(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__10(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__8(rest, acc, stack, context, line, offset) do
    x_includeSect__9(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__10(rest, acc, stack, context, line, offset) do
    x_includeSect__8(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__9(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__4(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__11(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__11(
         <<"INCLUDE", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__12(rest, [] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp x_includeSect__11(rest, _acc, _stack, context, line, offset) do
    {:error, "expected includeSect", rest, context, line, offset}
  end

  defp x_includeSect__12(rest, acc, stack, context, line, offset) do
    x_includeSect__13(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__13(rest, acc, stack, context, line, offset) do
    x_includeSect__17(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__15(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__14(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__16(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__15(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__17(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__18(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__17(rest, acc, stack, context, line, offset) do
    x_includeSect__16(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__18(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__20(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__18(rest, acc, stack, context, line, offset) do
    x_includeSect__19(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__20(rest, acc, stack, context, line, offset) do
    x_includeSect__18(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__19(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__14(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__14(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__21(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__21(<<"[", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__22(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__21(rest, _acc, _stack, context, line, offset) do
    {:error, "expected includeSect", rest, context, line, offset}
  end

  defp x_includeSect__22(rest, acc, stack, context, line, offset) do
    x_includeSect__24(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__24(rest, acc, stack, context, line, offset) do
    x_includeSect__26(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__26(rest, acc, stack, context, line, offset) do
    x_includeSect__87(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__28(rest, acc, stack, context, line, offset) do
    x_includeSect__37(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__30(rest, acc, stack, context, line, offset) do
    x_includeSect__31(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__31(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__32(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__31(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    x_includeSect__25(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__32(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__34(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__32(rest, acc, stack, context, line, offset) do
    x_includeSect__33(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__34(rest, acc, stack, context, line, offset) do
    x_includeSect__32(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__33(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__35(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__35(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__36(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__30(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__37(rest, acc, stack, context, line, offset) do
    x_includeSect__38(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__38(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__39(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__38(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__36(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__39(rest, acc, stack, context, line, offset) do
    x_includeSect__40(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__40(rest, acc, stack, context, line, offset) do
    x_includeSect__41(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__41(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__42(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__41(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__36(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__42(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__44(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__42(rest, acc, stack, context, line, offset) do
    x_includeSect__43(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__44(rest, acc, stack, context, line, offset) do
    x_includeSect__42(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__43(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__45(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__45(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__46(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__46(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__47(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__46(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__36(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__47(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__48(
      rest,
      [PEReference: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__48(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__29(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__27(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__49(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__28(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__50(rest, acc, stack, context, line, offset) do
    x_includeSect__51(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__51(rest, acc, stack, context, line, offset) do
    x_includeSect__83(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__53(rest, acc, stack, context, line, offset) do
    x_includeSect__54(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__54(<<"<![", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__55(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__54(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__49(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__55(rest, acc, stack, context, line, offset) do
    x_includeSect__56(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__56(rest, acc, stack, context, line, offset) do
    x_includeSect__60(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__58(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__57(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__59(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__58(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__60(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__61(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__60(rest, acc, stack, context, line, offset) do
    x_includeSect__59(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__61(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__63(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__61(rest, acc, stack, context, line, offset) do
    x_includeSect__62(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__63(rest, acc, stack, context, line, offset) do
    x_includeSect__61(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__62(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__57(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__57(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__64(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__64(
         <<"IGNORE", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__65(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__64(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__49(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__65(rest, acc, stack, context, line, offset) do
    x_includeSect__66(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__66(rest, acc, stack, context, line, offset) do
    x_includeSect__70(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__68(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__67(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__69(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__68(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__70(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__71(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__70(rest, acc, stack, context, line, offset) do
    x_includeSect__69(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__71(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__73(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__71(rest, acc, stack, context, line, offset) do
    x_includeSect__72(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__73(rest, acc, stack, context, line, offset) do
    x_includeSect__71(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__72(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__67(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__67(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__74(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__74(<<"[", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__75(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__74(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__49(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__75(rest, acc, stack, context, line, offset) do
    x_includeSect__77(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__77(rest, acc, stack, context, line, offset) do
    case(x_ignoreSectContents__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_includeSect__78(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_includeSect__76(rest, acc, stack, context, line, offset)
    end
  end

  defp x_includeSect__76(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__79(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__78(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__77(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__79(<<"]]>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__80(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__79(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__49(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__80(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__81(
      rest,
      [ignoreSect: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__81(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__52(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__82(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__53(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__83(rest, acc, stack, context, line, offset) do
    case(x_includeSect__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_includeSect__84(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_includeSect__82(rest, acc, stack, context, line, offset)
    end
  end

  defp x_includeSect__84(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__52(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__52(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__85(
      rest,
      [conditionalSect: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__85(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__27(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__86(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__50(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__87(rest, acc, stack, context, line, offset) do
    x_includeSect__1071(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__89(rest, acc, stack, context, line, offset) do
    x_includeSect__90(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__90(rest, acc, stack, context, line, offset) do
    x_includeSect__91(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__91(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__92(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp x_includeSect__91(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__86(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__92(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    x_includeSect__93(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__92(rest, acc, stack, context, line, offset) do
    x_includeSect__94(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__94(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_includeSect__95(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__94(rest, acc, stack, context, line, offset) do
    x_includeSect__93(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__95(rest, acc, stack, context, line, offset) do
    x_includeSect__92(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__93(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__96(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__93(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__86(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__96(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__97(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__97(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__98(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__98(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__99(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__89(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__100(rest, acc, stack, context, line, offset) do
    x_includeSect__101(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__101(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__102(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__101(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__102(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__102(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__102(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__102(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__102(rest, acc, stack, context, line, offset) do
    x_includeSect__103(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__103(rest, acc, stack, context, line, offset) do
    x_includeSect__104(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__104(rest, acc, stack, context, line, offset) do
    x_includeSect__105(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__105(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__106(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__105(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__106(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__108(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__106(rest, acc, stack, context, line, offset) do
    x_includeSect__107(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__108(rest, acc, stack, context, line, offset) do
    x_includeSect__106(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__107(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__109(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__109(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__110(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__110(rest, acc, stack, context, line, offset) do
    x_includeSect__114(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__112(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__111(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__113(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__112(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__114(rest, acc, stack, context, line, offset) do
    x_includeSect__115(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__115(rest, acc, stack, context, line, offset) do
    x_includeSect__116(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__116(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__117(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__116(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__113(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__117(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__119(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__117(rest, acc, stack, context, line, offset) do
    x_includeSect__118(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__119(rest, acc, stack, context, line, offset) do
    x_includeSect__117(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__118(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_includeSect__120(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__118(rest, acc, stack, context, line, offset) do
    x_includeSect__121(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__121(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_includeSect__122(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__121(rest, acc, stack, context, line, offset) do
    x_includeSect__120(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__122(rest, acc, stack, context, line, offset) do
    x_includeSect__118(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__120(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__123(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__123(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__124(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__124(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__111(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__111(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__125(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__111(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__99(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__125(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__126(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__126(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__127(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__100(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__128(rest, acc, stack, context, line, offset) do
    x_includeSect__129(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__129(
         <<"<!NOTATION", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__130(rest, [] ++ acc, stack, context, comb__line, comb__offset + 10)
  end

  defp x_includeSect__129(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__130(rest, acc, stack, context, line, offset) do
    x_includeSect__131(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__131(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__132(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__131(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__132(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__134(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__132(rest, acc, stack, context, line, offset) do
    x_includeSect__133(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__134(rest, acc, stack, context, line, offset) do
    x_includeSect__132(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__133(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__135(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__135(rest, acc, stack, context, line, offset) do
    x_includeSect__136(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__136(rest, acc, stack, context, line, offset) do
    x_includeSect__137(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__137(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__138(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__137(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__138(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__140(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__138(rest, acc, stack, context, line, offset) do
    x_includeSect__139(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__140(rest, acc, stack, context, line, offset) do
    x_includeSect__138(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__139(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__141(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__141(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__142(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__142(rest, acc, stack, context, line, offset) do
    x_includeSect__143(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__143(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__144(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__143(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__144(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__146(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__144(rest, acc, stack, context, line, offset) do
    x_includeSect__145(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__146(rest, acc, stack, context, line, offset) do
    x_includeSect__144(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__145(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__147(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__147(rest, acc, stack, context, line, offset) do
    x_includeSect__173(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__149(rest, acc, stack, context, line, offset) do
    x_includeSect__150(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__150(
         <<"PUBLIC", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__151(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__150(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__151(rest, acc, stack, context, line, offset) do
    x_includeSect__152(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__152(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__153(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__152(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__153(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__155(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__153(rest, acc, stack, context, line, offset) do
    x_includeSect__154(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__155(rest, acc, stack, context, line, offset) do
    x_includeSect__153(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__154(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__156(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__156(rest, acc, stack, context, line, offset) do
    x_includeSect__157(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__157(rest, acc, stack, context, line, offset) do
    x_includeSect__165(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__159(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__160(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__159(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__160(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__162(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__160(rest, acc, stack, context, line, offset) do
    x_includeSect__161(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__162(rest, acc, stack, context, line, offset) do
    x_includeSect__160(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__161(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__163(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__161(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__163(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__158(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__164(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__159(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__165(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__166(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__165(rest, acc, stack, context, line, offset) do
    x_includeSect__164(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__166(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__168(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__166(rest, acc, stack, context, line, offset) do
    x_includeSect__167(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__168(rest, acc, stack, context, line, offset) do
    x_includeSect__166(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__167(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__169(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__167(rest, acc, stack, context, line, offset) do
    x_includeSect__164(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__169(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__158(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__158(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__170(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__170(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__171(
      rest,
      [PublicID: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__171(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__148(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__172(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__149(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__173(rest, acc, stack, context, line, offset) do
    x_includeSect__218(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__175(rest, acc, stack, context, line, offset) do
    x_includeSect__176(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__176(
         <<"PUBLIC", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__177(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__176(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__177(rest, acc, stack, context, line, offset) do
    x_includeSect__178(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__178(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__179(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__178(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__179(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__181(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__179(rest, acc, stack, context, line, offset) do
    x_includeSect__180(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__181(rest, acc, stack, context, line, offset) do
    x_includeSect__179(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__180(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__182(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__182(rest, acc, stack, context, line, offset) do
    x_includeSect__183(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__183(rest, acc, stack, context, line, offset) do
    x_includeSect__191(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__185(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__186(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__185(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__186(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__188(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__186(rest, acc, stack, context, line, offset) do
    x_includeSect__187(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__188(rest, acc, stack, context, line, offset) do
    x_includeSect__186(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__187(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__189(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__187(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__189(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__184(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__190(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__185(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__191(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__192(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__191(rest, acc, stack, context, line, offset) do
    x_includeSect__190(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__192(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__194(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__192(rest, acc, stack, context, line, offset) do
    x_includeSect__193(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__194(rest, acc, stack, context, line, offset) do
    x_includeSect__192(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__193(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__195(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__193(rest, acc, stack, context, line, offset) do
    x_includeSect__190(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__195(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__184(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__184(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__196(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__196(rest, acc, stack, context, line, offset) do
    x_includeSect__197(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__197(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__198(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__197(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__198(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__200(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__198(rest, acc, stack, context, line, offset) do
    x_includeSect__199(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__200(rest, acc, stack, context, line, offset) do
    x_includeSect__198(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__199(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__201(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__201(rest, acc, stack, context, line, offset) do
    x_includeSect__202(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__202(rest, acc, stack, context, line, offset) do
    x_includeSect__210(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__204(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__205(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__204(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__205(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__207(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__205(rest, acc, stack, context, line, offset) do
    x_includeSect__206(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__207(rest, acc, stack, context, line, offset) do
    x_includeSect__205(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__206(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__208(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__206(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__208(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__203(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__209(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__204(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__210(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__211(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__210(rest, acc, stack, context, line, offset) do
    x_includeSect__209(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__211(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__213(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__211(rest, acc, stack, context, line, offset) do
    x_includeSect__212(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__213(rest, acc, stack, context, line, offset) do
    x_includeSect__211(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__212(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__214(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__212(rest, acc, stack, context, line, offset) do
    x_includeSect__209(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__214(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__203(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__203(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__215(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__215(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__216(
      rest,
      [public: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__216(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__174(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__217(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__175(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__218(rest, acc, stack, context, line, offset) do
    x_includeSect__219(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__219(
         <<"SYSTEM", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__220(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__219(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__217(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__220(rest, acc, stack, context, line, offset) do
    x_includeSect__221(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__221(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__222(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__221(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__217(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__222(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__224(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__222(rest, acc, stack, context, line, offset) do
    x_includeSect__223(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__224(rest, acc, stack, context, line, offset) do
    x_includeSect__222(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__223(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__225(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__225(rest, acc, stack, context, line, offset) do
    x_includeSect__226(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__226(rest, acc, stack, context, line, offset) do
    x_includeSect__234(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__228(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__229(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__228(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__217(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__229(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__231(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__229(rest, acc, stack, context, line, offset) do
    x_includeSect__230(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__231(rest, acc, stack, context, line, offset) do
    x_includeSect__229(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__230(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__232(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__230(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__217(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__232(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__227(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__233(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__228(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__234(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__235(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__234(rest, acc, stack, context, line, offset) do
    x_includeSect__233(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__235(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__237(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__235(rest, acc, stack, context, line, offset) do
    x_includeSect__236(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__237(rest, acc, stack, context, line, offset) do
    x_includeSect__235(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__236(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__238(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__236(rest, acc, stack, context, line, offset) do
    x_includeSect__233(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__238(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__227(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__227(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__239(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__239(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__240(
      rest,
      [system: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__240(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__174(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__174(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__148(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__148(rest, acc, stack, context, line, offset) do
    x_includeSect__241(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__241(rest, acc, stack, context, line, offset) do
    x_includeSect__245(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__243(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__242(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__244(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__243(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__245(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__246(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__245(rest, acc, stack, context, line, offset) do
    x_includeSect__244(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__246(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__248(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__246(rest, acc, stack, context, line, offset) do
    x_includeSect__247(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__248(rest, acc, stack, context, line, offset) do
    x_includeSect__246(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__247(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__242(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__242(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__249(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__249(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__250(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__249(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__127(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__250(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__251(
      rest,
      [notation_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__251(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__252(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__128(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__253(rest, acc, stack, context, line, offset) do
    x_includeSect__488(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__255(rest, acc, stack, context, line, offset) do
    x_includeSect__256(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__256(
         <<"<!ENTITY", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__257(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__256(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__257(rest, acc, stack, context, line, offset) do
    x_includeSect__258(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__258(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__259(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__258(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__259(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__261(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__259(rest, acc, stack, context, line, offset) do
    x_includeSect__260(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__261(rest, acc, stack, context, line, offset) do
    x_includeSect__259(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__260(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__262(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__262(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__263(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__262(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__263(rest, acc, stack, context, line, offset) do
    x_includeSect__264(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__264(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__265(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__264(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__265(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__267(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__265(rest, acc, stack, context, line, offset) do
    x_includeSect__266(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__267(rest, acc, stack, context, line, offset) do
    x_includeSect__265(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__266(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__268(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__268(rest, acc, stack, context, line, offset) do
    x_includeSect__269(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__269(rest, acc, stack, context, line, offset) do
    x_includeSect__270(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__270(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__271(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__270(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__271(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__273(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__271(rest, acc, stack, context, line, offset) do
    x_includeSect__272(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__273(rest, acc, stack, context, line, offset) do
    x_includeSect__271(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__272(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__274(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__274(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__275(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__275(rest, acc, stack, context, line, offset) do
    x_includeSect__276(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__276(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__277(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__276(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__277(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__279(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__277(rest, acc, stack, context, line, offset) do
    x_includeSect__278(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__279(rest, acc, stack, context, line, offset) do
    x_includeSect__277(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__278(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__280(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__280(rest, acc, stack, context, line, offset) do
    x_includeSect__281(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__281(rest, acc, stack, context, line, offset) do
    x_includeSect__352(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__283(rest, acc, stack, context, line, offset) do
    x_includeSect__328(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__285(rest, acc, stack, context, line, offset) do
    x_includeSect__286(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__286(
         <<"PUBLIC", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__287(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__286(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__287(rest, acc, stack, context, line, offset) do
    x_includeSect__288(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__288(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__289(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__288(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__289(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__291(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__289(rest, acc, stack, context, line, offset) do
    x_includeSect__290(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__291(rest, acc, stack, context, line, offset) do
    x_includeSect__289(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__290(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__292(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__292(rest, acc, stack, context, line, offset) do
    x_includeSect__293(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__293(rest, acc, stack, context, line, offset) do
    x_includeSect__301(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__295(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__296(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__295(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__296(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__298(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__296(rest, acc, stack, context, line, offset) do
    x_includeSect__297(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__298(rest, acc, stack, context, line, offset) do
    x_includeSect__296(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__297(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__299(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__297(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__299(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__294(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__300(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__295(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__301(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__302(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__301(rest, acc, stack, context, line, offset) do
    x_includeSect__300(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__302(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__304(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__302(rest, acc, stack, context, line, offset) do
    x_includeSect__303(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__304(rest, acc, stack, context, line, offset) do
    x_includeSect__302(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__303(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__305(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__303(rest, acc, stack, context, line, offset) do
    x_includeSect__300(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__305(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__294(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__294(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__306(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__306(rest, acc, stack, context, line, offset) do
    x_includeSect__307(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__307(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__308(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__307(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__308(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__310(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__308(rest, acc, stack, context, line, offset) do
    x_includeSect__309(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__310(rest, acc, stack, context, line, offset) do
    x_includeSect__308(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__309(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__311(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__311(rest, acc, stack, context, line, offset) do
    x_includeSect__312(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__312(rest, acc, stack, context, line, offset) do
    x_includeSect__320(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__314(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__315(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__314(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__315(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__317(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__315(rest, acc, stack, context, line, offset) do
    x_includeSect__316(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__317(rest, acc, stack, context, line, offset) do
    x_includeSect__315(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__316(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__318(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__316(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__318(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__313(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__319(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__314(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__320(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__321(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__320(rest, acc, stack, context, line, offset) do
    x_includeSect__319(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__321(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__323(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__321(rest, acc, stack, context, line, offset) do
    x_includeSect__322(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__323(rest, acc, stack, context, line, offset) do
    x_includeSect__321(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__322(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__324(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__322(rest, acc, stack, context, line, offset) do
    x_includeSect__319(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__324(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__313(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__313(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__325(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__325(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__326(
      rest,
      [public: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__326(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__284(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__327(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__285(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__328(rest, acc, stack, context, line, offset) do
    x_includeSect__329(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__329(
         <<"SYSTEM", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__330(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__329(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__327(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__330(rest, acc, stack, context, line, offset) do
    x_includeSect__331(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__331(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__332(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__331(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__327(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__332(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__334(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__332(rest, acc, stack, context, line, offset) do
    x_includeSect__333(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__334(rest, acc, stack, context, line, offset) do
    x_includeSect__332(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__333(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__335(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__335(rest, acc, stack, context, line, offset) do
    x_includeSect__336(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__336(rest, acc, stack, context, line, offset) do
    x_includeSect__344(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__338(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__339(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__338(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__327(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__339(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__341(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__339(rest, acc, stack, context, line, offset) do
    x_includeSect__340(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__341(rest, acc, stack, context, line, offset) do
    x_includeSect__339(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__340(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__342(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__340(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__327(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__342(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__337(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__343(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__338(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__344(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__345(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__344(rest, acc, stack, context, line, offset) do
    x_includeSect__343(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__345(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__347(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__345(rest, acc, stack, context, line, offset) do
    x_includeSect__346(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__347(rest, acc, stack, context, line, offset) do
    x_includeSect__345(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__346(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__348(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__346(rest, acc, stack, context, line, offset) do
    x_includeSect__343(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__348(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__337(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__337(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__349(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__349(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__350(
      rest,
      [system: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__350(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__284(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__284(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__282(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__351(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__283(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__352(rest, acc, stack, context, line, offset) do
    x_includeSect__353(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__353(rest, acc, stack, context, line, offset) do
    x_includeSect__354(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__354(rest, acc, stack, context, line, offset) do
    x_includeSect__415(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__356(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__357(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__356(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__351(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__357(rest, acc, stack, context, line, offset) do
    x_includeSect__359(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__359(rest, acc, stack, context, line, offset) do
    x_includeSect__410(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__361(rest, acc, stack, context, line, offset) do
    x_includeSect__384(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__363(rest, acc, stack, context, line, offset) do
    x_includeSect__364(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__364(rest, acc, stack, context, line, offset) do
    x_includeSect__373(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__366(rest, acc, stack, context, line, offset) do
    x_includeSect__367(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__367(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__368(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__367(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__358(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__368(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__370(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__368(rest, acc, stack, context, line, offset) do
    x_includeSect__369(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__370(rest, acc, stack, context, line, offset) do
    x_includeSect__368(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__369(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__371(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__371(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__365(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__372(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__366(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__373(rest, acc, stack, context, line, offset) do
    x_includeSect__374(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__374(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__375(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__374(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__372(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__375(rest, acc, stack, context, line, offset) do
    x_includeSect__376(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__376(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__377(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__376(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__372(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__377(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__379(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__377(rest, acc, stack, context, line, offset) do
    x_includeSect__378(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__379(rest, acc, stack, context, line, offset) do
    x_includeSect__377(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__378(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__380(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__380(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__381(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__381(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__365(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__365(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__382(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__382(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__362(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__383(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__363(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__384(rest, acc, stack, context, line, offset) do
    x_includeSect__385(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__385(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__386(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__385(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__383(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__386(rest, acc, stack, context, line, offset) do
    x_includeSect__387(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__387(rest, acc, stack, context, line, offset) do
    x_includeSect__388(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__388(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__389(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__388(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__383(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__389(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__391(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__389(rest, acc, stack, context, line, offset) do
    x_includeSect__390(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__391(rest, acc, stack, context, line, offset) do
    x_includeSect__389(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__390(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__392(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__392(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__393(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__393(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__394(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__393(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__383(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__394(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__395(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__395(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__362(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__362(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__360(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__396(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__361(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__397(rest, acc, stack, context, line, offset) do
    x_includeSect__398(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__398(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__399(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__398(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__396(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__399(rest, acc, stack, context, line, offset) do
    x_includeSect__400(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__400(rest, acc, stack, context, line, offset) do
    x_includeSect__401(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__401(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__402(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__401(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__396(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__402(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__404(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__402(rest, acc, stack, context, line, offset) do
    x_includeSect__403(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__404(rest, acc, stack, context, line, offset) do
    x_includeSect__402(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__403(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__405(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__405(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__406(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__406(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__407(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__406(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__396(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__407(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__408(
      rest,
      [PEReference: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__408(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__360(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__409(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__397(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__410(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 37 and x0 !== 38 and x0 !== 39 do
    x_includeSect__411(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__410(rest, acc, stack, context, line, offset) do
    x_includeSect__409(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__411(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__360(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__358(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__412(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__360(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__359(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__412(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__413(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__412(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__351(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__413(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__414(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__356(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__415(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__416(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__415(rest, acc, stack, context, line, offset) do
    x_includeSect__414(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__416(rest, acc, stack, context, line, offset) do
    x_includeSect__418(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__418(rest, acc, stack, context, line, offset) do
    x_includeSect__469(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__420(rest, acc, stack, context, line, offset) do
    x_includeSect__443(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__422(rest, acc, stack, context, line, offset) do
    x_includeSect__423(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__423(rest, acc, stack, context, line, offset) do
    x_includeSect__432(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__425(rest, acc, stack, context, line, offset) do
    x_includeSect__426(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__426(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__427(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__426(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__417(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__427(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__429(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__427(rest, acc, stack, context, line, offset) do
    x_includeSect__428(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__429(rest, acc, stack, context, line, offset) do
    x_includeSect__427(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__428(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__430(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__430(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__424(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__431(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__425(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__432(rest, acc, stack, context, line, offset) do
    x_includeSect__433(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__433(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__434(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__433(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__431(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__434(rest, acc, stack, context, line, offset) do
    x_includeSect__435(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__435(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__436(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__435(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__431(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__436(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__438(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__436(rest, acc, stack, context, line, offset) do
    x_includeSect__437(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__438(rest, acc, stack, context, line, offset) do
    x_includeSect__436(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__437(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__439(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__439(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__440(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__440(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__424(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__424(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__441(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__441(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__421(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__442(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__422(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__443(rest, acc, stack, context, line, offset) do
    x_includeSect__444(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__444(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__445(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__444(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__442(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__445(rest, acc, stack, context, line, offset) do
    x_includeSect__446(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__446(rest, acc, stack, context, line, offset) do
    x_includeSect__447(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__447(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__448(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__447(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__442(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__448(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__450(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__448(rest, acc, stack, context, line, offset) do
    x_includeSect__449(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__450(rest, acc, stack, context, line, offset) do
    x_includeSect__448(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__449(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__451(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__451(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__452(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__452(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__453(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__452(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__442(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__453(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__454(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__454(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__421(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__421(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__419(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__455(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__420(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__456(rest, acc, stack, context, line, offset) do
    x_includeSect__457(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__457(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__458(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__457(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__455(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__458(rest, acc, stack, context, line, offset) do
    x_includeSect__459(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__459(rest, acc, stack, context, line, offset) do
    x_includeSect__460(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__460(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__461(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__460(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__455(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__461(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__463(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__461(rest, acc, stack, context, line, offset) do
    x_includeSect__462(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__463(rest, acc, stack, context, line, offset) do
    x_includeSect__461(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__462(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__464(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__464(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__465(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__465(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__466(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__465(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__455(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__466(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__467(
      rest,
      [PEReference: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__467(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__419(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__468(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__456(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__469(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 37 and x0 !== 38 and x0 !== 34 do
    x_includeSect__470(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__469(rest, acc, stack, context, line, offset) do
    x_includeSect__468(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__470(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__419(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__417(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__471(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__419(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__418(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__471(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__472(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__471(rest, acc, stack, context, line, offset) do
    x_includeSect__414(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__472(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__355(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__473(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__473(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__474(
      rest,
      [
        entity_value:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__474(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__282(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__282(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__475(
      rest,
      [PEDef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__475(rest, acc, stack, context, line, offset) do
    x_includeSect__476(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__476(rest, acc, stack, context, line, offset) do
    x_includeSect__480(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__478(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__477(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__479(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__478(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__480(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__481(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__480(rest, acc, stack, context, line, offset) do
    x_includeSect__479(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__481(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__483(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__481(rest, acc, stack, context, line, offset) do
    x_includeSect__482(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__483(rest, acc, stack, context, line, offset) do
    x_includeSect__481(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__482(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__477(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__477(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__484(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__484(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__485(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__484(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__252(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__485(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__486(
      rest,
      [parameter_entity_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__486(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__254(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__487(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__255(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__488(rest, acc, stack, context, line, offset) do
    x_includeSect__489(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__489(
         <<"<!ENTITY", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__490(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__489(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__490(rest, acc, stack, context, line, offset) do
    x_includeSect__491(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__491(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__492(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__491(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__492(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__494(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__492(rest, acc, stack, context, line, offset) do
    x_includeSect__493(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__494(rest, acc, stack, context, line, offset) do
    x_includeSect__492(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__493(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__495(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__495(rest, acc, stack, context, line, offset) do
    x_includeSect__496(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__496(rest, acc, stack, context, line, offset) do
    x_includeSect__497(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__497(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__498(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__497(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__498(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__500(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__498(rest, acc, stack, context, line, offset) do
    x_includeSect__499(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__500(rest, acc, stack, context, line, offset) do
    x_includeSect__498(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__499(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__501(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__501(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__502(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__502(rest, acc, stack, context, line, offset) do
    x_includeSect__503(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__503(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__504(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__503(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__504(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__506(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__504(rest, acc, stack, context, line, offset) do
    x_includeSect__505(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__506(rest, acc, stack, context, line, offset) do
    x_includeSect__504(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__505(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__507(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__507(rest, acc, stack, context, line, offset) do
    x_includeSect__602(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__509(rest, acc, stack, context, line, offset) do
    x_includeSect__554(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__511(rest, acc, stack, context, line, offset) do
    x_includeSect__512(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__512(
         <<"PUBLIC", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__513(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__512(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__513(rest, acc, stack, context, line, offset) do
    x_includeSect__514(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__514(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__515(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__514(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__515(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__517(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__515(rest, acc, stack, context, line, offset) do
    x_includeSect__516(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__517(rest, acc, stack, context, line, offset) do
    x_includeSect__515(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__516(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__518(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__518(rest, acc, stack, context, line, offset) do
    x_includeSect__519(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__519(rest, acc, stack, context, line, offset) do
    x_includeSect__527(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__521(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__522(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__521(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__522(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 40 or
              x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or x0 === 58 or
              x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or x0 === 35 or
              x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__524(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__522(rest, acc, stack, context, line, offset) do
    x_includeSect__523(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__524(rest, acc, stack, context, line, offset) do
    x_includeSect__522(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__523(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__525(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__523(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__525(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__520(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__526(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__521(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__527(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__528(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__527(rest, acc, stack, context, line, offset) do
    x_includeSect__526(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__528(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 13 or x0 === 10 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 65 and x0 <= 90) or (x0 >= 48 and x0 <= 57) or x0 === 45 or x0 === 39 or
              x0 === 40 or x0 === 41 or x0 === 43 or x0 === 44 or x0 === 46 or x0 === 47 or
              x0 === 58 or x0 === 61 or x0 === 63 or x0 === 59 or x0 === 33 or x0 === 42 or
              x0 === 35 or x0 === 64 or x0 === 36 or x0 === 95 or x0 === 37 do
    x_includeSect__530(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__528(rest, acc, stack, context, line, offset) do
    x_includeSect__529(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__530(rest, acc, stack, context, line, offset) do
    x_includeSect__528(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__529(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__531(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__529(rest, acc, stack, context, line, offset) do
    x_includeSect__526(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__531(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__520(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__520(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__532(
      rest,
      [pubid_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__532(rest, acc, stack, context, line, offset) do
    x_includeSect__533(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__533(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__534(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__533(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__534(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__536(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__534(rest, acc, stack, context, line, offset) do
    x_includeSect__535(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__536(rest, acc, stack, context, line, offset) do
    x_includeSect__534(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__535(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__537(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__537(rest, acc, stack, context, line, offset) do
    x_includeSect__538(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__538(rest, acc, stack, context, line, offset) do
    x_includeSect__546(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__540(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__541(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__540(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__541(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__543(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__541(rest, acc, stack, context, line, offset) do
    x_includeSect__542(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__543(rest, acc, stack, context, line, offset) do
    x_includeSect__541(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__542(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__544(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__542(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__544(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__539(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__545(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__540(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__546(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__547(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__546(rest, acc, stack, context, line, offset) do
    x_includeSect__545(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__547(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__549(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__547(rest, acc, stack, context, line, offset) do
    x_includeSect__548(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__549(rest, acc, stack, context, line, offset) do
    x_includeSect__547(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__548(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__550(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__548(rest, acc, stack, context, line, offset) do
    x_includeSect__545(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__550(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__539(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__539(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__551(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__551(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__552(
      rest,
      [public: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__552(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__510(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__553(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__511(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__554(rest, acc, stack, context, line, offset) do
    x_includeSect__555(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__555(
         <<"SYSTEM", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__556(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__555(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__553(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__556(rest, acc, stack, context, line, offset) do
    x_includeSect__557(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__557(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__558(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__557(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__553(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__558(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__560(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__558(rest, acc, stack, context, line, offset) do
    x_includeSect__559(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__560(rest, acc, stack, context, line, offset) do
    x_includeSect__558(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__559(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__561(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__561(rest, acc, stack, context, line, offset) do
    x_includeSect__562(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__562(rest, acc, stack, context, line, offset) do
    x_includeSect__570(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__564(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__565(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__564(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__553(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__565(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 39 do
    x_includeSect__567(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__565(rest, acc, stack, context, line, offset) do
    x_includeSect__566(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__567(rest, acc, stack, context, line, offset) do
    x_includeSect__565(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__566(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__568(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__566(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__553(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__568(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__563(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__569(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__564(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__570(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__571(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__570(rest, acc, stack, context, line, offset) do
    x_includeSect__569(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__571(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 34 do
    x_includeSect__573(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__571(rest, acc, stack, context, line, offset) do
    x_includeSect__572(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__573(rest, acc, stack, context, line, offset) do
    x_includeSect__571(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__572(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__574(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__572(rest, acc, stack, context, line, offset) do
    x_includeSect__569(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__574(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__563(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__563(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__575(
      rest,
      [system_literal: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__575(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__576(
      rest,
      [system: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__576(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__510(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__510(rest, acc, stack, context, line, offset) do
    x_includeSect__580(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__578(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__577(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__579(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__578(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__580(rest, acc, stack, context, line, offset) do
    x_includeSect__581(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__581(rest, acc, stack, context, line, offset) do
    x_includeSect__582(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__582(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__583(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__582(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__579(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__583(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__585(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__583(rest, acc, stack, context, line, offset) do
    x_includeSect__584(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__585(rest, acc, stack, context, line, offset) do
    x_includeSect__583(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__584(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__586(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__586(
         <<"NDATA", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__587(rest, [] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp x_includeSect__586(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__579(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__587(rest, acc, stack, context, line, offset) do
    x_includeSect__588(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__588(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__589(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__588(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__579(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__589(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__591(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__589(rest, acc, stack, context, line, offset) do
    x_includeSect__590(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__591(rest, acc, stack, context, line, offset) do
    x_includeSect__589(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__590(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__592(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__592(rest, acc, stack, context, line, offset) do
    x_includeSect__593(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__593(rest, acc, stack, context, line, offset) do
    x_includeSect__594(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__594(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__595(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__594(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__579(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__595(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__597(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__595(rest, acc, stack, context, line, offset) do
    x_includeSect__596(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__597(rest, acc, stack, context, line, offset) do
    x_includeSect__595(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__596(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__598(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__598(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__599(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__599(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__600(
      rest,
      [NDataDecl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__600(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__577(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__577(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__508(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__601(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__509(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__602(rest, acc, stack, context, line, offset) do
    x_includeSect__603(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__603(rest, acc, stack, context, line, offset) do
    x_includeSect__604(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__604(rest, acc, stack, context, line, offset) do
    x_includeSect__665(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__606(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__607(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__606(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__601(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__607(rest, acc, stack, context, line, offset) do
    x_includeSect__609(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__609(rest, acc, stack, context, line, offset) do
    x_includeSect__660(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__611(rest, acc, stack, context, line, offset) do
    x_includeSect__634(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__613(rest, acc, stack, context, line, offset) do
    x_includeSect__614(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__614(rest, acc, stack, context, line, offset) do
    x_includeSect__623(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__616(rest, acc, stack, context, line, offset) do
    x_includeSect__617(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__617(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__618(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__617(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__608(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__618(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__620(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__618(rest, acc, stack, context, line, offset) do
    x_includeSect__619(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__620(rest, acc, stack, context, line, offset) do
    x_includeSect__618(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__619(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__621(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__621(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__615(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__622(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__616(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__623(rest, acc, stack, context, line, offset) do
    x_includeSect__624(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__624(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__625(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__624(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__622(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__625(rest, acc, stack, context, line, offset) do
    x_includeSect__626(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__626(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__627(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__626(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__622(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__627(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__629(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__627(rest, acc, stack, context, line, offset) do
    x_includeSect__628(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__629(rest, acc, stack, context, line, offset) do
    x_includeSect__627(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__628(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__630(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__630(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__631(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__631(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__615(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__615(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__632(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__632(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__612(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__633(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__613(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__634(rest, acc, stack, context, line, offset) do
    x_includeSect__635(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__635(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__636(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__635(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__633(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__636(rest, acc, stack, context, line, offset) do
    x_includeSect__637(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__637(rest, acc, stack, context, line, offset) do
    x_includeSect__638(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__638(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__639(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__638(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__633(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__639(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__641(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__639(rest, acc, stack, context, line, offset) do
    x_includeSect__640(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__641(rest, acc, stack, context, line, offset) do
    x_includeSect__639(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__640(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__642(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__642(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__643(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__643(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__644(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__643(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__633(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__644(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__645(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__645(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__612(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__612(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__610(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__646(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__611(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__647(rest, acc, stack, context, line, offset) do
    x_includeSect__648(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__648(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__649(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__648(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__646(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__649(rest, acc, stack, context, line, offset) do
    x_includeSect__650(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__650(rest, acc, stack, context, line, offset) do
    x_includeSect__651(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__651(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__652(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__651(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__646(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__652(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__654(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__652(rest, acc, stack, context, line, offset) do
    x_includeSect__653(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__654(rest, acc, stack, context, line, offset) do
    x_includeSect__652(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__653(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__655(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__655(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__656(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__656(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__657(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__656(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__646(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__657(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__658(
      rest,
      [PEReference: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__658(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__610(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__659(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__647(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__660(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 37 and x0 !== 38 and x0 !== 39 do
    x_includeSect__661(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__660(rest, acc, stack, context, line, offset) do
    x_includeSect__659(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__661(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__610(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__608(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__662(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__610(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__609(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__662(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__663(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__662(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__601(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__663(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__605(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__664(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__606(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__665(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__666(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__665(rest, acc, stack, context, line, offset) do
    x_includeSect__664(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__666(rest, acc, stack, context, line, offset) do
    x_includeSect__668(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__668(rest, acc, stack, context, line, offset) do
    x_includeSect__719(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__670(rest, acc, stack, context, line, offset) do
    x_includeSect__693(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__672(rest, acc, stack, context, line, offset) do
    x_includeSect__673(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__673(rest, acc, stack, context, line, offset) do
    x_includeSect__682(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__675(rest, acc, stack, context, line, offset) do
    x_includeSect__676(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__676(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__677(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__676(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__667(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__677(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__679(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__677(rest, acc, stack, context, line, offset) do
    x_includeSect__678(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__679(rest, acc, stack, context, line, offset) do
    x_includeSect__677(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__678(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__680(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__680(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__674(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__681(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__675(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__682(rest, acc, stack, context, line, offset) do
    x_includeSect__683(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__683(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__684(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__683(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__681(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__684(rest, acc, stack, context, line, offset) do
    x_includeSect__685(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__685(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__686(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__685(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__681(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__686(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__688(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__686(rest, acc, stack, context, line, offset) do
    x_includeSect__687(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__688(rest, acc, stack, context, line, offset) do
    x_includeSect__686(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__687(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__689(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__689(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__690(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__690(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__674(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__674(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__691(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__691(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__671(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__692(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__672(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__693(rest, acc, stack, context, line, offset) do
    x_includeSect__694(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__694(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__695(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__694(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__692(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__695(rest, acc, stack, context, line, offset) do
    x_includeSect__696(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__696(rest, acc, stack, context, line, offset) do
    x_includeSect__697(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__697(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__698(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__697(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__692(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__698(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__700(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__698(rest, acc, stack, context, line, offset) do
    x_includeSect__699(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__700(rest, acc, stack, context, line, offset) do
    x_includeSect__698(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__699(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__701(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__701(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__702(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__702(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__703(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__702(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__692(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__703(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__704(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__704(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__671(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__671(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__669(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__705(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__670(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__706(rest, acc, stack, context, line, offset) do
    x_includeSect__707(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__707(<<"%", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__708(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__707(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__705(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__708(rest, acc, stack, context, line, offset) do
    x_includeSect__709(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__709(rest, acc, stack, context, line, offset) do
    x_includeSect__710(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__710(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__711(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__710(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__705(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__711(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__713(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__711(rest, acc, stack, context, line, offset) do
    x_includeSect__712(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__713(rest, acc, stack, context, line, offset) do
    x_includeSect__711(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__712(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__714(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__714(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__715(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__715(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__716(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__715(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__705(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__716(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__717(
      rest,
      [PEReference: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__717(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__669(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__718(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__706(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__719(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 37 and x0 !== 38 and x0 !== 34 do
    x_includeSect__720(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__719(rest, acc, stack, context, line, offset) do
    x_includeSect__718(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__720(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__669(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__667(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__721(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__669(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__668(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__721(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__722(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__721(rest, acc, stack, context, line, offset) do
    x_includeSect__664(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__722(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__605(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__605(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__723(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__723(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__724(
      rest,
      [
        entity_value:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__724(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__508(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__508(rest, acc, stack, context, line, offset) do
    x_includeSect__725(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__725(rest, acc, stack, context, line, offset) do
    x_includeSect__729(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__727(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__726(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__728(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__727(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__729(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__730(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__729(rest, acc, stack, context, line, offset) do
    x_includeSect__728(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__730(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__732(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__730(rest, acc, stack, context, line, offset) do
    x_includeSect__731(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__732(rest, acc, stack, context, line, offset) do
    x_includeSect__730(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__731(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__726(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__726(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__733(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__733(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__734(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__733(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__487(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__734(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__735(
      rest,
      [entity_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__735(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__254(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__254(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__736(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__253(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__737(rest, acc, stack, context, line, offset) do
    x_includeSect__738(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__738(
         <<"<!ATTLIST", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__739(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp x_includeSect__738(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__736(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__739(rest, acc, stack, context, line, offset) do
    x_includeSect__740(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__740(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__741(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__740(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__736(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__741(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__743(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__741(rest, acc, stack, context, line, offset) do
    x_includeSect__742(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__743(rest, acc, stack, context, line, offset) do
    x_includeSect__741(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__742(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__744(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__744(rest, acc, stack, context, line, offset) do
    x_includeSect__745(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__745(rest, acc, stack, context, line, offset) do
    x_includeSect__746(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__746(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__747(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__746(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__736(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__747(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__749(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__747(rest, acc, stack, context, line, offset) do
    x_includeSect__748(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__749(rest, acc, stack, context, line, offset) do
    x_includeSect__747(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__748(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__750(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__750(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__751(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__751(rest, acc, stack, context, line, offset) do
    x_includeSect__753(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__753(rest, acc, stack, context, line, offset) do
    x_includeSect__754(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__754(rest, acc, stack, context, line, offset) do
    x_includeSect__755(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__755(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__756(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__755(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__756(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__758(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__756(rest, acc, stack, context, line, offset) do
    x_includeSect__757(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__758(rest, acc, stack, context, line, offset) do
    x_includeSect__756(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__757(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__759(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__759(rest, acc, stack, context, line, offset) do
    x_includeSect__760(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__760(rest, acc, stack, context, line, offset) do
    x_includeSect__761(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__761(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__762(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__761(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__762(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__764(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__762(rest, acc, stack, context, line, offset) do
    x_includeSect__763(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__764(rest, acc, stack, context, line, offset) do
    x_includeSect__762(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__763(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__765(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__765(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__766(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__766(rest, acc, stack, context, line, offset) do
    x_includeSect__767(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__767(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__768(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__767(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__768(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__770(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__768(rest, acc, stack, context, line, offset) do
    x_includeSect__769(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__770(rest, acc, stack, context, line, offset) do
    x_includeSect__768(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__769(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__771(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__771(rest, acc, stack, context, line, offset) do
    x_includeSect__772(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__772(rest, acc, stack, context, line, offset) do
    x_includeSect__903(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__774(rest, acc, stack, context, line, offset) do
    x_includeSect__836(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__776(rest, acc, stack, context, line, offset) do
    x_includeSect__777(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__777(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__778(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__777(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__778(rest, acc, stack, context, line, offset) do
    x_includeSect__779(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__779(rest, acc, stack, context, line, offset) do
    x_includeSect__783(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__781(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__780(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__782(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__781(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__783(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__784(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__783(rest, acc, stack, context, line, offset) do
    x_includeSect__782(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__784(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__786(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__784(rest, acc, stack, context, line, offset) do
    x_includeSect__785(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__786(rest, acc, stack, context, line, offset) do
    x_includeSect__784(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__785(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__780(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__780(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__787(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__787(rest, acc, stack, context, line, offset) do
    x_includeSect__788(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__788(rest, acc, stack, context, line, offset) do
    x_includeSect__789(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__789(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__790(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__789(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__790(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__792(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__790(rest, acc, stack, context, line, offset) do
    x_includeSect__791(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__792(rest, acc, stack, context, line, offset) do
    x_includeSect__790(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__791(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__793(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__793(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__794(
      rest,
      [
        nmtoken:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__794(rest, acc, stack, context, line, offset) do
    x_includeSect__796(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__796(rest, acc, stack, context, line, offset) do
    x_includeSect__797(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__797(rest, acc, stack, context, line, offset) do
    x_includeSect__801(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__799(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__798(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__800(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__799(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__801(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__802(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__801(rest, acc, stack, context, line, offset) do
    x_includeSect__800(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__802(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__804(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__802(rest, acc, stack, context, line, offset) do
    x_includeSect__803(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__804(rest, acc, stack, context, line, offset) do
    x_includeSect__802(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__803(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__798(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__798(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__805(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__805(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__806(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__805(rest, acc, stack, context, line, offset) do
    x_includeSect__795(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__806(rest, acc, stack, context, line, offset) do
    x_includeSect__807(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__807(rest, acc, stack, context, line, offset) do
    x_includeSect__811(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__809(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__808(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__810(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__809(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__811(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__812(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__811(rest, acc, stack, context, line, offset) do
    x_includeSect__810(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__812(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__814(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__812(rest, acc, stack, context, line, offset) do
    x_includeSect__813(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__814(rest, acc, stack, context, line, offset) do
    x_includeSect__812(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__813(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__808(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__808(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__815(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__815(rest, acc, stack, context, line, offset) do
    x_includeSect__816(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__816(rest, acc, stack, context, line, offset) do
    x_includeSect__817(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__817(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__818(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__817(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__795(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__818(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__820(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__818(rest, acc, stack, context, line, offset) do
    x_includeSect__819(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__820(rest, acc, stack, context, line, offset) do
    x_includeSect__818(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__819(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__821(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__821(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__822(
      rest,
      [
        nmtoken:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__795(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__823(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__822(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__796(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__823(rest, acc, stack, context, line, offset) do
    x_includeSect__824(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__824(rest, acc, stack, context, line, offset) do
    x_includeSect__828(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__826(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__825(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__827(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__826(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__828(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__829(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__828(rest, acc, stack, context, line, offset) do
    x_includeSect__827(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__829(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__831(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__829(rest, acc, stack, context, line, offset) do
    x_includeSect__830(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__831(rest, acc, stack, context, line, offset) do
    x_includeSect__829(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__830(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__825(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__825(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__832(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__832(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__833(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__832(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__833(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__834(
      rest,
      [enumeration: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__834(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__775(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__835(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__776(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__836(rest, acc, stack, context, line, offset) do
    x_includeSect__837(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__837(
         <<"NOTATION", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__838(rest, [] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__837(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__835(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__838(rest, acc, stack, context, line, offset) do
    x_includeSect__839(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__839(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__840(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__839(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__835(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__840(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__842(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__840(rest, acc, stack, context, line, offset) do
    x_includeSect__841(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__842(rest, acc, stack, context, line, offset) do
    x_includeSect__840(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__841(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__843(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__843(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__844(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__843(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__835(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__844(rest, acc, stack, context, line, offset) do
    x_includeSect__845(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__845(rest, acc, stack, context, line, offset) do
    x_includeSect__849(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__847(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__846(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__848(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__847(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__849(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__850(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__849(rest, acc, stack, context, line, offset) do
    x_includeSect__848(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__850(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__852(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__850(rest, acc, stack, context, line, offset) do
    x_includeSect__851(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__852(rest, acc, stack, context, line, offset) do
    x_includeSect__850(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__851(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__846(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__846(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__853(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__853(rest, acc, stack, context, line, offset) do
    x_includeSect__854(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__854(rest, acc, stack, context, line, offset) do
    x_includeSect__855(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__855(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__856(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__855(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__835(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__856(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__858(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__856(rest, acc, stack, context, line, offset) do
    x_includeSect__857(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__858(rest, acc, stack, context, line, offset) do
    x_includeSect__856(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__857(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__859(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__859(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__860(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__860(rest, acc, stack, context, line, offset) do
    x_includeSect__862(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__862(rest, acc, stack, context, line, offset) do
    x_includeSect__863(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__863(rest, acc, stack, context, line, offset) do
    x_includeSect__867(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__865(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__864(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__866(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__865(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__867(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__868(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__867(rest, acc, stack, context, line, offset) do
    x_includeSect__866(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__868(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__870(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__868(rest, acc, stack, context, line, offset) do
    x_includeSect__869(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__870(rest, acc, stack, context, line, offset) do
    x_includeSect__868(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__869(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__864(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__864(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__871(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__864(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__861(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__871(rest, acc, stack, context, line, offset) do
    x_includeSect__875(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__873(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__872(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__874(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__873(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__875(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__876(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__875(rest, acc, stack, context, line, offset) do
    x_includeSect__874(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__876(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__878(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__876(rest, acc, stack, context, line, offset) do
    x_includeSect__877(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__878(rest, acc, stack, context, line, offset) do
    x_includeSect__876(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__877(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__872(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__872(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__879(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__879(rest, acc, stack, context, line, offset) do
    x_includeSect__880(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__880(rest, acc, stack, context, line, offset) do
    x_includeSect__881(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__881(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__882(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__881(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__861(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__882(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__884(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__882(rest, acc, stack, context, line, offset) do
    x_includeSect__883(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__884(rest, acc, stack, context, line, offset) do
    x_includeSect__882(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__883(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__885(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__885(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__886(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__861(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__887(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__886(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__862(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__887(rest, acc, stack, context, line, offset) do
    x_includeSect__888(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__888(rest, acc, stack, context, line, offset) do
    x_includeSect__892(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__890(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__889(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__891(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__890(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__892(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__893(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__892(rest, acc, stack, context, line, offset) do
    x_includeSect__891(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__893(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__895(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__893(rest, acc, stack, context, line, offset) do
    x_includeSect__894(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__895(rest, acc, stack, context, line, offset) do
    x_includeSect__893(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__894(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__889(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__889(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__896(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__896(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__897(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__896(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__835(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__897(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__898(
      rest,
      [notation: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__898(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__775(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__775(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__773(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__899(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__774(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__900(<<"ID", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__901(rest, [:ID] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__900(
         <<"IDREF", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:IDREF] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp x_includeSect__900(
         <<"IDREFS", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:IDREFS] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__900(
         <<"ENTITY", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:ENTITY] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__900(
         <<"ENTITIES", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:ENTITIES] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__900(
         <<"NMTOKEN", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:NMTOKEN] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp x_includeSect__900(
         <<"NMTOKENS", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__901(rest, [:NMTOKENS] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__900(rest, acc, stack, context, line, offset) do
    x_includeSect__899(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__901(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__773(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__902(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__900(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__903(
         <<"CDATA", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__904(rest, [:string] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp x_includeSect__903(rest, acc, stack, context, line, offset) do
    x_includeSect__902(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__904(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__773(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__773(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__905(
      rest,
      [
        type:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__905(rest, acc, stack, context, line, offset) do
    x_includeSect__906(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__906(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__907(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__906(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__907(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__909(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__907(rest, acc, stack, context, line, offset) do
    x_includeSect__908(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__909(rest, acc, stack, context, line, offset) do
    x_includeSect__907(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__908(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__910(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__910(rest, acc, stack, context, line, offset) do
    x_includeSect__911(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__911(rest, acc, stack, context, line, offset) do
    x_includeSect__1054(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__913(rest, acc, stack, context, line, offset) do
    x_includeSect__914(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__914(rest, acc, stack, context, line, offset) do
    x_includeSect__918(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__916(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__915(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__917(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__916(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__918(
         <<"#FIXED", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__919(rest, [] ++ acc, stack, context, comb__line, comb__offset + 6)
  end

  defp x_includeSect__918(rest, acc, stack, context, line, offset) do
    x_includeSect__917(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__919(rest, acc, stack, context, line, offset) do
    x_includeSect__920(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__920(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__921(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__920(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__917(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__921(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__923(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__921(rest, acc, stack, context, line, offset) do
    x_includeSect__922(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__923(rest, acc, stack, context, line, offset) do
    x_includeSect__921(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__922(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__924(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__924(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__915(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__915(rest, acc, stack, context, line, offset) do
    x_includeSect__925(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__925(rest, acc, stack, context, line, offset) do
    x_includeSect__988(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__927(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__928(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__927(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__928(rest, acc, stack, context, line, offset) do
    x_includeSect__929(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__929(rest, acc, stack, context, line, offset) do
    x_includeSect__930(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__930(rest, acc, stack, context, line, offset) do
    x_includeSect__934(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__932(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__931(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__933(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__932(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__934(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 60 and x0 !== 38 and x0 !== 39 do
    x_includeSect__936(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__934(rest, acc, stack, context, line, offset) do
    x_includeSect__935(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__936(rest, acc, stack, context, line, offset) do
    x_includeSect__934(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__935(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__931(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__931(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__937(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__937(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__938(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__938(rest, acc, stack, context, line, offset) do
    x_includeSect__940(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__940(rest, acc, stack, context, line, offset) do
    x_includeSect__963(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__942(rest, acc, stack, context, line, offset) do
    x_includeSect__943(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__943(rest, acc, stack, context, line, offset) do
    x_includeSect__952(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__945(rest, acc, stack, context, line, offset) do
    x_includeSect__946(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__946(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__947(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__946(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__939(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__947(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__949(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__947(rest, acc, stack, context, line, offset) do
    x_includeSect__948(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__949(rest, acc, stack, context, line, offset) do
    x_includeSect__947(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__948(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__950(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__950(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__944(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__951(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__945(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__952(rest, acc, stack, context, line, offset) do
    x_includeSect__953(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__953(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__954(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__953(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__951(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__954(rest, acc, stack, context, line, offset) do
    x_includeSect__955(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__955(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__956(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__955(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__951(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__956(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__958(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__956(rest, acc, stack, context, line, offset) do
    x_includeSect__957(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__958(rest, acc, stack, context, line, offset) do
    x_includeSect__956(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__957(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__959(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__959(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__960(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__960(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__944(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__944(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__961(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__961(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__941(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__962(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__942(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__963(rest, acc, stack, context, line, offset) do
    x_includeSect__964(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__964(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__965(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__964(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__962(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__965(rest, acc, stack, context, line, offset) do
    x_includeSect__966(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__966(rest, acc, stack, context, line, offset) do
    x_includeSect__967(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__967(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__968(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__967(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__962(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__968(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__970(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__968(rest, acc, stack, context, line, offset) do
    x_includeSect__969(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__970(rest, acc, stack, context, line, offset) do
    x_includeSect__968(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__969(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__971(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__971(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__972(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__972(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__973(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__972(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__962(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__973(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__974(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__974(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__941(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__941(rest, acc, stack, context, line, offset) do
    x_includeSect__975(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__975(rest, acc, stack, context, line, offset) do
    x_includeSect__976(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__976(rest, acc, stack, context, line, offset) do
    x_includeSect__980(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__978(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__977(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__979(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__978(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__980(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_includeSect__982(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__980(rest, acc, stack, context, line, offset) do
    x_includeSect__981(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__982(rest, acc, stack, context, line, offset) do
    x_includeSect__980(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__981(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__977(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__977(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__983(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__983(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__984(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__939(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__985(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__984(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__940(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__985(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__986(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__985(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, _, _, acc | stack] = stack
    x_includeSect__752(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__986(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__926(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__987(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__927(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__988(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__989(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__988(rest, acc, stack, context, line, offset) do
    x_includeSect__987(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__989(rest, acc, stack, context, line, offset) do
    x_includeSect__990(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__990(rest, acc, stack, context, line, offset) do
    x_includeSect__991(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__991(rest, acc, stack, context, line, offset) do
    x_includeSect__995(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__993(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__992(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__994(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__993(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__995(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_includeSect__997(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__995(rest, acc, stack, context, line, offset) do
    x_includeSect__996(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__997(rest, acc, stack, context, line, offset) do
    x_includeSect__995(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__996(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__992(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__992(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__998(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__998(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__999(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__999(rest, acc, stack, context, line, offset) do
    x_includeSect__1001(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1001(rest, acc, stack, context, line, offset) do
    x_includeSect__1024(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1003(rest, acc, stack, context, line, offset) do
    x_includeSect__1004(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1004(rest, acc, stack, context, line, offset) do
    x_includeSect__1013(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1006(rest, acc, stack, context, line, offset) do
    x_includeSect__1007(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1007(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__1008(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1007(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_includeSect__1000(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1008(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_includeSect__1010(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1008(rest, acc, stack, context, line, offset) do
    x_includeSect__1009(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1010(rest, acc, stack, context, line, offset) do
    x_includeSect__1008(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1009(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1011(
      rest,
      [CR_hexa: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1011(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1005(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1012(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1006(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1013(rest, acc, stack, context, line, offset) do
    x_includeSect__1014(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1014(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1015(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__1014(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1012(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1015(rest, acc, stack, context, line, offset) do
    x_includeSect__1016(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1016(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__1017(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1016(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__1012(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1017(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_includeSect__1019(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1017(rest, acc, stack, context, line, offset) do
    x_includeSect__1018(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1019(rest, acc, stack, context, line, offset) do
    x_includeSect__1017(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1018(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1020(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1020(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1021(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1021(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1005(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1005(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1022(
      rest,
      [CharRef: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1022(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1002(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1023(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1003(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1024(rest, acc, stack, context, line, offset) do
    x_includeSect__1025(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1025(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1026(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1025(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1023(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1026(rest, acc, stack, context, line, offset) do
    x_includeSect__1027(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1027(rest, acc, stack, context, line, offset) do
    x_includeSect__1028(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1028(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__1029(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1028(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__1023(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1029(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__1031(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1029(rest, acc, stack, context, line, offset) do
    x_includeSect__1030(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1031(rest, acc, stack, context, line, offset) do
    x_includeSect__1029(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1030(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1032(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1032(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1033(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1033(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1034(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1033(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1023(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1034(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_includeSect__1035(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_includeSect__1035(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1002(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1002(rest, acc, stack, context, line, offset) do
    x_includeSect__1036(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1036(rest, acc, stack, context, line, offset) do
    x_includeSect__1037(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1037(rest, acc, stack, context, line, offset) do
    x_includeSect__1041(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1039(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1038(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1040(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1039(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1041(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_includeSect__1043(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1041(rest, acc, stack, context, line, offset) do
    x_includeSect__1042(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1043(rest, acc, stack, context, line, offset) do
    x_includeSect__1041(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1042(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1038(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1038(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1044(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1044(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1045(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1000(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__1046(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1045(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__1001(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__1046(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1047(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1046(rest, acc, stack, context, line, offset) do
    x_includeSect__987(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1047(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__926(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__926(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1048(
      rest,
      [value: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1048(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1049(
      rest,
      [fixed: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1049(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__912(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1050(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__913(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1051(
         <<"#IMPLIED", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1052(rest, [:implied] ++ acc, stack, context, comb__line, comb__offset + 8)
  end

  defp x_includeSect__1051(rest, acc, stack, context, line, offset) do
    x_includeSect__1050(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1052(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__912(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1053(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1051(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1054(
         <<"#REQUIRED", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1055(rest, [:required] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp x_includeSect__1054(rest, acc, stack, context, line, offset) do
    x_includeSect__1053(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1055(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__912(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__912(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1056(
      rest,
      [
        default:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1056(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1057(
      rest,
      [attribute_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__752(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__1058(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1057(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__753(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__1058(rest, acc, stack, context, line, offset) do
    x_includeSect__1059(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1059(rest, acc, stack, context, line, offset) do
    x_includeSect__1063(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1061(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1060(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1062(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1061(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1063(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1064(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1063(rest, acc, stack, context, line, offset) do
    x_includeSect__1062(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1064(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1066(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1064(rest, acc, stack, context, line, offset) do
    x_includeSect__1065(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1066(rest, acc, stack, context, line, offset) do
    x_includeSect__1064(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1065(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1060(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1060(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1067(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1067(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1068(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1067(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__736(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1068(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1069(
      rest,
      [attributes_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1069(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1070(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__737(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1071(rest, acc, stack, context, line, offset) do
    x_includeSect__1072(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1072(
         <<"<!ELEMENT", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1073(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp x_includeSect__1072(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1070(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1073(rest, acc, stack, context, line, offset) do
    x_includeSect__1074(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1074(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1075(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1074(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__1070(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1075(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1077(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1075(rest, acc, stack, context, line, offset) do
    x_includeSect__1076(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1077(rest, acc, stack, context, line, offset) do
    x_includeSect__1075(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1076(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1078(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1078(rest, acc, stack, context, line, offset) do
    x_includeSect__1079(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1079(rest, acc, stack, context, line, offset) do
    x_includeSect__1080(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1080(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__1081(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1080(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__1070(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1081(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__1083(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1081(rest, acc, stack, context, line, offset) do
    x_includeSect__1082(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1083(rest, acc, stack, context, line, offset) do
    x_includeSect__1081(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1082(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1084(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1084(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1085(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1085(rest, acc, stack, context, line, offset) do
    x_includeSect__1086(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1086(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1087(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1086(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__1070(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1087(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1089(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1087(rest, acc, stack, context, line, offset) do
    x_includeSect__1088(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1089(rest, acc, stack, context, line, offset) do
    x_includeSect__1087(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1088(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1090(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1090(rest, acc, stack, context, line, offset) do
    x_includeSect__1091(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1091(rest, acc, stack, context, line, offset) do
    x_includeSect__1188(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1093(rest, acc, stack, context, line, offset) do
    x_includeSect__1094(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1094(rest, acc, stack, context, line, offset) do
    x_includeSect__1099(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1096(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_includeSect__1097(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        [_, _, _, _, _, _, acc | stack] = stack
        x_includeSect__1070(rest, acc, stack, context, line, offset)
    end
  end

  defp x_includeSect__1097(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1095(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1098(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1096(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1099(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_includeSect__1100(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_includeSect__1098(rest, acc, stack, context, line, offset)
    end
  end

  defp x_includeSect__1100(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1095(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1095(rest, acc, stack, context, line, offset) do
    x_includeSect__1104(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1102(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1101(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1103(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1102(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1104(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1105(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1104(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1105(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1104(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1105(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1104(rest, acc, stack, context, line, offset) do
    x_includeSect__1103(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1105(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1101(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1101(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1106(
      rest,
      [children: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1106(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1107(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1093(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1108(rest, acc, stack, context, line, offset) do
    x_includeSect__1109(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1109(rest, acc, stack, context, line, offset) do
    x_includeSect__1134(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1111(rest, acc, stack, context, line, offset) do
    x_includeSect__1112(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1112(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1113(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1112(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__1107(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1113(rest, acc, stack, context, line, offset) do
    x_includeSect__1117(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1115(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1114(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1116(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1115(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1117(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1118(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1117(rest, acc, stack, context, line, offset) do
    x_includeSect__1116(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1118(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1120(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1118(rest, acc, stack, context, line, offset) do
    x_includeSect__1119(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1120(rest, acc, stack, context, line, offset) do
    x_includeSect__1118(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1119(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1114(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1114(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1121(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1121(
         <<"#PCDATA", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1122(rest, [:PCDATA] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp x_includeSect__1121(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_includeSect__1107(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1122(rest, acc, stack, context, line, offset) do
    x_includeSect__1123(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1123(rest, acc, stack, context, line, offset) do
    x_includeSect__1127(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1125(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1124(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1126(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1125(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1127(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1128(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1127(rest, acc, stack, context, line, offset) do
    x_includeSect__1126(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1128(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1130(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1128(rest, acc, stack, context, line, offset) do
    x_includeSect__1129(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1130(rest, acc, stack, context, line, offset) do
    x_includeSect__1128(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1129(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1124(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1124(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1131(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1124(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_includeSect__1107(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1131(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1132(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1132(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1110(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1133(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1111(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1134(rest, acc, stack, context, line, offset) do
    x_includeSect__1135(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1135(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1136(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1135(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1133(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1136(rest, acc, stack, context, line, offset) do
    x_includeSect__1140(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1138(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1137(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1139(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1138(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1140(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1141(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1140(rest, acc, stack, context, line, offset) do
    x_includeSect__1139(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1141(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1143(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1141(rest, acc, stack, context, line, offset) do
    x_includeSect__1142(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1143(rest, acc, stack, context, line, offset) do
    x_includeSect__1141(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1142(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1137(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1137(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1144(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1144(
         <<"#PCDATA", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1145(rest, [:PCDATA] ++ acc, stack, context, comb__line, comb__offset + 7)
  end

  defp x_includeSect__1144(rest, acc, stack, context, line, offset) do
    x_includeSect__1133(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1145(rest, acc, stack, context, line, offset) do
    x_includeSect__1147(
      rest,
      [],
      [{rest, acc, context, line, offset} | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1147(rest, acc, stack, context, line, offset) do
    x_includeSect__1148(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1148(rest, acc, stack, context, line, offset) do
    x_includeSect__1152(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1150(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1149(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1151(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1150(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1152(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1153(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1152(rest, acc, stack, context, line, offset) do
    x_includeSect__1151(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1153(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1155(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1153(rest, acc, stack, context, line, offset) do
    x_includeSect__1154(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1155(rest, acc, stack, context, line, offset) do
    x_includeSect__1153(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1154(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1149(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1149(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1156(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1149(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1146(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1156(rest, acc, stack, context, line, offset) do
    x_includeSect__1160(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1158(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1157(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1159(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1158(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1160(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1161(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1160(rest, acc, stack, context, line, offset) do
    x_includeSect__1159(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1161(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1163(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1161(rest, acc, stack, context, line, offset) do
    x_includeSect__1162(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1163(rest, acc, stack, context, line, offset) do
    x_includeSect__1161(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1162(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1157(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1157(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1164(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1164(rest, acc, stack, context, line, offset) do
    x_includeSect__1165(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1165(rest, acc, stack, context, line, offset) do
    x_includeSect__1166(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1166(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_includeSect__1167(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1166(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_includeSect__1146(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1167(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_includeSect__1169(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1167(rest, acc, stack, context, line, offset) do
    x_includeSect__1168(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1169(rest, acc, stack, context, line, offset) do
    x_includeSect__1167(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1168(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1170(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1170(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1171(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1146(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__1172(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1171(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__1147(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__1172(rest, acc, stack, context, line, offset) do
    x_includeSect__1173(rest, [], [acc | stack], context, line, offset)
  end

  defp x_includeSect__1173(rest, acc, stack, context, line, offset) do
    x_includeSect__1177(
      rest,
      [],
      [{rest, context, line, offset}, acc | stack],
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1175(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1174(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1176(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1175(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1177(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1178(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1177(rest, acc, stack, context, line, offset) do
    x_includeSect__1176(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1178(
         <<x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_includeSect__1180(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_includeSect__1178(rest, acc, stack, context, line, offset) do
    x_includeSect__1179(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1180(rest, acc, stack, context, line, offset) do
    x_includeSect__1178(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1179(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1174(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1174(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_includeSect__1181(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_includeSect__1181(<<")*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1182(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_includeSect__1181(rest, acc, stack, context, line, offset) do
    x_includeSect__1133(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1182(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1110(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1110(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1183(
      rest,
      [mixed: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1183(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1184(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1108(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1185(<<"ANY", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1186(rest, ["ANY"] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__1185(rest, acc, stack, context, line, offset) do
    x_includeSect__1184(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1186(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1187(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_includeSect__1185(rest, [], stack, context, line, offset)
  end

  defp x_includeSect__1188(
         <<"EMPTY", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_includeSect__1189(rest, ["EMPTY"] ++ acc, stack, context, comb__line, comb__offset + 5)
  end

  defp x_includeSect__1188(rest, acc, stack, context, line, offset) do
    x_includeSect__1187(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1189(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__1092(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__1092(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1190(
      rest,
      [contentspec: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1190(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1191(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_includeSect__1190(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_includeSect__1070(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1191(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1192(
      rest,
      [element_decl: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1192(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__88(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__88(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_includeSect__27(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_includeSect__25(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__1193(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__27(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__26(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__23(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_includeSect__1194(rest, acc, stack, context, line, offset)
  end

  defp x_includeSect__1193(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_includeSect__24(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_includeSect__1194(<<"]]>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_includeSect__1195(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_includeSect__1194(rest, _acc, _stack, context, line, offset) do
    {:error, "expected includeSect", rest, context, line, offset}
  end

  defp x_includeSect__1195(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_includeSect__1196(
      rest,
      [includeSect: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_includeSect__1196(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end

  defp x_element__0(rest, acc, stack, context, line, offset) do
    x_element__1(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__1(rest, acc, stack, context, line, offset) do
    x_element__2(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__2(rest, acc, stack, context, line, offset) do
    x_element__322(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__4(<<"<", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__5(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__4(rest, _acc, _stack, context, line, offset) do
    {:error, "expected STag while processing element", rest, context, line, offset}
  end

  defp x_element__5(rest, acc, stack, context, line, offset) do
    x_element__6(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__6(rest, acc, stack, context, line, offset) do
    x_element__7(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__7(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__8(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__7(rest, _acc, _stack, context, line, offset) do
    {:error, "expected Name while processing STag inside element", rest, context, line, offset}
  end

  defp x_element__8(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__10(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__8(rest, acc, stack, context, line, offset) do
    x_element__9(rest, acc, stack, context, line, offset)
  end

  defp x_element__10(rest, acc, stack, context, line, offset) do
    x_element__8(rest, acc, stack, context, line, offset)
  end

  defp x_element__9(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__11(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__11(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__12(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__12(rest, acc, stack, context, line, offset) do
    x_element__14(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__14(rest, acc, stack, context, line, offset) do
    x_element__15(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__15(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__16(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__15(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__13(rest, acc, stack, context, line, offset)
  end

  defp x_element__16(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__18(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__16(rest, acc, stack, context, line, offset) do
    x_element__17(rest, acc, stack, context, line, offset)
  end

  defp x_element__18(rest, acc, stack, context, line, offset) do
    x_element__16(rest, acc, stack, context, line, offset)
  end

  defp x_element__17(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__19(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__19(rest, acc, stack, context, line, offset) do
    x_element__20(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__20(rest, acc, stack, context, line, offset) do
    x_element__21(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__21(rest, acc, stack, context, line, offset) do
    x_element__22(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__22(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__23(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__22(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__13(rest, acc, stack, context, line, offset)
  end

  defp x_element__23(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__25(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__23(rest, acc, stack, context, line, offset) do
    x_element__24(rest, acc, stack, context, line, offset)
  end

  defp x_element__25(rest, acc, stack, context, line, offset) do
    x_element__23(rest, acc, stack, context, line, offset)
  end

  defp x_element__24(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__26(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__26(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__27(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__27(rest, acc, stack, context, line, offset) do
    x_element__28(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__28(rest, acc, stack, context, line, offset) do
    x_element__32(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__30(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__31(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__30(rest, [], stack, context, line, offset)
  end

  defp x_element__32(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__33(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__32(rest, acc, stack, context, line, offset) do
    x_element__31(rest, acc, stack, context, line, offset)
  end

  defp x_element__33(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__35(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__33(rest, acc, stack, context, line, offset) do
    x_element__34(rest, acc, stack, context, line, offset)
  end

  defp x_element__35(rest, acc, stack, context, line, offset) do
    x_element__33(rest, acc, stack, context, line, offset)
  end

  defp x_element__34(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__29(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__29(<<"=", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__36(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__29(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__13(rest, acc, stack, context, line, offset)
  end

  defp x_element__36(rest, acc, stack, context, line, offset) do
    x_element__40(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__38(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__39(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__38(rest, [], stack, context, line, offset)
  end

  defp x_element__40(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__41(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__40(rest, acc, stack, context, line, offset) do
    x_element__39(rest, acc, stack, context, line, offset)
  end

  defp x_element__41(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__43(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__41(rest, acc, stack, context, line, offset) do
    x_element__42(rest, acc, stack, context, line, offset)
  end

  defp x_element__43(rest, acc, stack, context, line, offset) do
    x_element__41(rest, acc, stack, context, line, offset)
  end

  defp x_element__42(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__37(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__44(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__44(rest, acc, stack, context, line, offset) do
    x_element__45(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__45(rest, acc, stack, context, line, offset) do
    x_element__108(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__47(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__48(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__47(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_element__13(rest, acc, stack, context, line, offset)
  end

  defp x_element__48(rest, acc, stack, context, line, offset) do
    x_element__49(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__49(rest, acc, stack, context, line, offset) do
    x_element__50(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__50(rest, acc, stack, context, line, offset) do
    x_element__54(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__52(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__51(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__53(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__52(rest, [], stack, context, line, offset)
  end

  defp x_element__54(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 39 do
    x_element__56(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__54(rest, acc, stack, context, line, offset) do
    x_element__55(rest, acc, stack, context, line, offset)
  end

  defp x_element__56(rest, acc, stack, context, line, offset) do
    x_element__54(rest, acc, stack, context, line, offset)
  end

  defp x_element__55(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__51(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__51(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__57(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__57(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__58(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__58(rest, acc, stack, context, line, offset) do
    x_element__60(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__60(rest, acc, stack, context, line, offset) do
    x_element__83(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__62(rest, acc, stack, context, line, offset) do
    x_element__63(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__63(rest, acc, stack, context, line, offset) do
    x_element__72(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__65(rest, acc, stack, context, line, offset) do
    x_element__66(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__66(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__67(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__66(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_element__59(rest, acc, stack, context, line, offset)
  end

  defp x_element__67(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__69(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__67(rest, acc, stack, context, line, offset) do
    x_element__68(rest, acc, stack, context, line, offset)
  end

  defp x_element__69(rest, acc, stack, context, line, offset) do
    x_element__67(rest, acc, stack, context, line, offset)
  end

  defp x_element__68(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__70(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__70(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__64(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__71(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__65(rest, [], stack, context, line, offset)
  end

  defp x_element__72(rest, acc, stack, context, line, offset) do
    x_element__73(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__73(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__74(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__73(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__71(rest, acc, stack, context, line, offset)
  end

  defp x_element__74(rest, acc, stack, context, line, offset) do
    x_element__75(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__75(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    x_element__76(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__75(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__71(rest, acc, stack, context, line, offset)
  end

  defp x_element__76(<<x0::integer, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 >= 48 and x0 <= 57 do
    x_element__78(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__76(rest, acc, stack, context, line, offset) do
    x_element__77(rest, acc, stack, context, line, offset)
  end

  defp x_element__78(rest, acc, stack, context, line, offset) do
    x_element__76(rest, acc, stack, context, line, offset)
  end

  defp x_element__77(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__79(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__79(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__80(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__80(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__64(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__64(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__81(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__81(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__61(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__82(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__62(rest, [], stack, context, line, offset)
  end

  defp x_element__83(rest, acc, stack, context, line, offset) do
    x_element__84(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__84(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__85(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__84(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__82(rest, acc, stack, context, line, offset)
  end

  defp x_element__85(rest, acc, stack, context, line, offset) do
    x_element__86(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__86(rest, acc, stack, context, line, offset) do
    x_element__87(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__87(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__88(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__87(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__82(rest, acc, stack, context, line, offset)
  end

  defp x_element__88(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__90(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__88(rest, acc, stack, context, line, offset) do
    x_element__89(rest, acc, stack, context, line, offset)
  end

  defp x_element__90(rest, acc, stack, context, line, offset) do
    x_element__88(rest, acc, stack, context, line, offset)
  end

  defp x_element__89(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__91(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__91(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__92(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__92(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__93(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__92(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__82(rest, acc, stack, context, line, offset)
  end

  defp x_element__93(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__94(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__94(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__61(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__61(rest, acc, stack, context, line, offset) do
    x_element__95(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__95(rest, acc, stack, context, line, offset) do
    x_element__96(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__96(rest, acc, stack, context, line, offset) do
    x_element__100(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__98(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__97(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__99(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__98(rest, [], stack, context, line, offset)
  end

  defp x_element__100(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__102(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__100(rest, acc, stack, context, line, offset) do
    x_element__101(rest, acc, stack, context, line, offset)
  end

  defp x_element__102(rest, acc, stack, context, line, offset) do
    x_element__100(rest, acc, stack, context, line, offset)
  end

  defp x_element__101(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__97(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__97(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__103(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__103(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__104(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__59(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__105(rest, acc, stack, context, line, offset)
  end

  defp x_element__104(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__60(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__105(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__106(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__105(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_element__13(rest, acc, stack, context, line, offset)
  end

  defp x_element__106(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__46(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__107(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__47(rest, [], stack, context, line, offset)
  end

  defp x_element__108(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__109(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__108(rest, acc, stack, context, line, offset) do
    x_element__107(rest, acc, stack, context, line, offset)
  end

  defp x_element__109(rest, acc, stack, context, line, offset) do
    x_element__110(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__110(rest, acc, stack, context, line, offset) do
    x_element__111(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__111(rest, acc, stack, context, line, offset) do
    x_element__115(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__113(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__112(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__114(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__113(rest, [], stack, context, line, offset)
  end

  defp x_element__115(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__117(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__115(rest, acc, stack, context, line, offset) do
    x_element__116(rest, acc, stack, context, line, offset)
  end

  defp x_element__117(rest, acc, stack, context, line, offset) do
    x_element__115(rest, acc, stack, context, line, offset)
  end

  defp x_element__116(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__112(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__112(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__118(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__118(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__119(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__119(rest, acc, stack, context, line, offset) do
    x_element__121(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__121(rest, acc, stack, context, line, offset) do
    x_element__144(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__123(rest, acc, stack, context, line, offset) do
    x_element__124(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__124(rest, acc, stack, context, line, offset) do
    x_element__133(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__126(rest, acc, stack, context, line, offset) do
    x_element__127(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__127(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__128(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__127(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_element__120(rest, acc, stack, context, line, offset)
  end

  defp x_element__128(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__130(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__128(rest, acc, stack, context, line, offset) do
    x_element__129(rest, acc, stack, context, line, offset)
  end

  defp x_element__130(rest, acc, stack, context, line, offset) do
    x_element__128(rest, acc, stack, context, line, offset)
  end

  defp x_element__129(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__131(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__131(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__125(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__132(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__126(rest, [], stack, context, line, offset)
  end

  defp x_element__133(rest, acc, stack, context, line, offset) do
    x_element__134(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__134(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__135(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__134(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__132(rest, acc, stack, context, line, offset)
  end

  defp x_element__135(rest, acc, stack, context, line, offset) do
    x_element__136(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__136(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__137(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__136(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__132(rest, acc, stack, context, line, offset)
  end

  defp x_element__137(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__139(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__137(rest, acc, stack, context, line, offset) do
    x_element__138(rest, acc, stack, context, line, offset)
  end

  defp x_element__139(rest, acc, stack, context, line, offset) do
    x_element__137(rest, acc, stack, context, line, offset)
  end

  defp x_element__138(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__140(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__140(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__141(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__141(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__125(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__125(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__142(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__142(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__122(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__143(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__123(rest, [], stack, context, line, offset)
  end

  defp x_element__144(rest, acc, stack, context, line, offset) do
    x_element__145(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__145(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__146(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__145(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__143(rest, acc, stack, context, line, offset)
  end

  defp x_element__146(rest, acc, stack, context, line, offset) do
    x_element__147(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__147(rest, acc, stack, context, line, offset) do
    x_element__148(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__148(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__149(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__148(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__143(rest, acc, stack, context, line, offset)
  end

  defp x_element__149(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__151(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__149(rest, acc, stack, context, line, offset) do
    x_element__150(rest, acc, stack, context, line, offset)
  end

  defp x_element__151(rest, acc, stack, context, line, offset) do
    x_element__149(rest, acc, stack, context, line, offset)
  end

  defp x_element__150(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__152(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__152(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__153(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__153(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__154(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__153(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__143(rest, acc, stack, context, line, offset)
  end

  defp x_element__154(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__155(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__155(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__122(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__122(rest, acc, stack, context, line, offset) do
    x_element__156(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__156(rest, acc, stack, context, line, offset) do
    x_element__157(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__157(rest, acc, stack, context, line, offset) do
    x_element__161(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__159(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__158(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__160(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__159(rest, [], stack, context, line, offset)
  end

  defp x_element__161(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__163(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__161(rest, acc, stack, context, line, offset) do
    x_element__162(rest, acc, stack, context, line, offset)
  end

  defp x_element__163(rest, acc, stack, context, line, offset) do
    x_element__161(rest, acc, stack, context, line, offset)
  end

  defp x_element__162(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__158(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__158(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__164(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__164(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__165(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__120(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__166(rest, acc, stack, context, line, offset)
  end

  defp x_element__165(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__121(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__166(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__167(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__166(rest, acc, stack, context, line, offset) do
    x_element__107(rest, acc, stack, context, line, offset)
  end

  defp x_element__167(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__46(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__46(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__168(rest, [value: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__168(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__169(
      rest,
      [attribute: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__13(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__170(rest, acc, stack, context, line, offset)
  end

  defp x_element__169(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__14(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__170(rest, acc, stack, context, line, offset) do
    x_element__171(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__171(rest, acc, stack, context, line, offset) do
    x_element__175(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__173(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__172(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__174(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__173(rest, [], stack, context, line, offset)
  end

  defp x_element__175(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__176(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__175(rest, acc, stack, context, line, offset) do
    x_element__174(rest, acc, stack, context, line, offset)
  end

  defp x_element__176(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__178(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__176(rest, acc, stack, context, line, offset) do
    x_element__177(rest, acc, stack, context, line, offset)
  end

  defp x_element__178(rest, acc, stack, context, line, offset) do
    x_element__176(rest, acc, stack, context, line, offset)
  end

  defp x_element__177(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__172(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__172(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__179(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__179(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__180(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__179(rest, _acc, _stack, context, line, offset) do
    {:error, "expected STag while processing element", rest, context, line, offset}
  end

  defp x_element__180(rest, acc, stack, context, line, offset) do
    x_element__181(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__181(rest, acc, stack, context, line, offset) do
    x_element__185(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__183(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__182(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__184(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__183(rest, [], stack, context, line, offset)
  end

  defp x_element__185(rest, acc, stack, context, line, offset) do
    x_element__186(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__186(rest, acc, stack, context, line, offset) do
    x_element__187(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__187(rest, acc, stack, context, line, offset) do
    x_element__189(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__189(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 do
    x_element__190(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__189(rest, acc, stack, context, line, offset) do
    x_element__188(rest, acc, stack, context, line, offset)
  end

  defp x_element__190(<<"]]>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_element__188(rest, acc, stack, context, line, offset)
  end

  defp x_element__190(rest, acc, stack, context, line, offset) do
    x_element__191(rest, acc, stack, context, line, offset)
  end

  defp x_element__188(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__192(rest, acc, stack, context, line, offset)
  end

  defp x_element__191(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__189(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__192(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__193(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__193(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__194(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__194(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__182(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__182(rest, acc, stack, context, line, offset) do
    x_element__196(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__196(rest, acc, stack, context, line, offset) do
    x_element__251(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__198(rest, acc, stack, context, line, offset) do
    case(x_element__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_element__199(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        [_, acc | stack] = stack
        x_element__195(rest, acc, stack, context, line, offset)
    end
  end

  defp x_element__199(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__197(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__200(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__198(rest, [], stack, context, line, offset)
  end

  defp x_element__201(rest, acc, stack, context, line, offset) do
    x_element__202(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__202(rest, acc, stack, context, line, offset) do
    x_element__203(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__203(<<"<!--", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__204(rest, [] ++ acc, stack, context, comb__line, comb__offset + 4)
  end

  defp x_element__203(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__200(rest, acc, stack, context, line, offset)
  end

  defp x_element__204(<<"--", _::binary>> = rest, acc, stack, context, line, offset) do
    x_element__205(rest, acc, stack, context, line, offset)
  end

  defp x_element__204(rest, acc, stack, context, line, offset) do
    x_element__206(rest, acc, stack, context, line, offset)
  end

  defp x_element__206(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_element__207(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__206(rest, acc, stack, context, line, offset) do
    x_element__205(rest, acc, stack, context, line, offset)
  end

  defp x_element__207(rest, acc, stack, context, line, offset) do
    x_element__204(rest, acc, stack, context, line, offset)
  end

  defp x_element__205(<<"-->", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__208(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_element__205(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__200(rest, acc, stack, context, line, offset)
  end

  defp x_element__208(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__209(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__209(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__210(
      rest,
      [
        comment:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__210(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__197(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__211(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__201(rest, [], stack, context, line, offset)
  end

  defp x_element__212(rest, acc, stack, context, line, offset) do
    x_element__213(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__213(<<"<?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__214(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__213(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__214(<<"xml ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__214(<<"XML ", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__214(<<"xml?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__214(<<"XML?", _::binary>> = rest, acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__214(rest, acc, stack, context, line, offset) do
    x_element__215(rest, acc, stack, context, line, offset)
  end

  defp x_element__215(rest, acc, stack, context, line, offset) do
    x_element__216(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__216(rest, acc, stack, context, line, offset) do
    x_element__217(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__217(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__218(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__217(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__218(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__220(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__218(rest, acc, stack, context, line, offset) do
    x_element__219(rest, acc, stack, context, line, offset)
  end

  defp x_element__220(rest, acc, stack, context, line, offset) do
    x_element__218(rest, acc, stack, context, line, offset)
  end

  defp x_element__219(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__221(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__221(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__222(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__222(rest, acc, stack, context, line, offset) do
    x_element__226(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__224(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__223(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__225(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__224(rest, [], stack, context, line, offset)
  end

  defp x_element__226(rest, acc, stack, context, line, offset) do
    x_element__227(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__227(rest, acc, stack, context, line, offset) do
    x_element__228(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__228(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__229(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__228(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__225(rest, acc, stack, context, line, offset)
  end

  defp x_element__229(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__231(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__229(rest, acc, stack, context, line, offset) do
    x_element__230(rest, acc, stack, context, line, offset)
  end

  defp x_element__231(rest, acc, stack, context, line, offset) do
    x_element__229(rest, acc, stack, context, line, offset)
  end

  defp x_element__230(<<"?>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_element__232(rest, acc, stack, context, line, offset)
  end

  defp x_element__230(rest, acc, stack, context, line, offset) do
    x_element__233(rest, acc, stack, context, line, offset)
  end

  defp x_element__233(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_element__234(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__233(rest, acc, stack, context, line, offset) do
    x_element__232(rest, acc, stack, context, line, offset)
  end

  defp x_element__234(rest, acc, stack, context, line, offset) do
    x_element__230(rest, acc, stack, context, line, offset)
  end

  defp x_element__232(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__235(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__235(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__236(
      rest,
      [
        data:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__236(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__223(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__223(<<"?>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__237(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__223(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__211(rest, acc, stack, context, line, offset)
  end

  defp x_element__237(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__238(rest, [PI: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__238(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__197(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__239(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__212(rest, [], stack, context, line, offset)
  end

  defp x_element__240(rest, acc, stack, context, line, offset) do
    x_element__241(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__241(
         <<"<![CDATA[", rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       ) do
    x_element__242(rest, [] ++ acc, stack, context, comb__line, comb__offset + 9)
  end

  defp x_element__241(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__239(rest, acc, stack, context, line, offset)
  end

  defp x_element__242(rest, acc, stack, context, line, offset) do
    x_element__243(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__243(<<"]]>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_element__244(rest, acc, stack, context, line, offset)
  end

  defp x_element__243(rest, acc, stack, context, line, offset) do
    x_element__245(rest, acc, stack, context, line, offset)
  end

  defp x_element__245(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 1 and x0 <= 55295) or (x0 >= 57344 and x0 <= 65533) or
              (x0 >= 65536 and x0 <= 1_114_111) do
    x_element__246(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__245(rest, acc, stack, context, line, offset) do
    x_element__244(rest, acc, stack, context, line, offset)
  end

  defp x_element__246(rest, acc, stack, context, line, offset) do
    x_element__243(rest, acc, stack, context, line, offset)
  end

  defp x_element__244(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__247(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__247(<<"]]>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__248(rest, [] ++ acc, stack, context, comb__line, comb__offset + 3)
  end

  defp x_element__247(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__239(rest, acc, stack, context, line, offset)
  end

  defp x_element__248(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__249(rest, [CData: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__249(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__197(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__250(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__240(rest, [], stack, context, line, offset)
  end

  defp x_element__251(rest, acc, stack, context, line, offset) do
    x_element__274(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__253(rest, acc, stack, context, line, offset) do
    x_element__254(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__254(rest, acc, stack, context, line, offset) do
    x_element__263(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__256(rest, acc, stack, context, line, offset) do
    x_element__257(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__257(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__258(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__257(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_element__250(rest, acc, stack, context, line, offset)
  end

  defp x_element__258(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__260(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__258(rest, acc, stack, context, line, offset) do
    x_element__259(rest, acc, stack, context, line, offset)
  end

  defp x_element__260(rest, acc, stack, context, line, offset) do
    x_element__258(rest, acc, stack, context, line, offset)
  end

  defp x_element__259(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__261(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__261(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__255(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__262(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__256(rest, [], stack, context, line, offset)
  end

  defp x_element__263(rest, acc, stack, context, line, offset) do
    x_element__264(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__264(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__265(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__264(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__262(rest, acc, stack, context, line, offset)
  end

  defp x_element__265(rest, acc, stack, context, line, offset) do
    x_element__266(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__266(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__267(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__266(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__262(rest, acc, stack, context, line, offset)
  end

  defp x_element__267(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__269(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__267(rest, acc, stack, context, line, offset) do
    x_element__268(rest, acc, stack, context, line, offset)
  end

  defp x_element__269(rest, acc, stack, context, line, offset) do
    x_element__267(rest, acc, stack, context, line, offset)
  end

  defp x_element__268(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__270(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__270(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__271(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__271(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__255(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__255(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__272(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__272(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__252(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__273(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__253(rest, [], stack, context, line, offset)
  end

  defp x_element__274(rest, acc, stack, context, line, offset) do
    x_element__275(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__275(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__276(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__275(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__273(rest, acc, stack, context, line, offset)
  end

  defp x_element__276(rest, acc, stack, context, line, offset) do
    x_element__277(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__277(rest, acc, stack, context, line, offset) do
    x_element__278(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__278(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__279(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__278(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__273(rest, acc, stack, context, line, offset)
  end

  defp x_element__279(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__281(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__279(rest, acc, stack, context, line, offset) do
    x_element__280(rest, acc, stack, context, line, offset)
  end

  defp x_element__281(rest, acc, stack, context, line, offset) do
    x_element__279(rest, acc, stack, context, line, offset)
  end

  defp x_element__280(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__282(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__282(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__283(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__283(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__284(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__283(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__273(rest, acc, stack, context, line, offset)
  end

  defp x_element__284(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__285(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__285(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__252(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__252(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__197(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__197(rest, acc, stack, context, line, offset) do
    x_element__286(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__286(rest, acc, stack, context, line, offset) do
    x_element__287(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__287(rest, acc, stack, context, line, offset) do
    x_element__291(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__289(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__288(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__290(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__289(rest, [], stack, context, line, offset)
  end

  defp x_element__291(rest, acc, stack, context, line, offset) do
    x_element__293(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__293(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 do
    x_element__294(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__293(rest, acc, stack, context, line, offset) do
    x_element__292(rest, acc, stack, context, line, offset)
  end

  defp x_element__294(<<"]]>", _::binary>> = rest, acc, stack, context, line, offset) do
    x_element__292(rest, acc, stack, context, line, offset)
  end

  defp x_element__294(rest, acc, stack, context, line, offset) do
    x_element__295(rest, acc, stack, context, line, offset)
  end

  defp x_element__292(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__296(rest, acc, stack, context, line, offset)
  end

  defp x_element__295(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__293(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__296(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__288(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__288(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__297(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__297(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__298(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__195(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__299(rest, acc, stack, context, line, offset)
  end

  defp x_element__298(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__196(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__299(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__300(rest, [content: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__300(rest, acc, stack, context, line, offset) do
    x_element__301(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__301(<<"</", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__302(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__301(rest, _acc, _stack, context, line, offset) do
    {:error, "expected ETag while processing element", rest, context, line, offset}
  end

  defp x_element__302(rest, acc, stack, context, line, offset) do
    x_element__303(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__303(rest, acc, stack, context, line, offset) do
    x_element__304(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__304(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__305(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__304(rest, _acc, _stack, context, line, offset) do
    {:error, "expected Name while processing ETag inside element", rest, context, line, offset}
  end

  defp x_element__305(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__307(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__305(rest, acc, stack, context, line, offset) do
    x_element__306(rest, acc, stack, context, line, offset)
  end

  defp x_element__307(rest, acc, stack, context, line, offset) do
    x_element__305(rest, acc, stack, context, line, offset)
  end

  defp x_element__306(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__308(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__308(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__309(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__309(rest, acc, stack, context, line, offset) do
    x_element__310(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__310(rest, acc, stack, context, line, offset) do
    x_element__314(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__312(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__311(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__313(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__312(rest, [], stack, context, line, offset)
  end

  defp x_element__314(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__315(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__314(rest, acc, stack, context, line, offset) do
    x_element__313(rest, acc, stack, context, line, offset)
  end

  defp x_element__315(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__317(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__315(rest, acc, stack, context, line, offset) do
    x_element__316(rest, acc, stack, context, line, offset)
  end

  defp x_element__317(rest, acc, stack, context, line, offset) do
    x_element__315(rest, acc, stack, context, line, offset)
  end

  defp x_element__316(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__311(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__311(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__318(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__318(<<">", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__319(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__318(rest, _acc, _stack, context, line, offset) do
    {:error, "expected ETag while processing element", rest, context, line, offset}
  end

  defp x_element__319(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__320(
      rest,
      [
        etag_name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__320(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__3(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__321(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__4(rest, [], stack, context, line, offset)
  end

  defp x_element__322(<<"<", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__323(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__322(rest, acc, stack, context, line, offset) do
    x_element__321(rest, acc, stack, context, line, offset)
  end

  defp x_element__323(rest, acc, stack, context, line, offset) do
    x_element__324(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__324(rest, acc, stack, context, line, offset) do
    x_element__325(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__325(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__326(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__325(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__321(rest, acc, stack, context, line, offset)
  end

  defp x_element__326(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__328(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__326(rest, acc, stack, context, line, offset) do
    x_element__327(rest, acc, stack, context, line, offset)
  end

  defp x_element__328(rest, acc, stack, context, line, offset) do
    x_element__326(rest, acc, stack, context, line, offset)
  end

  defp x_element__327(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__329(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__329(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__330(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__330(rest, acc, stack, context, line, offset) do
    x_element__332(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__332(rest, acc, stack, context, line, offset) do
    x_element__333(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__333(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__334(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__333(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__331(rest, acc, stack, context, line, offset)
  end

  defp x_element__334(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__336(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__334(rest, acc, stack, context, line, offset) do
    x_element__335(rest, acc, stack, context, line, offset)
  end

  defp x_element__336(rest, acc, stack, context, line, offset) do
    x_element__334(rest, acc, stack, context, line, offset)
  end

  defp x_element__335(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__337(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__337(rest, acc, stack, context, line, offset) do
    x_element__338(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__338(rest, acc, stack, context, line, offset) do
    x_element__339(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__339(rest, acc, stack, context, line, offset) do
    x_element__340(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__340(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__341(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__340(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__331(rest, acc, stack, context, line, offset)
  end

  defp x_element__341(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__343(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__341(rest, acc, stack, context, line, offset) do
    x_element__342(rest, acc, stack, context, line, offset)
  end

  defp x_element__343(rest, acc, stack, context, line, offset) do
    x_element__341(rest, acc, stack, context, line, offset)
  end

  defp x_element__342(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__344(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__344(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__345(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__345(rest, acc, stack, context, line, offset) do
    x_element__346(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__346(rest, acc, stack, context, line, offset) do
    x_element__350(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__348(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__347(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__349(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__348(rest, [], stack, context, line, offset)
  end

  defp x_element__350(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__351(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__350(rest, acc, stack, context, line, offset) do
    x_element__349(rest, acc, stack, context, line, offset)
  end

  defp x_element__351(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__353(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__351(rest, acc, stack, context, line, offset) do
    x_element__352(rest, acc, stack, context, line, offset)
  end

  defp x_element__353(rest, acc, stack, context, line, offset) do
    x_element__351(rest, acc, stack, context, line, offset)
  end

  defp x_element__352(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__347(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__347(<<"=", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__354(rest, acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__347(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__331(rest, acc, stack, context, line, offset)
  end

  defp x_element__354(rest, acc, stack, context, line, offset) do
    x_element__358(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__356(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__357(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__356(rest, [], stack, context, line, offset)
  end

  defp x_element__358(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__359(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__358(rest, acc, stack, context, line, offset) do
    x_element__357(rest, acc, stack, context, line, offset)
  end

  defp x_element__359(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__361(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__359(rest, acc, stack, context, line, offset) do
    x_element__360(rest, acc, stack, context, line, offset)
  end

  defp x_element__361(rest, acc, stack, context, line, offset) do
    x_element__359(rest, acc, stack, context, line, offset)
  end

  defp x_element__360(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__355(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__355(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__362(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__362(rest, acc, stack, context, line, offset) do
    x_element__363(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__363(rest, acc, stack, context, line, offset) do
    x_element__426(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__365(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__366(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__365(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_element__331(rest, acc, stack, context, line, offset)
  end

  defp x_element__366(rest, acc, stack, context, line, offset) do
    x_element__367(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__367(rest, acc, stack, context, line, offset) do
    x_element__368(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__368(rest, acc, stack, context, line, offset) do
    x_element__372(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__370(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__369(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__371(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__370(rest, [], stack, context, line, offset)
  end

  defp x_element__372(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 39 do
    x_element__374(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__372(rest, acc, stack, context, line, offset) do
    x_element__373(rest, acc, stack, context, line, offset)
  end

  defp x_element__374(rest, acc, stack, context, line, offset) do
    x_element__372(rest, acc, stack, context, line, offset)
  end

  defp x_element__373(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__369(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__369(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__375(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__375(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__376(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__376(rest, acc, stack, context, line, offset) do
    x_element__378(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__378(rest, acc, stack, context, line, offset) do
    x_element__401(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__380(rest, acc, stack, context, line, offset) do
    x_element__381(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__381(rest, acc, stack, context, line, offset) do
    x_element__390(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__383(rest, acc, stack, context, line, offset) do
    x_element__384(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__384(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__385(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__384(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_element__377(rest, acc, stack, context, line, offset)
  end

  defp x_element__385(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__387(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__385(rest, acc, stack, context, line, offset) do
    x_element__386(rest, acc, stack, context, line, offset)
  end

  defp x_element__387(rest, acc, stack, context, line, offset) do
    x_element__385(rest, acc, stack, context, line, offset)
  end

  defp x_element__386(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__388(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__388(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__382(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__389(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__383(rest, [], stack, context, line, offset)
  end

  defp x_element__390(rest, acc, stack, context, line, offset) do
    x_element__391(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__391(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__392(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__391(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__389(rest, acc, stack, context, line, offset)
  end

  defp x_element__392(rest, acc, stack, context, line, offset) do
    x_element__393(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__393(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__394(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__393(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__389(rest, acc, stack, context, line, offset)
  end

  defp x_element__394(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__396(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__394(rest, acc, stack, context, line, offset) do
    x_element__395(rest, acc, stack, context, line, offset)
  end

  defp x_element__396(rest, acc, stack, context, line, offset) do
    x_element__394(rest, acc, stack, context, line, offset)
  end

  defp x_element__395(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__397(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__397(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__398(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__398(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__382(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__382(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__399(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__399(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__379(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__400(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__380(rest, [], stack, context, line, offset)
  end

  defp x_element__401(rest, acc, stack, context, line, offset) do
    x_element__402(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__402(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__403(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__402(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__400(rest, acc, stack, context, line, offset)
  end

  defp x_element__403(rest, acc, stack, context, line, offset) do
    x_element__404(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__404(rest, acc, stack, context, line, offset) do
    x_element__405(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__405(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__406(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__405(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__400(rest, acc, stack, context, line, offset)
  end

  defp x_element__406(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__408(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__406(rest, acc, stack, context, line, offset) do
    x_element__407(rest, acc, stack, context, line, offset)
  end

  defp x_element__408(rest, acc, stack, context, line, offset) do
    x_element__406(rest, acc, stack, context, line, offset)
  end

  defp x_element__407(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__409(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__409(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__410(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__410(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__411(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__410(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__400(rest, acc, stack, context, line, offset)
  end

  defp x_element__411(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__412(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__412(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__379(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__379(rest, acc, stack, context, line, offset) do
    x_element__413(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__413(rest, acc, stack, context, line, offset) do
    x_element__414(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__414(rest, acc, stack, context, line, offset) do
    x_element__418(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__416(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__415(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__417(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__416(rest, [], stack, context, line, offset)
  end

  defp x_element__418(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__420(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__418(rest, acc, stack, context, line, offset) do
    x_element__419(rest, acc, stack, context, line, offset)
  end

  defp x_element__420(rest, acc, stack, context, line, offset) do
    x_element__418(rest, acc, stack, context, line, offset)
  end

  defp x_element__419(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__415(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__415(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__421(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__421(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__422(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__377(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__423(rest, acc, stack, context, line, offset)
  end

  defp x_element__422(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__378(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__423(<<"'", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__424(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__423(rest, _acc, stack, context, line, offset) do
    [_, _, _, acc | stack] = stack
    x_element__331(rest, acc, stack, context, line, offset)
  end

  defp x_element__424(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__364(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__425(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__365(rest, [], stack, context, line, offset)
  end

  defp x_element__426(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__427(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__426(rest, acc, stack, context, line, offset) do
    x_element__425(rest, acc, stack, context, line, offset)
  end

  defp x_element__427(rest, acc, stack, context, line, offset) do
    x_element__428(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__428(rest, acc, stack, context, line, offset) do
    x_element__429(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__429(rest, acc, stack, context, line, offset) do
    x_element__433(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__431(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__430(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__432(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__431(rest, [], stack, context, line, offset)
  end

  defp x_element__433(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__435(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__433(rest, acc, stack, context, line, offset) do
    x_element__434(rest, acc, stack, context, line, offset)
  end

  defp x_element__435(rest, acc, stack, context, line, offset) do
    x_element__433(rest, acc, stack, context, line, offset)
  end

  defp x_element__434(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__430(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__430(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__436(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__436(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__437(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__437(rest, acc, stack, context, line, offset) do
    x_element__439(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_element__439(rest, acc, stack, context, line, offset) do
    x_element__462(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__441(rest, acc, stack, context, line, offset) do
    x_element__442(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__442(rest, acc, stack, context, line, offset) do
    x_element__451(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__444(rest, acc, stack, context, line, offset) do
    x_element__445(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__445(
         <<"&#x", x0::utf8, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__446(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + 3 + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__445(rest, _acc, stack, context, line, offset) do
    [_, _, _, _, _, acc | stack] = stack
    x_element__438(rest, acc, stack, context, line, offset)
  end

  defp x_element__446(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when (x0 >= 48 and x0 <= 57) or (x0 >= 97 and x0 <= 102) or (x0 >= 65 and x0 <= 70) do
    x_element__448(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__446(rest, acc, stack, context, line, offset) do
    x_element__447(rest, acc, stack, context, line, offset)
  end

  defp x_element__448(rest, acc, stack, context, line, offset) do
    x_element__446(rest, acc, stack, context, line, offset)
  end

  defp x_element__447(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__449(rest, [CR_hexa: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__449(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__443(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__450(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__444(rest, [], stack, context, line, offset)
  end

  defp x_element__451(rest, acc, stack, context, line, offset) do
    x_element__452(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__452(<<"&#", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__453(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__452(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__450(rest, acc, stack, context, line, offset)
  end

  defp x_element__453(rest, acc, stack, context, line, offset) do
    x_element__454(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__454(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__455(rest, [x0 - 48] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__454(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_element__450(rest, acc, stack, context, line, offset)
  end

  defp x_element__455(
         <<x0::integer, rest::binary>>,
         acc,
         stack,
         context,
         comb__line,
         comb__offset
       )
       when x0 >= 48 and x0 <= 57 do
    x_element__457(rest, [x0] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__455(rest, acc, stack, context, line, offset) do
    x_element__456(rest, acc, stack, context, line, offset)
  end

  defp x_element__457(rest, acc, stack, context, line, offset) do
    x_element__455(rest, acc, stack, context, line, offset)
  end

  defp x_element__456(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__458(
      rest,
      (
        [head | tail] = :lists.reverse(user_acc)
        [:lists.foldl(fn x, acc -> x - 48 + acc * 10 end, head, tail)]
      ) ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__458(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__459(
      rest,
      [CR_integer: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__459(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__443(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__443(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__460(rest, [CharRef: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__460(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__440(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__461(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__441(rest, [], stack, context, line, offset)
  end

  defp x_element__462(rest, acc, stack, context, line, offset) do
    x_element__463(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__463(<<"&", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__464(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__463(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__461(rest, acc, stack, context, line, offset)
  end

  defp x_element__464(rest, acc, stack, context, line, offset) do
    x_element__465(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__465(rest, acc, stack, context, line, offset) do
    x_element__466(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__466(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_element__467(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__466(rest, _acc, stack, context, line, offset) do
    [_, _, acc | stack] = stack
    x_element__461(rest, acc, stack, context, line, offset)
  end

  defp x_element__467(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_element__469(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__467(rest, acc, stack, context, line, offset) do
    x_element__468(rest, acc, stack, context, line, offset)
  end

  defp x_element__469(rest, acc, stack, context, line, offset) do
    x_element__467(rest, acc, stack, context, line, offset)
  end

  defp x_element__468(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__470(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__470(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__471(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__471(<<";", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__472(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__471(rest, _acc, stack, context, line, offset) do
    [acc | stack] = stack
    x_element__461(rest, acc, stack, context, line, offset)
  end

  defp x_element__472(rest, user_acc, [acc | stack], context, line, offset) do
    case(prepare_entity(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__473(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__473(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__440(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__440(rest, acc, stack, context, line, offset) do
    x_element__474(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__474(rest, acc, stack, context, line, offset) do
    x_element__475(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__475(rest, acc, stack, context, line, offset) do
    x_element__479(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__477(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__476(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__478(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__477(rest, [], stack, context, line, offset)
  end

  defp x_element__479(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 !== 60 and x0 !== 38 and x0 !== 34 do
    x_element__481(
      rest,
      [x0] ++ acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__479(rest, acc, stack, context, line, offset) do
    x_element__480(rest, acc, stack, context, line, offset)
  end

  defp x_element__481(rest, acc, stack, context, line, offset) do
    x_element__479(rest, acc, stack, context, line, offset)
  end

  defp x_element__480(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__476(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__476(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__482(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__482(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__483(
      rest,
      [
        text:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__438(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__484(rest, acc, stack, context, line, offset)
  end

  defp x_element__483(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__439(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__484(<<"\"", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__485(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_element__484(rest, acc, stack, context, line, offset) do
    x_element__425(rest, acc, stack, context, line, offset)
  end

  defp x_element__485(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__364(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__364(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__486(rest, [value: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__486(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_element__487(
      rest,
      [attribute: :lists.reverse(user_acc)] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_element__331(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_element__488(rest, acc, stack, context, line, offset)
  end

  defp x_element__487(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_element__332(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_element__488(rest, acc, stack, context, line, offset) do
    x_element__489(rest, [], [acc | stack], context, line, offset)
  end

  defp x_element__489(rest, acc, stack, context, line, offset) do
    x_element__493(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_element__491(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__490(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__492(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_element__491(rest, [], stack, context, line, offset)
  end

  defp x_element__493(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__494(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__493(rest, acc, stack, context, line, offset) do
    x_element__492(rest, acc, stack, context, line, offset)
  end

  defp x_element__494(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_element__496(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_element__494(rest, acc, stack, context, line, offset) do
    x_element__495(rest, acc, stack, context, line, offset)
  end

  defp x_element__496(rest, acc, stack, context, line, offset) do
    x_element__494(rest, acc, stack, context, line, offset)
  end

  defp x_element__495(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__490(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__490(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__497(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_element__497(<<"/>", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_element__498(rest, [] ++ acc, stack, context, comb__line, comb__offset + 2)
  end

  defp x_element__497(rest, acc, stack, context, line, offset) do
    x_element__321(rest, acc, stack, context, line, offset)
  end

  defp x_element__498(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_element__3(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_element__3(rest, user_acc, [acc | stack], context, line, offset) do
    case(check_tags(rest, user_acc, context, line, offset)) do
      {user_acc, context} when is_list(user_acc) ->
        x_element__499(rest, user_acc ++ acc, stack, context, line, offset)

      {:error, reason} ->
        {:error, reason, rest, context, line, offset}
    end
  end

  defp x_element__499(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_element__500(rest, [element: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_element__500(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end

  defp x_sep__0(rest, acc, stack, context, line, offset) do
    x_sep__1(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__1(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__2(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__1(rest, _acc, _stack, context, line, offset) do
    {:error, "expected seq", rest, context, line, offset}
  end

  defp x_sep__2(rest, acc, stack, context, line, offset) do
    x_sep__3(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__3(rest, acc, stack, context, line, offset) do
    x_sep__7(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__5(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__6(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__5(rest, [], stack, context, line, offset)
  end

  defp x_sep__7(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__8(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__7(rest, acc, stack, context, line, offset) do
    x_sep__6(rest, acc, stack, context, line, offset)
  end

  defp x_sep__8(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__10(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__8(rest, acc, stack, context, line, offset) do
    x_sep__9(rest, acc, stack, context, line, offset)
  end

  defp x_sep__10(rest, acc, stack, context, line, offset) do
    x_sep__8(rest, acc, stack, context, line, offset)
  end

  defp x_sep__9(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__4(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__11(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_sep__11(rest, acc, stack, context, line, offset) do
    x_sep__12(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__12(rest, acc, stack, context, line, offset) do
    x_sep__20(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__14(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_sep__15(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        error
    end
  end

  defp x_sep__15(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__16(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__14(rest, [], stack, context, line, offset)
  end

  defp x_sep__17(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_sep__18(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_sep__16(rest, acc, stack, context, line, offset)
    end
  end

  defp x_sep__18(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__19(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__17(rest, [], stack, context, line, offset)
  end

  defp x_sep__20(rest, acc, stack, context, line, offset) do
    x_sep__21(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__21(rest, acc, stack, context, line, offset) do
    x_sep__22(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__22(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_sep__23(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__22(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_sep__19(rest, acc, stack, context, line, offset)
  end

  defp x_sep__23(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_sep__25(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__23(rest, acc, stack, context, line, offset) do
    x_sep__24(rest, acc, stack, context, line, offset)
  end

  defp x_sep__25(rest, acc, stack, context, line, offset) do
    x_sep__23(rest, acc, stack, context, line, offset)
  end

  defp x_sep__24(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_sep__26(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_sep__26(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_sep__27(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_sep__27(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__13(rest, acc, stack, context, line, offset) do
    x_sep__31(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__29(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__28(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__30(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__29(rest, [], stack, context, line, offset)
  end

  defp x_sep__31(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__32(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__31(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__32(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__31(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__32(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__31(rest, acc, stack, context, line, offset) do
    x_sep__30(rest, acc, stack, context, line, offset)
  end

  defp x_sep__32(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__28(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__28(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__33(rest, [cp: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_sep__33(rest, acc, stack, context, line, offset) do
    x_sep__35(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_sep__35(rest, acc, stack, context, line, offset) do
    x_sep__36(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__36(rest, acc, stack, context, line, offset) do
    x_sep__40(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__38(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__39(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__38(rest, [], stack, context, line, offset)
  end

  defp x_sep__40(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__41(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__40(rest, acc, stack, context, line, offset) do
    x_sep__39(rest, acc, stack, context, line, offset)
  end

  defp x_sep__41(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__43(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__41(rest, acc, stack, context, line, offset) do
    x_sep__42(rest, acc, stack, context, line, offset)
  end

  defp x_sep__43(rest, acc, stack, context, line, offset) do
    x_sep__41(rest, acc, stack, context, line, offset)
  end

  defp x_sep__42(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__37(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__44(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_sep__44(<<",", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__45(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__44(rest, acc, stack, context, line, offset) do
    x_sep__34(rest, acc, stack, context, line, offset)
  end

  defp x_sep__45(rest, acc, stack, context, line, offset) do
    x_sep__46(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__46(rest, acc, stack, context, line, offset) do
    x_sep__50(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__48(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__47(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__49(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__48(rest, [], stack, context, line, offset)
  end

  defp x_sep__50(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__51(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__50(rest, acc, stack, context, line, offset) do
    x_sep__49(rest, acc, stack, context, line, offset)
  end

  defp x_sep__51(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__53(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__51(rest, acc, stack, context, line, offset) do
    x_sep__52(rest, acc, stack, context, line, offset)
  end

  defp x_sep__53(rest, acc, stack, context, line, offset) do
    x_sep__51(rest, acc, stack, context, line, offset)
  end

  defp x_sep__52(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__47(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__47(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__54(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_sep__54(rest, acc, stack, context, line, offset) do
    x_sep__55(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__55(rest, acc, stack, context, line, offset) do
    x_sep__63(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__57(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_sep__58(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        [_, _, acc | stack] = stack
        x_sep__34(rest, acc, stack, context, line, offset)
    end
  end

  defp x_sep__58(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__59(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__57(rest, [], stack, context, line, offset)
  end

  defp x_sep__60(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_sep__61(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_sep__59(rest, acc, stack, context, line, offset)
    end
  end

  defp x_sep__61(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__62(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__60(rest, [], stack, context, line, offset)
  end

  defp x_sep__63(rest, acc, stack, context, line, offset) do
    x_sep__64(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__64(rest, acc, stack, context, line, offset) do
    x_sep__65(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__65(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_sep__66(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__65(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_sep__62(rest, acc, stack, context, line, offset)
  end

  defp x_sep__66(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_sep__68(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__66(rest, acc, stack, context, line, offset) do
    x_sep__67(rest, acc, stack, context, line, offset)
  end

  defp x_sep__68(rest, acc, stack, context, line, offset) do
    x_sep__66(rest, acc, stack, context, line, offset)
  end

  defp x_sep__67(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_sep__69(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_sep__69(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_sep__70(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_sep__70(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__56(rest, acc, stack, context, line, offset) do
    x_sep__74(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__72(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__71(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__73(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__72(rest, [], stack, context, line, offset)
  end

  defp x_sep__74(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__75(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__74(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__75(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__74(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__75(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__74(rest, acc, stack, context, line, offset) do
    x_sep__73(rest, acc, stack, context, line, offset)
  end

  defp x_sep__75(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__71(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__71(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__76(rest, [cp: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_sep__34(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_sep__77(rest, acc, stack, context, line, offset)
  end

  defp x_sep__76(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_sep__35(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_sep__77(rest, acc, stack, context, line, offset) do
    x_sep__78(rest, [], [acc | stack], context, line, offset)
  end

  defp x_sep__78(rest, acc, stack, context, line, offset) do
    x_sep__82(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_sep__80(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__79(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__81(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_sep__80(rest, [], stack, context, line, offset)
  end

  defp x_sep__82(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__83(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__82(rest, acc, stack, context, line, offset) do
    x_sep__81(rest, acc, stack, context, line, offset)
  end

  defp x_sep__83(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_sep__85(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_sep__83(rest, acc, stack, context, line, offset) do
    x_sep__84(rest, acc, stack, context, line, offset)
  end

  defp x_sep__85(rest, acc, stack, context, line, offset) do
    x_sep__83(rest, acc, stack, context, line, offset)
  end

  defp x_sep__84(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_sep__79(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_sep__79(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__86(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_sep__86(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_sep__87(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_sep__86(rest, _acc, _stack, context, line, offset) do
    {:error, "expected seq", rest, context, line, offset}
  end

  defp x_sep__87(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_sep__88(rest, [sequence: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_sep__88(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end

  defp x_choice__0(rest, acc, stack, context, line, offset) do
    x_choice__1(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__1(<<"(", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__2(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__1(rest, _acc, _stack, context, line, offset) do
    {:error, "expected choice", rest, context, line, offset}
  end

  defp x_choice__2(rest, acc, stack, context, line, offset) do
    x_choice__3(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__3(rest, acc, stack, context, line, offset) do
    x_choice__7(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__5(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__6(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__5(rest, [], stack, context, line, offset)
  end

  defp x_choice__7(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__8(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__7(rest, acc, stack, context, line, offset) do
    x_choice__6(rest, acc, stack, context, line, offset)
  end

  defp x_choice__8(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__10(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__8(rest, acc, stack, context, line, offset) do
    x_choice__9(rest, acc, stack, context, line, offset)
  end

  defp x_choice__10(rest, acc, stack, context, line, offset) do
    x_choice__8(rest, acc, stack, context, line, offset)
  end

  defp x_choice__9(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__4(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__4(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__11(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_choice__11(rest, acc, stack, context, line, offset) do
    x_choice__12(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__12(rest, acc, stack, context, line, offset) do
    x_choice__20(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__14(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_choice__15(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        error
    end
  end

  defp x_choice__15(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__16(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__14(rest, [], stack, context, line, offset)
  end

  defp x_choice__17(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_choice__18(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_choice__16(rest, acc, stack, context, line, offset)
    end
  end

  defp x_choice__18(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__19(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__17(rest, [], stack, context, line, offset)
  end

  defp x_choice__20(rest, acc, stack, context, line, offset) do
    x_choice__21(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__21(rest, acc, stack, context, line, offset) do
    x_choice__22(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__22(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_choice__23(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__22(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_choice__19(rest, acc, stack, context, line, offset)
  end

  defp x_choice__23(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_choice__25(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__23(rest, acc, stack, context, line, offset) do
    x_choice__24(rest, acc, stack, context, line, offset)
  end

  defp x_choice__25(rest, acc, stack, context, line, offset) do
    x_choice__23(rest, acc, stack, context, line, offset)
  end

  defp x_choice__24(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_choice__26(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_choice__26(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_choice__27(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_choice__27(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__13(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__13(rest, acc, stack, context, line, offset) do
    x_choice__31(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__29(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__28(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__30(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__29(rest, [], stack, context, line, offset)
  end

  defp x_choice__31(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__32(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__31(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__32(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__31(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__32(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__31(rest, acc, stack, context, line, offset) do
    x_choice__30(rest, acc, stack, context, line, offset)
  end

  defp x_choice__32(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__28(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__28(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__33(rest, [cp: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_choice__33(rest, acc, stack, context, line, offset) do
    x_choice__35(rest, [], [{rest, acc, context, line, offset} | stack], context, line, offset)
  end

  defp x_choice__35(rest, acc, stack, context, line, offset) do
    x_choice__36(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__36(rest, acc, stack, context, line, offset) do
    x_choice__40(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__38(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__39(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__38(rest, [], stack, context, line, offset)
  end

  defp x_choice__40(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__41(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__40(rest, acc, stack, context, line, offset) do
    x_choice__39(rest, acc, stack, context, line, offset)
  end

  defp x_choice__41(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__43(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__41(rest, acc, stack, context, line, offset) do
    x_choice__42(rest, acc, stack, context, line, offset)
  end

  defp x_choice__43(rest, acc, stack, context, line, offset) do
    x_choice__41(rest, acc, stack, context, line, offset)
  end

  defp x_choice__42(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__37(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__37(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__44(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_choice__44(<<"|", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__45(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__44(rest, acc, stack, context, line, offset) do
    x_choice__34(rest, acc, stack, context, line, offset)
  end

  defp x_choice__45(rest, acc, stack, context, line, offset) do
    x_choice__46(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__46(rest, acc, stack, context, line, offset) do
    x_choice__50(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__48(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__47(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__49(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__48(rest, [], stack, context, line, offset)
  end

  defp x_choice__50(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__51(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__50(rest, acc, stack, context, line, offset) do
    x_choice__49(rest, acc, stack, context, line, offset)
  end

  defp x_choice__51(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__53(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__51(rest, acc, stack, context, line, offset) do
    x_choice__52(rest, acc, stack, context, line, offset)
  end

  defp x_choice__53(rest, acc, stack, context, line, offset) do
    x_choice__51(rest, acc, stack, context, line, offset)
  end

  defp x_choice__52(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__47(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__47(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__54(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_choice__54(rest, acc, stack, context, line, offset) do
    x_choice__55(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__55(rest, acc, stack, context, line, offset) do
    x_choice__63(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__57(rest, acc, stack, context, line, offset) do
    case(x_sep__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_choice__58(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        [_, _, acc | stack] = stack
        x_choice__34(rest, acc, stack, context, line, offset)
    end
  end

  defp x_choice__58(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__59(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__57(rest, [], stack, context, line, offset)
  end

  defp x_choice__60(rest, acc, stack, context, line, offset) do
    case(x_choice__0(rest, acc, [], context, line, offset)) do
      {:ok, acc, rest, context, line, offset} ->
        x_choice__61(rest, acc, stack, context, line, offset)

      {:error, _, _, _, _, _} = error ->
        x_choice__59(rest, acc, stack, context, line, offset)
    end
  end

  defp x_choice__61(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__62(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__60(rest, [], stack, context, line, offset)
  end

  defp x_choice__63(rest, acc, stack, context, line, offset) do
    x_choice__64(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__64(rest, acc, stack, context, line, offset) do
    x_choice__65(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__65(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) do
    x_choice__66(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__65(rest, _acc, stack, context, line, offset) do
    [_, acc | stack] = stack
    x_choice__62(rest, acc, stack, context, line, offset)
  end

  defp x_choice__66(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 58 or (x0 >= 65 and x0 <= 90) or x0 === 95 or (x0 >= 97 and x0 <= 122) or
              (x0 >= 192 and x0 <= 214) or (x0 >= 216 and x0 <= 246) or (x0 >= 248 and x0 <= 767) or
              (x0 >= 880 and x0 <= 893) or (x0 >= 895 and x0 <= 8191) or
              (x0 >= 8204 and x0 <= 8205) or (x0 >= 8304 and x0 <= 8591) or
              (x0 >= 11264 and x0 <= 12271) or (x0 >= 12289 and x0 <= 55295) or
              (x0 >= 63744 and x0 <= 64975) or x0 === 45 or x0 === 46 or (x0 >= 48 and x0 <= 57) or
              x0 === 183 or (x0 >= 768 and x0 <= 879) or (x0 >= 8255 and x0 <= 8256) do
    x_choice__68(
      rest,
      [x0] ++ acc,
      stack,
      context,
      comb__line,
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__66(rest, acc, stack, context, line, offset) do
    x_choice__67(rest, acc, stack, context, line, offset)
  end

  defp x_choice__68(rest, acc, stack, context, line, offset) do
    x_choice__66(rest, acc, stack, context, line, offset)
  end

  defp x_choice__67(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_choice__69(
      rest,
      [List.to_string(:lists.reverse(user_acc))] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_choice__69(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc

    x_choice__70(
      rest,
      [
        name:
          case(:lists.reverse(user_acc)) do
            [one] ->
              one

            many ->
              raise("unwrap_and_tag/3 expected a single token, got: #{inspect(many)}")
          end
      ] ++ acc,
      stack,
      context,
      line,
      offset
    )
  end

  defp x_choice__70(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__56(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__56(rest, acc, stack, context, line, offset) do
    x_choice__74(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__72(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__71(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__73(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__72(rest, [], stack, context, line, offset)
  end

  defp x_choice__74(<<"?", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__75(rest, [:maybe] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__74(<<"*", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__75(rest, [:some] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__74(<<"+", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__75(rest, [:many] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__74(rest, acc, stack, context, line, offset) do
    x_choice__73(rest, acc, stack, context, line, offset)
  end

  defp x_choice__75(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__71(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__71(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__76(rest, [cp: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_choice__34(_, _, [{rest, acc, context, line, offset} | stack], _, _, _) do
    x_choice__77(rest, acc, stack, context, line, offset)
  end

  defp x_choice__76(
         inner_rest,
         inner_acc,
         [{rest, acc, context, line, offset} | stack],
         inner_context,
         inner_line,
         inner_offset
       ) do
    _ = {rest, acc, context, line, offset}

    x_choice__35(
      inner_rest,
      [],
      [{inner_rest, inner_acc ++ acc, inner_context, inner_line, inner_offset} | stack],
      inner_context,
      inner_line,
      inner_offset
    )
  end

  defp x_choice__77(rest, acc, stack, context, line, offset) do
    x_choice__78(rest, [], [acc | stack], context, line, offset)
  end

  defp x_choice__78(rest, acc, stack, context, line, offset) do
    x_choice__82(rest, [], [{rest, context, line, offset}, acc | stack], context, line, offset)
  end

  defp x_choice__80(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__79(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__81(_, _, [{rest, context, line, offset} | _] = stack, _, _, _) do
    x_choice__80(rest, [], stack, context, line, offset)
  end

  defp x_choice__82(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__83(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__82(rest, acc, stack, context, line, offset) do
    x_choice__81(rest, acc, stack, context, line, offset)
  end

  defp x_choice__83(<<x0::utf8, rest::binary>>, acc, stack, context, comb__line, comb__offset)
       when x0 === 32 or x0 === 9 or x0 === 13 or x0 === 10 do
    x_choice__85(
      rest,
      acc,
      stack,
      context,
      (
        line = comb__line

        case(x0) do
          10 ->
            {elem(line, 0) + 1, comb__offset + byte_size(<<x0::utf8>>)}

          _ ->
            line
        end
      ),
      comb__offset + byte_size(<<x0::utf8>>)
    )
  end

  defp x_choice__83(rest, acc, stack, context, line, offset) do
    x_choice__84(rest, acc, stack, context, line, offset)
  end

  defp x_choice__85(rest, acc, stack, context, line, offset) do
    x_choice__83(rest, acc, stack, context, line, offset)
  end

  defp x_choice__84(rest, acc, [_, previous_acc | stack], context, line, offset) do
    x_choice__79(rest, acc ++ previous_acc, stack, context, line, offset)
  end

  defp x_choice__79(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__86(rest, [] ++ acc, stack, context, line, offset)
  end

  defp x_choice__86(<<")", rest::binary>>, acc, stack, context, comb__line, comb__offset) do
    x_choice__87(rest, [] ++ acc, stack, context, comb__line, comb__offset + 1)
  end

  defp x_choice__86(rest, _acc, _stack, context, line, offset) do
    {:error, "expected choice", rest, context, line, offset}
  end

  defp x_choice__87(rest, user_acc, [acc | stack], context, line, offset) do
    _ = user_acc
    x_choice__88(rest, [choice: :lists.reverse(user_acc)] ++ acc, stack, context, line, offset)
  end

  defp x_choice__88(rest, acc, _stack, context, line, offset) do
    {:ok, acc, rest, context, line, offset}
  end
end
